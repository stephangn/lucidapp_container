[{"/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/index.js":"1","/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/App.js":"2","/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/reportWebVitals.js":"3","/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/pages/Transactions.jsx":"4","/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/pages/Dashboard.jsx":"5","/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/pages/NotFound.jsx":"6","/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/pages/Settings.jsx":"7","/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/pages/DocumentsNew.jsx":"8","/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/pages/Partners.jsx":"9","/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/components/UI/Footer.jsx":"10","/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/axiosApi.js":"11","/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/Web3Client.js":"12","/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/auth.service.js":"13","/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/components/Documents/DocumentCard.jsx":"14","/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/components/Documents/DocumentTransaction.jsx":"15","/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/components/Documents/InvoiceItemForm.jsx":"16","/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/components/Documents/DocumentsModal.jsx":"17","/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/components/Partners/Partner.jsx":"18","/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/components/Partners/PartnersModal.jsx":"19","/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/components/Documents/CardModal.jsx":"20","/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/components/Documents/InvoiceForm.jsx":"21","/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/components/Documents/OtherDocumentsForm.jsx":"22","/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/components/Partners/PartnerForm.jsx":"23","/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/components/Documents/PDFViewer.jsx":"24","/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/components/Transactions/TransactionModal.jsx":"25","/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/components/Transactions/Transaction.jsx":"26","/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/components/Transactions/TransactionForm.jsx":"27","/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/context/AuthProvider.js":"28","/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/hooks/useAuth.js":"29","/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/components/requireAuth.js":"30","/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/hooks/useRefreshToken.js":"31","/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/hooks/useAxiosPrivate.js":"32","/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/components/PersistLogin.js":"33","/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/pages/Declaration.jsx":"34","/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/components/UI/TopNavigation.jsx":"35","/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/components/UI/SideNavigation.jsx":"36","/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/components/Documents/DocumentBreadcrumb.jsx":"37","/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/components/Layout.js":"38","/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/hooks/useDataUpdate.js":"39","/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/components/Partners/PartnerRequests.jsx":"40","/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/components/Declaration/Adressdaten.jsx":"41","/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/components/Declaration/Rechnungsdaten.jsx":"42","/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/components/Declaration/Lieferdaten.jsx":"43","/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/components/Declaration/AllgemeineAngaben.jsx":"44","/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/components/Partners/CompanyModal.jsx":"45","/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/components/Partners/CompanyForm.jsx":"46","/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/pages/Zoll/ZollDocuments.jsx":"47","/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/pages/Zoll/ZollTransactions.jsx":"48","/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/components/Declaration/AnmeldungDokumente.jsx":"49","/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/components/ZollDocuments/ZollDocumentsModal.jsx":"50","/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/components/ZollDocuments/ZollDocumentTransaction.jsx":"51","/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/components/ZollLayout.js":"52","/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/components/ZollUI/ZollSideNavigation.jsx":"53","/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/components/ZollTransactions/ZollTransaction.jsx":"54","/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/pages/Search.jsx":"55","/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/components/Documents/DeclarationCard.jsx":"56","/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/pages/Unauthorized.jsx":"57","/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/components/Documents/PreviewOther.jsx":"58","/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/components/Dashboard/DashboardDocumentCard.jsx":"59","/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/components/Documents/ImporteurDocumentsModal.jsx":"60","/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/pages/DocumentDetail.jsx":"61","/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/components/Documents/PreviewInvoice.jsx":"62","/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/components/Documents/PreviewDeclaration.jsx":"63","/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/pages/Login.jsx":"64","/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/components/Dashboard/NotifcationToast.jsx":"65","/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/components/ZollUI/ZollTopNavigation.jsx":"66"},{"size":825,"mtime":1655384230024,"results":"67","hashOfConfig":"68"},{"size":4120,"mtime":1658346601366,"results":"69","hashOfConfig":"68"},{"size":362,"mtime":1646817874591,"results":"70","hashOfConfig":"68"},{"size":9863,"mtime":1667840853907,"results":"71","hashOfConfig":"68"},{"size":9619,"mtime":1658378342499,"results":"72","hashOfConfig":"68"},{"size":261,"mtime":1656403101674,"results":"73","hashOfConfig":"68"},{"size":5174,"mtime":1658378342501,"results":"74","hashOfConfig":"68"},{"size":15256,"mtime":1658378342500,"results":"75","hashOfConfig":"68"},{"size":7749,"mtime":1667840853907,"results":"76","hashOfConfig":"68"},{"size":778,"mtime":1658378342497,"results":"77","hashOfConfig":"68"},{"size":446,"mtime":1658384938954,"results":"78","hashOfConfig":"68"},{"size":3216,"mtime":1658258156168,"results":"79","hashOfConfig":"68"},{"size":231,"mtime":1647255545908,"results":"80","hashOfConfig":"68"},{"size":6277,"mtime":1658378342493,"results":"81","hashOfConfig":"68"},{"size":5490,"mtime":1658378342493,"results":"82","hashOfConfig":"68"},{"size":1467,"mtime":1650036830577,"results":"83","hashOfConfig":"68"},{"size":3302,"mtime":1658378342493,"results":"84","hashOfConfig":"68"},{"size":4695,"mtime":1658380405636,"results":"85","hashOfConfig":"68"},{"size":1829,"mtime":1658378342496,"results":"86","hashOfConfig":"68"},{"size":1311,"mtime":1658378342493,"results":"87","hashOfConfig":"68"},{"size":10359,"mtime":1658378342494,"results":"88","hashOfConfig":"68"},{"size":14013,"mtime":1658378342494,"results":"89","hashOfConfig":"68"},{"size":4749,"mtime":1658379267219,"results":"90","hashOfConfig":"68"},{"size":1120,"mtime":1650036830578,"results":"91","hashOfConfig":"68"},{"size":1777,"mtime":1656994210588,"results":"92","hashOfConfig":"68"},{"size":12389,"mtime":1658380405636,"results":"93","hashOfConfig":"68"},{"size":4401,"mtime":1658379160247,"results":"94","hashOfConfig":"68"},{"size":342,"mtime":1656589695244,"results":"95","hashOfConfig":"68"},{"size":246,"mtime":1658339904331,"results":"96","hashOfConfig":"68"},{"size":1925,"mtime":1658378918570,"results":"97","hashOfConfig":"68"},{"size":1043,"mtime":1658378634600,"results":"98","hashOfConfig":"68"},{"size":2213,"mtime":1658378763501,"results":"99","hashOfConfig":"68"},{"size":1665,"mtime":1658379025685,"results":"100","hashOfConfig":"68"},{"size":23072,"mtime":1658378342499,"results":"101","hashOfConfig":"68"},{"size":5410,"mtime":1658378342497,"results":"102","hashOfConfig":"68"},{"size":2177,"mtime":1658349465151,"results":"103","hashOfConfig":"68"},{"size":506,"mtime":1654348170975,"results":"104","hashOfConfig":"68"},{"size":1287,"mtime":1656957627674,"results":"105","hashOfConfig":"68"},{"size":1753,"mtime":1658378550431,"results":"106","hashOfConfig":"68"},{"size":5183,"mtime":1658379235757,"results":"107","hashOfConfig":"68"},{"size":12610,"mtime":1658378342492,"results":"108","hashOfConfig":"68"},{"size":9332,"mtime":1658378342493,"results":"109","hashOfConfig":"68"},{"size":9384,"mtime":1658378342492,"results":"110","hashOfConfig":"68"},{"size":8204,"mtime":1658378342492,"results":"111","hashOfConfig":"68"},{"size":1326,"mtime":1655658366451,"results":"112","hashOfConfig":"68"},{"size":3215,"mtime":1655658183481,"results":"113","hashOfConfig":"68"},{"size":10949,"mtime":1658378342501,"results":"114","hashOfConfig":"68"},{"size":5517,"mtime":1667840853907,"results":"115","hashOfConfig":"68"},{"size":2232,"mtime":1658378342492,"results":"116","hashOfConfig":"68"},{"size":1725,"mtime":1658379076259,"results":"117","hashOfConfig":"68"},{"size":14103,"mtime":1658378342498,"results":"118","hashOfConfig":"68"},{"size":1217,"mtime":1658378342498,"results":"119","hashOfConfig":"68"},{"size":1564,"mtime":1658378342499,"results":"120","hashOfConfig":"68"},{"size":2252,"mtime":1658378342498,"results":"121","hashOfConfig":"68"},{"size":6192,"mtime":1658378342500,"results":"122","hashOfConfig":"68"},{"size":2296,"mtime":1656994210585,"results":"123","hashOfConfig":"68"},{"size":421,"mtime":1656595266504,"results":"124","hashOfConfig":"68"},{"size":6584,"mtime":1658378342495,"results":"125","hashOfConfig":"68"},{"size":1374,"mtime":1656915564591,"results":"126","hashOfConfig":"68"},{"size":1506,"mtime":1658378342494,"results":"127","hashOfConfig":"68"},{"size":2243,"mtime":1658378342500,"results":"128","hashOfConfig":"68"},{"size":5270,"mtime":1658378342494,"results":"129","hashOfConfig":"68"},{"size":19704,"mtime":1658378342494,"results":"130","hashOfConfig":"68"},{"size":14885,"mtime":1658378342500,"results":"131","hashOfConfig":"68"},{"size":1672,"mtime":1658378342492,"results":"132","hashOfConfig":"68"},{"size":2666,"mtime":1658378342499,"results":"133","hashOfConfig":"68"},{"filePath":"134","messages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},"12c7hz2",{"filePath":"137","messages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"136"},{"filePath":"140","messages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"142","messages":"143","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"144","messages":"145","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146"},{"filePath":"147","messages":"148","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"149","messages":"150","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151"},{"filePath":"152","messages":"153","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154"},{"filePath":"155","messages":"156","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"157","messages":"158","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159"},{"filePath":"160","messages":"161","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"162","messages":"163","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"164","messages":"165","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"167"},{"filePath":"168","messages":"169","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170"},{"filePath":"171","messages":"172","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173"},{"filePath":"174","messages":"175","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"177","messages":"178","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"179","messages":"180","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"181","messages":"182","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"183","messages":"184","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"185","messages":"186","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187"},{"filePath":"188","messages":"189","errorCount":0,"fatalErrorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"190"},{"filePath":"191","messages":"192","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"193"},{"filePath":"194","messages":"195","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"196"},{"filePath":"197","messages":"198","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"199","messages":"200","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"201"},{"filePath":"202","messages":"203","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"204"},{"filePath":"205","messages":"206","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"207","messages":"208","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"209","messages":"210","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"211"},{"filePath":"212","messages":"213","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"214","messages":"215","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"216","messages":"217","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"218"},{"filePath":"219","messages":"220","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"221"},{"filePath":"222","messages":"223","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"224"},{"filePath":"225","messages":"226","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"227","usedDeprecatedRules":"136"},{"filePath":"228","messages":"229","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"230","messages":"231","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"232","messages":"233","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"234"},{"filePath":"235","messages":"236","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"237"},{"filePath":"238","messages":"239","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"240","messages":"241","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"242"},{"filePath":"243","messages":"244","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"245"},{"filePath":"246","messages":"247","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"248"},{"filePath":"249","messages":"250","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"251"},{"filePath":"252","messages":"253","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"254","usedDeprecatedRules":"251"},{"filePath":"255","messages":"256","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"257"},{"filePath":"258","messages":"259","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"260","messages":"261","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"262"},{"filePath":"263","messages":"264","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"265"},{"filePath":"266","messages":"267","errorCount":0,"fatalErrorCount":0,"warningCount":24,"fixableErrorCount":0,"fixableWarningCount":0,"source":"268"},{"filePath":"269","messages":"270","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"271"},{"filePath":"272","messages":"273","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"274","messages":"275","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"276","messages":"277","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"278"},{"filePath":"279","messages":"280","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"281","messages":"282","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"283","messages":"284","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"285"},{"filePath":"286","messages":"287","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"288","usedDeprecatedRules":"136"},{"filePath":"289","messages":"290","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"291","messages":"292","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"293"},{"filePath":"294","messages":"295","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"296"},{"filePath":"297","messages":"298","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"299"},{"filePath":"300","messages":"301","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"302"},{"filePath":"303","messages":"304","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"305"},{"filePath":"306","messages":"307","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/index.js",[],["308","309"],"/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/App.js",["310","311","312","313"],"import React, { useState } from \"react\";\nimport \"./App.css\";\n\nimport Dashboard from \"./pages/Dashboard\";\nimport Transactions from \"./pages/Transactions\";\nimport Partners from \"./pages/Partners\";\nimport Settings from \"./pages/Settings\";\nimport NotFound from \"./pages/NotFound\";\nimport DocumentsNew from \"./pages/DocumentsNew\";\nimport Layout from \"./components/Layout\";\nimport Declaration from \"./pages/Declaration\";\nimport Search from \"./pages/Search\";\n\nimport DocumentDetail from \"./pages/DocumentDetail\";\nimport PreviewOther from \"./components/Documents/PreviewOther\";\nimport Unauthorized from \"./pages/Unauthorized\";\nimport Login from \"./pages/Login\";\n\n// Zoll Pages\nimport ZollTransactions from \"./pages/Zoll/ZollTransactions\";\nimport ZollDocuments from \"./pages/Zoll/ZollDocuments\";\nimport ZollLayout from \"./components/ZollLayout\";\n\nimport RequireAuth from \"./components/requireAuth\";\nimport PersistLogin from \"./components/PersistLogin\";\n\nimport { Routes, Route } from \"react-router-dom\";\nimport PreviewDelacration from \"./components/Documents/PreviewDeclaration\";\n\nimport useAuth from \"./hooks/useAuth\";\n\nfunction App() {\n  const { auth } = useAuth();\n  return (\n    <Routes>\n      {/*public routes*/}\n\n      {/* Layout Komponente ist gerade ein Outlet (alles andere erbt davon für alles), ich würde vorschlagen zwei Anzulegen einmal für zoll und normale Mitarbeiter. Das können wir auch nach Farben utnescheiden*/}\n      <Route path=\"login\" element={<Login />} />\n\n      {/*allgemeine Klasse für persistent Login*/}\n      <Route element={<PersistLogin />}>\n        <Route\n          path=\"/\"\n          element={\n            auth.role == \"company_employee\" ? <Layout /> : <ZollLayout />\n          }\n        >\n          <Route\n            element={\n              <RequireAuth\n                allowedRoles={[\"company_employee\", \"custom_officer\"]}\n              />\n            }\n          >\n            <Route\n              path=\"/\"\n              element={\n                auth.role == \"company_employee\" ? (\n                  <Dashboard />\n                ) : (\n                  <ZollTransactions />\n                )\n              }\n            />\n          </Route>\n\n          {/* private for company */}\n          <Route element={<RequireAuth allowedRoles={[\"company_employee\"]} />}>\n            <Route path=\"search\" element={<Search />} />\n\n            <Route path=\"dashboard\" element={<Dashboard />} />\n            <Route path=\"transactions\" key={3} element={<Transactions />} />\n            <Route path=\"partners\" element={<Partners />} />\n            <Route path=\"/partners/:partnershipID\" element={<Transactions />} />\n            <Route path=\"settings\" element={<Settings />} />\n            <Route\n              path=\"/transactions/:transactionId\"\n              element={<DocumentsNew />}\n            ></Route>\n            <Route\n              path=\"/transactions/:transactionId/declarationView\"\n              element={<PreviewDelacration />}\n            />\n            <Route\n              path=\"/transactions/:transactionId/declaration\"\n              element={<Declaration />}\n            />\n            <Route\n              path=\"/transactions/:transactionId/document/:documentID\"\n              element={<DocumentDetail />}\n            />\n          </Route>\n          {/*private routes für den zoll*/}\n          <Route element={<RequireAuth allowedRoles={[\"custom_officer\"]} />}>\n            <Route\n              path=\"zoll/declarations/:declarationID\"\n              element={<ZollDocuments />}\n            />\n            <Route path=\"zoll/declarations\" element={<ZollTransactions />} />\n            <Route\n              path=\"zoll/declarations/:declarationID/declarationView\"\n              element={<PreviewDelacration />}\n            />\n            <Route\n              path=\"zoll/declarations/:declarationID/document/:documentID\"\n              element={<DocumentDetail />}\n            />\n          </Route>\n        </Route>\n      </Route>\n\n      <Route path=\"*\" element={<NotFound />} />\n      <Route path=\"/unauthorized\" element={<Unauthorized />} />\n    </Routes>\n  );\n}\n\nexport default App;\n","/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/reportWebVitals.js",[],"/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/pages/Transactions.jsx",["314","315","316","317","318","319","320"],"/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/pages/Dashboard.jsx",["321","322"],"import React, { useEffect, useState } from \"react\";\nimport \"./css/LoadingSpinner.css\";\nimport {\n  MDBContainer,\n  MDBCard,\n  MDBCardBody,\n  MDBCardTitle,\n  MDBCardText,\n  MDBBtn,\n  MDBCardHeader,\n  MDBRow,\n  MDBCol,\n  MDBSpinner,\n} from \"mdb-react-ui-kit\";\n\nimport useAuth from \"../hooks/useAuth\";\n\nimport DashboardDocumentCard from \"../components/Dashboard/DashboardDocumentCard\";\nimport axiosInstance from \"../axiosApi\";\nimport { Link } from \"react-router-dom\";\nimport NotificationToast from \"../components/Dashboard/NotifcationToast\";\n\nfunction Dashboard() {\n  // Transaktionen\n  const [transactionsData, setTransactionsData] = useState([]);\n\n  // Dokumente\n  const [documentsData, setDocumentsData] = useState([]);\n\n  const [openRequests, setopenRequests] = useState([]);\n\n  const [isLoading, setIsLoading] = useState(true);\n\n  const { auth } = useAuth();\n\n  // DB Call\n  async function getDashboardData() {\n    //Abfragen der Transaktionen\n    await axiosInstance\n      .get(\"transactions/\")\n      .then((res) => {\n        setTransactionsData(res.data);\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n\n    //Abfragen der Dokumente\n    await axiosInstance\n      .get(\"documents/\")\n      .then((res) => {\n        setDocumentsData(res.data);\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n    //Abfragen der unbestätigten Partnerschaften bei denen wir Partner 2 sind\n\n    await axiosInstance\n      .get(`partnership/?partner2=${auth.eori_nr}&confirmed=false`)\n      .then((res) => {\n        setopenRequests(res.data);\n      })\n      .catch(function (error) {\n        if (error.response) {\n          // The request was made and the server responded with a status code\n          // that falls out of the range of 2xx\n          console.log(error.response.data);\n          console.log(error.response.status);\n          console.log(error.response.headers);\n        } else if (error.request) {\n          // The request was made but no response was received\n          // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\n          // http.ClientRequest in node.js\n          console.log(error.request);\n        } else {\n          // Something happened in setting up the request that triggered an Error\n          console.log(\"Error\", error.message);\n        }\n      });\n    await axiosInstance\n      .get(`/alerts?unread=true`)\n      .then((res) => {\n        setAlerts(res.data);\n      })\n      .catch(function (error) {\n        if (error.response) {\n          // The request was made and the server responded with a status code\n          // that falls out of the range of 2xx\n          console.log(error.response.data);\n          console.log(error.response.status);\n          console.log(error.response.headers);\n        } else if (error.request) {\n          // The request was made but no response was received\n          // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\n          // http.ClientRequest in node.js\n          console.log(error.request);\n        } else {\n          // Something happened in setting up the request that triggered an Error\n          console.log(\"Error\", error.message);\n        }\n      });\n    setIsLoading(false);\n  }\n\n  // Transaktionen abrufen\n  useEffect(() => {\n    getDashboardData();\n  }, []);\n\n  // Dokumente abrufen\n  useEffect(() => {\n    axiosInstance.get(\"documents/\").then((res) => {\n      setDocumentsData(res.data);\n    });\n  }, []);\n\n  const [alerts, setAlerts] = useState([]);\n\n  return (\n    <>\n      {isLoading ? (\n        <div className=\"loadingSpinner\">\n          <MDBSpinner>\n            <span className=\"visually-hidden\">Lädt..</span>\n          </MDBSpinner>\n        </div>\n      ) : (\n        <div>\n          <MDBContainer>\n            <h3>Dashboard</h3>\n            <br />\n            <MDBRow>\n              <MDBCol className=\"col-md-6 mb-4\">\n                <MDBCard style={{ height: \"500px\" }}>\n                  <MDBCardHeader style={{ background: \"#fbfbfb\" }}>\n                    <b>Benachrichtigungen</b>\n                  </MDBCardHeader>\n                  <MDBCardBody className=\"overflow-scroll\">\n                    <MDBCardText>\n                      <>\n                        {alerts.length !== 0 ? (\n                          <>\n                            {alerts.map((alert) => (\n                              <NotificationToast key={alert.id} alert={alert} />\n                            ))}\n                          </>\n                        ) : (\n                          <MDBCardTitle className=\"mt-5\">\n                            Keine neuen Benachrichtungen\n                          </MDBCardTitle>\n                        )}\n                      </>\n                    </MDBCardText>\n                  </MDBCardBody>\n                </MDBCard>\n              </MDBCol>\n              <MDBCol className=\"col-md-6 mb-4\">\n                <MDBCard style={{ height: \"240px\", marginBottom: \"20px\" }}>\n                  <MDBCardHeader style={{ background: \"#fbfbfb\" }}>\n                    <b>Anzahl aktiver Aufträge: </b> {transactionsData.length}\n                  </MDBCardHeader>\n                  <MDBCardBody>\n                    {transactionsData !== [] ? (\n                      <>\n                        <i>Zuletzt aktualisiert:</i>\n                        <MDBCardTitle>\n                          {transactionsData[0].description}\n                        </MDBCardTitle>\n                        <MDBCardText>\n                          {transactionsData[0].partnership.partner.name}\n                          <br />\n                          {transactionsData[0].partnership.partner.street}{\" \"}\n                          <br />\n                          {\n                            transactionsData[0].partnership.partner.city_code\n                          }{\" \"}\n                          {transactionsData[0].partnership.partner.city},{\" \"}\n                          {transactionsData[0].partnership.partner.country_code}{\" \"}\n                          <Link\n                            style={{}}\n                            to={\n                              \"/transactions/\" +\n                              transactionsData[0].id.toString()\n                            }\n                            key={transactionsData[0].id}\n                          >\n                            <MDBBtn outline className=\"float-end\">\n                              Zum Auftrag\n                            </MDBBtn>\n                          </Link>\n                        </MDBCardText>\n                      </>\n                    ) : (\n                      <MDBCardTitle className=\"mt-5\">\n                        Keine neuen Anfragen\n                      </MDBCardTitle>\n                    )}\n                  </MDBCardBody>\n                </MDBCard>\n\n                <MDBCard style={{ height: \"240px\" }}>\n                  <MDBCardHeader style={{ background: \"#fbfbfb\" }}>\n                    <b>Ausstehende Partneranfragen: </b> {openRequests.length}\n                  </MDBCardHeader>\n                  <MDBCardBody>\n                    {openRequests.length != 0 ? (\n                      <>\n                        <i>Neuste Anfrage:</i>\n                        <MDBCardTitle>\n                          {openRequests[0].partner.name}\n                        </MDBCardTitle>\n                        <MDBCardText>\n                          EORI: {openRequests[0].partner.eori_nr}\n                          <br />\n                          Anfragedatum: {openRequests[0].date_added}\n                          <div className=\"float-end\">\n                            <Link\n                              style={{ display: \"block\", margin: \"1rem 0\" }}\n                              to={\"/partners/\"}\n                            >\n                              <MDBBtn outline className=\"float-end\">\n                                Zur Partnerübersicht\n                              </MDBBtn>\n                            </Link>\n                          </div>\n                        </MDBCardText>\n                      </>\n                    ) : (\n                      <MDBCardTitle className=\"mt-5\">\n                        Keine neuen Anfragen\n                      </MDBCardTitle>\n                    )}\n                  </MDBCardBody>\n                </MDBCard>\n              </MDBCol>\n            </MDBRow>\n            <MDBRow>\n              <MDBCol>\n                <MDBCard>\n                  <MDBCardHeader style={{ background: \"#fbfbfb\" }}>\n                    <b>Zuletzt hinzugefügte Dokumente</b>\n                  </MDBCardHeader>\n                  <MDBCardBody>\n                    <MDBCardText>\n                      {documentsData !== [] ? (\n                        <MDBRow className=\"d-flex justify-content-center\">\n                          {documentsData.slice(0, 3).map((document) => (\n                            <React.Fragment key={document.id}>\n                              <DashboardDocumentCard document={document} />\n                              <br />\n                            </React.Fragment>\n                          ))}\n                        </MDBRow>\n                      ) : (\n                        <MDBRow>\n                          <p>Es liegen noch keine Dokumente vor.</p>\n                        </MDBRow>\n                      )}\n                    </MDBCardText>\n                  </MDBCardBody>\n                </MDBCard>\n              </MDBCol>\n            </MDBRow>\n          </MDBContainer>\n        </div>\n      )}\n    </>\n  );\n}\n\nexport default Dashboard;\n","/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/pages/NotFound.jsx",[],"/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/pages/Settings.jsx",["323","324","325","326","327"],"import React, { useEffect, useState } from \"react\";\nimport {\n  MDBContainer,\n  MDBInput,\n  MDBBtn,\n  MDBRow,\n  MDBCol,\n} from \"mdb-react-ui-kit\";\nimport useAuth from \"../hooks/useAuth\";\nimport useAxiosPrivate from \"../hooks/useAxiosPrivate\";\n\nfunction Settings() {\n  const [oldPassword, setOldPassword] = useState();\n  const [newPassword, setNewPassword] = useState();\n  const [newPassword2, setNewPassword2] = useState();\n\n  const axiosInstance = useAxiosPrivate();\n\n  //Abfragen der Nutzerdaten aus Authentifizierungscontext\n  const { auth } = useAuth();\n\n  const [passwordError, setPasswordError] = useState(null);\n\n  function handlePasswordSubmit(event) {\n    event.preventDefault();\n\n    // Validierung\n    if (oldPassword == \"\" || oldPassword == null) {\n      setPasswordError(\"Aktuelles Passwort eingeben.\");\n      return;\n    }\n    if (newPassword == \"\" || newPassword == null) {\n      setPasswordError(\"Neues Passwort eingeben.\");\n      return;\n    }\n    if (newPassword == \"\" || newPassword == null) {\n      setPasswordError(\"Neues Passwort wiederholen.\");\n      return;\n    }\n    if (newPassword !== newPassword2) {\n      setPasswordError(\"Neue Passwörter stimmen nicht überein.\");\n      return;\n    }\n\n    // Neues Passwort \"newPassword\" zum Passwort machen:\n    // POST-Request\n    axiosInstance\n      .patch(\"/change_password/\" + auth.userData?.id + \"/\", {\n        password: newPassword,\n        password2: newPassword2,\n        oldPassword: oldPassword,\n      })\n      .then((res) => {\n        setPasswordError(\"Neues Passwort erfolgreich angelegt.\");\n        return;\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  }\n\n  return (\n    <div>\n      <MDBContainer>\n        <h3>Benutzer-Account</h3>\n        <br />\n        <MDBRow className=\"mb-2\">\n          <MDBCol sm=\"6\">\n            <h4 className=\"mb-3\">Accountinformationen</h4>\n            <h5>Unternehmen</h5>\n            <p>\n              <b>Name des Unternehmens: </b>\n              <br />\n              {auth.userData?.employee.company.name}\n            </p>\n            <p>\n              <b>EORI-Nr.: </b>\n              <br />\n              {auth.userData?.employee.company.eori_nr}\n            </p>\n            <p>\n              <b>Straße u. Hausnr.: </b>\n              <br />\n              {auth.userData?.employee.company.street}\n            </p>\n            <p>\n              <b>PLZ: </b>\n              <br />\n              {auth.userData?.employee.company.city_code}\n            </p>\n            <p>\n              <b>Stadt: </b>\n              <br />\n              {auth.userData?.employee.company.city}\n            </p>\n            <p>\n              <b>Land: </b>\n              <br />\n              {auth.userData?.employee.company.country_code}\n            </p>\n            <p>\n              <b>E-Mail Adresse: </b>\n              <br />\n              {auth.userData?.employee.company.email}\n            </p>\n            <p>\n              <b>Telefonnr.: </b>\n              <br />\n              {auth.userData?.employee.company.phone}\n            </p>\n            <hr className=\"my-4\" />\n            <h5>Eigenes Mitarbeiter-Konto</h5>\n            <p>\n              <b>Account-Name: </b>\n              <br />\n              {auth.username}\n            </p>\n          </MDBCol>\n          <MDBCol sm=\"6\">\n            <h4 className=\"mb-3\">Passwort aktualisieren</h4>\n            <form onSubmit={handlePasswordSubmit} style={{ width: \"300px\" }}>\n              <MDBInput\n                value={oldPassword}\n                onChange={(e) => setOldPassword(e.target.value)}\n                autocomplete=\"new-password\"\n                className=\"mb-4\"\n                type=\"Password\"\n                id=\"newPassword\"\n                name=\"newPassword\"\n                label=\"Aktuelles Passwort\"\n              />\n              <MDBInput\n                value={newPassword}\n                onChange={(e) => setNewPassword(e.target.value)}\n                autocomplete=\"new-password\"\n                className=\"mb-3\"\n                type=\"Password\"\n                id=\"oldPassword\"\n                name=\"oldPassword\"\n                label=\"Neues Passwort\"\n              />\n              <MDBInput\n                value={newPassword2}\n                onChange={(e) => setNewPassword2(e.target.value)}\n                autocomplete=\"new-password\"\n                className=\"mb-4\"\n                type=\"Password\"\n                id=\"oldPassword2\"\n                name=\"oldPassword2\"\n                label=\"Neues Passwort wiederholen\"\n              />\n\n              <MDBBtn block type=\"submit\" className=\"mb-4\">\n                Passwort aktualisieren\n              </MDBBtn>\n              {passwordError == \"Neues Passwort erfolgreich angelegt.\" ? (\n                <div className=\"alert alert-success\" role=\"alert\">\n                  {passwordError}\n                </div>\n              ) : passwordError !== null ? (\n                <div className=\"alert alert-danger\" role=\"alert\">\n                  {passwordError}\n                </div>\n              ) : null}\n            </form>\n          </MDBCol>\n        </MDBRow>\n      </MDBContainer>\n    </div>\n  );\n}\n\nexport default Settings;\n","/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/pages/DocumentsNew.jsx",["328","329","330","331","332","333","334","335","336","337","338","339","340"],"import React, { useEffect, useState } from \"react\";\nimport { useParams, useLocation } from \"react-router-dom\";\nimport useAxiosPrivate from \"../hooks/useAxiosPrivate\";\nimport \"./css/LoadingSpinner.css\";\nimport {\n  MDBContainer,\n  MDBBtn,\n  MDBRow,\n  MDBCol,\n  MDBSpinner,\n  MDBBadge,\n  MDBIcon,\n} from \"mdb-react-ui-kit\";\nimport Divider from \"@mui/material/Divider\";\nimport Snackbar from \"@mui/material/Snackbar\";\nimport MuiAlert from \"@mui/material/Alert\";\n\nimport DocumentsModal from \"../components/Documents/DocumentsModal\";\nimport ImporteurDocumentsModal from \"../components/Documents/ImporteurDocumentsModal\";\nimport DocumentTransaction from \"../components/Documents/DocumentTransaction\";\nimport DocumentCard from \"../components/Documents/DocumentCard\";\nimport DeclarationCard from \"../components/Documents/DeclarationCard\";\nimport DocumentBreadcrump from \"../components/Documents/DocumentBreadcrumb\";\nimport useAuth from \"../hooks/useAuth\";\n\n// Snackbar-Alert\nconst Alert = React.forwardRef(function Alert(props, ref) {\n  return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\n});\n\nfunction DocumentsNew(props) {\n  // Für Rückkehr von Zollanmeldung\n  let location = useLocation();\n  let declarationLocationState = location.state;\n  console.log(declarationLocationState);\n\n  // Auslösen des Snackbar-Alerts bei Rückerkehr von Zollanmeldung\n  useEffect(() => {\n    console.log(declarationLocationState);\n    if (declarationLocationState !== null) {\n      setSnackbarSuccess(declarationLocationState.success);\n      setSnackbarMessage(declarationLocationState.message);\n      handleOpenSnackbar();\n    }\n  }, [declarationLocationState]);\n\n  // Allgemeine Auftragsinformationen\n  const [transactionData, setTransactionData] = useState([]);\n\n  // Informationen der hochgeladenen Dokumente\n  const [documentsData, setDocumentsData] = useState([]);\n\n  // State für Ladeanimation\n  const [isLoading, setIsLoading] = useState(true);\n\n  const axiosInstance = useAxiosPrivate();\n\n  // Derzeitiger User ist Importeur oder Exporteur\n  const [isImporteur, setIsImporteur] = useState(false);\n\n  // State wird in Document Upload Modal weitergereicht.\n  // Löst useEffect aus, sobald neues Dokument hochgeladen wurde.\n  const [newDocument, setNewDocument] = useState(false);\n\n  const [isDeclaration, setIsDeclaration] = useState(false);\n  const [declarationData, setDeclarationData] = useState();\n  const [totalValue, setTotalValue] = useState(true);\n  const [invoiceData, setInvoiceData] = useState();\n  const [isInvoice, setIsInvoice] = useState();\n\n  // Anzahl Dokumente\n  const [numberInvoiceDocuments, setNumberInvoiceDocuments] = useState(0);\n  const [numberOtherDocuments, setNumberOtherDocuments] = useState(0);\n\n  // State für \"Dokument hinzufügen\" Modal\n  const [addDocumentModal, setAddDocumentModal] = useState(false);\n  // Funktion für Manipulation von Modal (als props weitergereicht)\n  function toggleAddDocumentModal() {\n    setAddDocumentModal(!addDocumentModal);\n  }\n\n  // Speichern der Transaktions-ID aus URL\n  const { transactionId } = useParams();\n  const { auth } = useAuth();\n\n  // DB Call\n  useEffect(async () => {\n    await axiosInstance.get(`transactions/` + transactionId).then((res) => {\n      //console.log(res.data);\n      setTransactionData(res.data);\n      if (auth.eori_nr == res.data.importeur) {\n        setIsImporteur(true);\n      }\n    });\n    console.log(transactionData);\n    await axiosInstance\n      .get(`documents/?transaction=` + transactionId)\n      .then((res) => {\n        //console.log(res.data);\n        setDocumentsData(res.data);\n      });\n\n    await axiosInstance\n      .get(`declaration_auth/?transaction=` + transactionId)\n      .then((res) => {\n        console.log(res.data.length);\n        if (res.data[0]) {\n          axiosInstance\n            .get(\"invoice/\" + res.data[0].invoice.id + \"/\")\n            .then((resInvoice) => {\n              setTotalValue(resInvoice.data.total_value);\n              //console.log(res.data.total_value)\n              setInvoiceData(resInvoice.data);\n              setIsInvoice(true);\n            })\n            .catch((err) => {\n              console.log(\"Keine Rechnung vorhanden\");\n              setIsInvoice(false);\n            });\n        } else {\n          setIsInvoice(false);\n        }\n        if (res.data.length > 0) {\n          console.log(\"Zollanmeldung liegt vor\");\n          setIsDeclaration(true);\n          setDeclarationData(res.data[0]);\n        }\n      });\n\n    setIsLoading(false);\n  }, [newDocument]);\n  // Wenn neues Dokument hinzugefügt wird GET-Request erneut ausgeführt\n\n  // Summiert Anzahl von Dokumenten,\n  // immer wenn sich documentsData verändert\n  useEffect(() => {\n    let invoices = 0;\n    let other = 0;\n    for (let i = 0; i < documentsData.length; i++) {\n      if (documentsData[i].type == \"Rechnung\") {\n        invoices += 1;\n      } else {\n        other += 1;\n      }\n    }\n    setNumberInvoiceDocuments(invoices);\n    setNumberOtherDocuments(other);\n  }, [documentsData]);\n\n  // -- Snackbar-Alert Rückmeldung --\n  // State: Geöffnet (true) / Geschlossen (false)\n  const [openSnackbar, setOpenSnackbar] = useState(false);\n  // State: Succcess (true) / Error (false)\n  const [snackbarSuccess, setSnackbarSuccess] = useState(true);\n  // State: Snackbar Nachricht\n  const [snackbarMessage, setSnackbarMessage] = useState(\"\");\n\n  // Öffnen der Snackbar\n  const handleOpenSnackbar = () => {\n    setOpenSnackbar(true);\n  };\n\n  // Schließen der Snackbar\n  const handleCloseSnackbar = (event, reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n\n    setOpenSnackbar(false);\n  };\n\n  return (\n    <>\n      {isLoading ? (\n        <div className=\"loadingSpinner\">\n          <MDBSpinner>\n            <span className=\"visually-hidden\">Lädt..</span>\n          </MDBSpinner>\n        </div>\n      ) : (\n        <>\n          <MDBContainer>\n            <h3>Dokumente</h3>\n            {/* Dokumenten Modal */}\n            {isImporteur == true ? (\n              <ImporteurDocumentsModal\n                // Modal\n                addDocumentModal={addDocumentModal}\n                setAddDocumentModal={setAddDocumentModal}\n                toggleAddDocumentModal={toggleAddDocumentModal}\n                transactionData={transactionData}\n                // Update State bei neuem Dokument\n                newDocument={newDocument}\n                setNewDocument={setNewDocument}\n                // Snackbar\n                handleOpenSnackbar={handleOpenSnackbar}\n                handleCloseSnackbar={handleCloseSnackbar}\n                setSnackbarSuccess={setSnackbarSuccess}\n                setSnackbarMessage={setSnackbarMessage}\n              />\n            ) : (\n              <DocumentsModal\n                // Modal\n                addDocumentModal={addDocumentModal}\n                setAddDocumentModal={setAddDocumentModal}\n                toggleAddDocumentModal={toggleAddDocumentModal}\n                transactionData={transactionData}\n                // Update State bei neuem Dokument\n                newDocument={newDocument}\n                setNewDocument={setNewDocument}\n                // Snackbar\n                handleOpenSnackbar={handleOpenSnackbar}\n                handleCloseSnackbar={handleCloseSnackbar}\n                setSnackbarSuccess={setSnackbarSuccess}\n                setSnackbarMessage={setSnackbarMessage}\n              />\n            )}\n            <DocumentBreadcrump\n              key={transactionId}\n              transactionId={transactionId}\n            />\n            <DocumentTransaction\n              description={transactionData.description}\n              dateAdded={transactionData.date_added}\n              dateProcessed={transactionData.date_processed}\n              status={transactionData.status}\n              street={transactionData.partnership.partner.street}\n              cityCode={transactionData.partnership.partner.city_code}\n              countryCode={transactionData.partnership.partner.country_code}\n              city={transactionData.partnership.partner.city}\n              name={transactionData.partnership.partner.name}\n              id={transactionData.id}\n              blockchain_rid={transactionData.blockchain_id}\n              transactionData={transactionData}\n              isImporteur={isImporteur}\n              numberInvoiceDocuments={numberInvoiceDocuments}\n              numberOtherDocuments={numberOtherDocuments}\n              isDeclaration={isDeclaration}\n            />\n            {/* Navleiste mit Anzahl der Dokumente */}\n            <nav className=\"my-3 navbar navbar-expand-lg navbar-light bg-light\">\n              <MDBContainer>\n                <div>\n                  {isDeclaration ? (\n                    <>\n                      <MDBBadge pill className=\"ms-3\">\n                        {1}\n                      </MDBBadge>{\" \"}\n                      <b>Zollanmeldung</b>\n                    </>\n                  ) : (\n                    <>\n                      <MDBBadge pill className=\"ms-3\">\n                        {0}\n                      </MDBBadge>{\" \"}\n                      <b>Zollanmeldung</b>\n                    </>\n                  )}\n                  <MDBBadge pill className=\"ms-3\">\n                    {numberInvoiceDocuments}\n                  </MDBBadge>{\" \"}\n                  <b>Rechnungsdokumente</b>\n                  <MDBBadge pill className=\"ms-3\">\n                    {numberOtherDocuments}\n                  </MDBBadge>{\" \"}\n                  <b>Sonstige Dokumente</b>\n                </div>\n                <MDBBtn\n                  className=\"float-end\"\n                  color=\"success\"\n                  onClick={toggleAddDocumentModal}\n                >\n                  <MDBIcon size=\"lg\" className=\"me-2\" fas icon=\"plus\" />\n                  Dokument hinzufügen\n                </MDBBtn>\n              </MDBContainer>\n            </nav>\n            {/* Auflistung der Rechnungsdokumente */}\n            {isDeclaration && (\n              <>\n                <Divider textAlign=\"left\" className=\"mb-4\">\n                  <h5>Zollanmeldung</h5>\n                </Divider>\n                <DeclarationCard\n                  anmeldeArt={declarationData.anmeldeArt}\n                  gesamtbetrag={totalValue}\n                  bearbeitendeDienststelle={declarationData.customs_office.name}\n                  lieferkosten={declarationData.invoice.transport_costs}\n                  documentId={documentsData.documentId}\n                  anmelderName={declarationData.importeur.name}\n                  issue_date={declarationData.date_added}\n                />\n              </>\n            )}\n\n            {/* Auflistung der Rechnungsdokumente */}\n            {numberInvoiceDocuments !== 0 && (\n              <>\n                <Divider textAlign=\"left\" className=\"mt-5 mb-4\">\n                  {numberInvoiceDocuments == 1 ? (\n                    <h5>Rechnungsdokument</h5>\n                  ) : (\n                    <h5>Rechnungsdokumente</h5>\n                  )}\n                </Divider>{\" \"}\n                <MDBRow>\n                  {documentsData.map(\n                    (documentData) =>\n                      documentData.type == \"Rechnung\" && (\n                        <React.Fragment>\n                          <MDBCol className=\"mb-4 d-flex justify-content-center\">\n                            <DocumentCard\n                              key={documentData.id}\n                              id={documentData.id}\n                              author_company={\n                                documentData.owner.employee.company.name\n                              }\n                              author={documentData.owner.username}\n                              type={documentData.type}\n                              description={documentData.description}\n                              documentDate={documentData.issue_date}\n                              uploadDate={documentData.upload_date}\n                              blockchain_did={documentData.blockchain_did}\n                              file={documentData.file}\n                              confirmed={documentData.confirmed}\n                            />\n                          </MDBCol>\n                        </React.Fragment>\n                      )\n                  )}\n                </MDBRow>\n              </>\n            )}\n\n            {/* Auflistung der sonstigen Dokumente */}\n            {numberOtherDocuments !== 0 && (\n              <>\n                <Divider textAlign=\"left\" className=\"mt-5 mb-4\">\n                  <h5>Sonstige Dokumente</h5>\n                </Divider>\n                <MDBRow>\n                  {documentsData.map(\n                    (documentData) =>\n                      documentData.type !== \"Rechnung\" && (\n                        <React.Fragment>\n                          <MDBCol className=\"mb-4 d-flex justify-content-center\">\n                            <DocumentCard\n                              key={documentData.id}\n                              id={documentData.id}\n                              author={documentData.author}\n                              type={documentData.type}\n                              description={documentData.description}\n                              documentDate={documentData.issue_date}\n                              uploadDate={documentData.upload_date}\n                              file={documentData.file}\n                              confirmed={documentData.confirmed}\n                              blockchain_did={documentData.blockchain_id}\n                            />\n                          </MDBCol>\n                        </React.Fragment>\n                      )\n                  )}\n                </MDBRow>\n              </>\n            )}\n\n            {/* Fals 0 Dokumente vorliegen */}\n            {isDeclaration == false &&\n            numberInvoiceDocuments == 0 &&\n            numberOtherDocuments == 0 ? (\n              <div\n                className=\"d-flex align-items-center justify-content-center \"\n                style={{\n                  height: \"400px\",\n                }}\n              >\n                <h4\n                  style={{\n                    color: \"grey\",\n                  }}\n                >\n                  Es liegen noch keine Dokumente vor.\n                </h4>\n              </div>\n            ) : null}\n          </MDBContainer>\n          <Snackbar\n            anchorOrigin={{ vertical: \"top\", horizontal: \"right\" }}\n            open={openSnackbar}\n            autoHideDuration={6000}\n            onClose={handleCloseSnackbar}\n            className=\"mt-5\"\n          >\n            {snackbarSuccess == true ? (\n              <Alert\n                onClose={handleCloseSnackbar}\n                severity=\"success\"\n                sx={{ width: \"100%\" }}\n              >\n                {snackbarMessage}\n              </Alert>\n            ) : (\n              <Alert\n                onClose={handleCloseSnackbar}\n                severity=\"error\"\n                sx={{ width: \"100%\" }}\n              >\n                {snackbarMessage}\n              </Alert>\n            )}\n          </Snackbar>\n        </>\n      )}\n    </>\n  );\n}\n\nexport default DocumentsNew;\n","/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/pages/Partners.jsx",["341","342"],"/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/components/UI/Footer.jsx",["343","344"],"import React from \"react\";\nimport { MDBFooter } from \"mdb-react-ui-kit\";\nimport UniLogo from \"../../Uni_Logo.png\";\nimport Lucid from \"../../LUCID.jpg\";\n\nfunction Footer() {\n  return (\n    <MDBFooter className=\"mt-3 text-center text-lg-left fixed-bottom\">\n      <div\n        className=\"text-center p-3 \"\n        style={{\n          backgroundColor: \"#f1f1f1\",\n        }}\n      >\n        <img src={Lucid} className=\"me-4\" style={{ width: \"2rem\" }} />{\" \"}\n        <img src={UniLogo} className=\"me-4\" style={{ width: \"10rem\" }} />{\" \"}\n        <a\n          className=\"text-dark\"\n          href=\"https://www.uni-goettingen.de/de/43876.html\"\n        >\n          Professur für Anwendungssysteme und E-Business\n        </a>\n      </div>\n    </MDBFooter>\n  );\n}\n\nexport default Footer;\n","/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/axiosApi.js",[],"/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/Web3Client.js",[],"/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/auth.service.js",["345"],"class AuthServices {\n    logout() {\n        localStorage.removeItem(\"username\");\n        localStorage.removeItem(\"company\");\n        localStorage.removeItem(\"refresh_token\");\n        localStorage.removeItem(\"access_token\");\n    }\n}",["346","347"],"/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/components/Documents/DocumentCard.jsx",["348","349","350","351","352","353","354","355","356","357","358","359","360","361"],"import { React, useState, useEffect } from \"react\";\nimport {\n  MDBCard,\n  MDBCardBody,\n  MDBCardTitle,\n  MDBCardText,\n  MDBCardFooter,\n  MDBBtn,\n  MDBRow,\n  MDBCol,\n  MDBIcon,\n} from \"mdb-react-ui-kit\";\nimport useAxiosPrivate from \"../../hooks/useAxiosPrivate\";\nimport CardModal from \"./CardModal\";\n//Hook für Contextabruf\nimport useAuth from \"../../hooks/useAuth\";\nimport { Link } from \"react-router-dom\";\nimport { getDokumentenHash } from \"../../Web3Client\";\nimport Backdrop from \"@mui/material/Backdrop\";\nimport CircularProgress from \"@mui/material/CircularProgress\";\n\nfunction DocumentCard(props) {\n  const axiosInstance = useAxiosPrivate();\n  //Context mit Nutzerdaten abrufen\n  const { auth } = useAuth();\n  const [datei, setDatei] = useState([]);\n  const [fileLink, setFileLink] = useState(\"\");\n  const [ShowConfirmation, setShowConfirmation] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n\n  const [isVerified, setIsVerified] = useState(\"ausstehend\");\n\n  const author_company = props.author_company;\n\n  useEffect(() => {\n    //Abruf des Link zur Datei\n\n    if (props.file != null)\n      axiosInstance.get(\"file/\" + props.file).then((res) => {\n        setDatei(res.data);\n        setFileLink(res.data.file);\n      }, []);\n  }, [ShowConfirmation]);\n\n  async function getFileFromUrl(url, defaultType = \"image/jpeg\") {\n    const response = await fetch(url);\n    const data = await response.blob();\n    var name = name;\n    return new File([data], name, {\n      type: data.type || defaultType,\n    });\n  }\n\n  async function verifyDocument(id) {\n    // Backdrop Ladeanimation öffnen\n    handleToggleBackdrop();\n    const file = await getFileFromUrl(fileLink);\n    proofFilehash(id, file, function (hashwert) {\n      getDokumentenHash(props.blockchain_did) //Blockchain Transaktion\n        .then((tx) => {\n          if (hashwert == tx) {\n            setIsVerified(\"Hash korrekt\");\n\n            // Backdrop Ladeanimation schließen\n            handleCloseBackdrop();\n            return true;\n          } else {\n            setIsVerified(\"Hash inkorrekt\");\n\n            // Backdrop Ladeanimation schließen\n            handleCloseBackdrop();\n            return false;\n          }\n        })\n        .catch((err) => {\n          console.log(\"Fehlgeschlagen. Fehlermeldung: \" + err);\n\n          // Backdrop Ladeanimation schließen\n          handleCloseBackdrop();\n        });\n    });\n  }\n\n  async function proofFilehash(_DokumentID, _file, callback) {\n    //Download der Datei\n    var crypto = require(\"crypto\");\n    var hashwert = \"\";\n    const fileReader = new FileReader();\n    fileReader.readAsText(_file);\n    fileReader.onload = function (e) {\n      hashwert = crypto\n        .createHash(\"sha512\")\n        .update(e.target.result)\n        .digest(\"hex\");\n      callback(hashwert);\n    };\n  }\n\n  // State für \"Dokument anzeigen\" Modal\n  const [showDocumentModal, setShowDocumentModal] = useState(false);\n  // Funktion für Manipulation von Modal (als props weitergereicht)\n  function toggleShowDocumentModal() {\n    setShowDocumentModal(!showDocumentModal);\n  }\n\n  // -- Loading Backdrop --\n  const [openBackdrop, setOpenBackdrop] = useState(false);\n  const handleCloseBackdrop = () => {\n    setOpenBackdrop(false);\n  };\n  const handleToggleBackdrop = () => {\n    setOpenBackdrop(!openBackdrop);\n  };\n\n  return (\n    <>\n      <MDBCard className=\"h-100\" style={{ minHeight: \"250px\", width: \"510px\" }}>\n        <MDBCardBody>\n          <MDBRow>\n            <MDBCol sm=\"2\" className=\"d-flex justify-content-center\">\n              {props.type == \"Rechnung\" ? (\n                <MDBIcon\n                  className=\"mt-2\"\n                  fas\n                  size=\"4x\"\n                  icon=\"file-invoice-dollar\"\n                />\n              ) : (\n                <MDBIcon className=\"mt-2\" fas size=\"4x\" icon=\"file-alt\" />\n              )}\n            </MDBCol>\n            <MDBCol sm=\"8\">\n              <MDBCardTitle>\n                {props.type + \" \" + \"(\" + props.documentDate + \")\"}\n              </MDBCardTitle>\n\n              <MDBCardText className=\"mt-2 me-5\">\n                <b>Beschreibung: </b>\n                <br />\n                {props.description == \"\" ? (\n                  <i>Es liegt keine Beschreibung vor.</i>\n                ) : (\n                  props.description\n                )}\n                <br />\n                {(props?.isZoll && props.type !== \"Rechnung\") ||\n                props.type == \"Zollbescheid\" ? (\n                  <>\n                    <b>Verifikation: </b>\n                    {isVerified}\n                  </>\n                ) : null}\n              </MDBCardText>\n            </MDBCol>\n            <MDBCol sm=\"2\">\n              <Link\n                style={{ display: \"block\", margin: \"1rem 0\" }}\n                to={\"document/\" + props.id.toString()}\n                key={props.id}\n                params={{ title: \"Hello\" }}\n              >\n                <MDBBtn\n                  className=\"float-end\"\n                  outline\n                  onClick={toggleShowDocumentModal}\n                >\n                  Anzeigen\n                </MDBBtn>\n              </Link>\n              {(props?.isZoll && props.type !== \"Rechnung\") ||\n              props.type == \"Zollbescheid\" ? (\n                <MDBBtn\n                  className=\"float-end mt-3\"\n                  outline\n                  onClick={verifyDocument}\n                >\n                  Verifizieren\n                </MDBBtn>\n              ) : null}\n            </MDBCol>\n          </MDBRow>\n        </MDBCardBody>\n        <MDBCardFooter className=\"text-muted\">\n          Hochgeladen am: {props.uploadDate}\n          <br />\n          von {props.author_company} ({props.author})\n        </MDBCardFooter>\n      </MDBCard>\n      <CardModal\n        basicModal={showDocumentModal}\n        setBasicModal={setShowDocumentModal}\n        toggleShow={toggleShowDocumentModal}\n        title={props.title}\n        description={props.description}\n      />\n      <Backdrop\n        sx={{ color: \"#fff\", zIndex: (theme) => theme.zIndex.drawer + 1 }}\n        open={openBackdrop}\n        onClick={handleCloseBackdrop}\n      >\n        <CircularProgress color=\"inherit\" />\n      </Backdrop>\n    </>\n  );\n}\n\nexport default DocumentCard;\n","/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/components/Documents/DocumentTransaction.jsx",["362","363","364","365","366","367","368","369","370","371","372","373","374"],"import React, { useState, useEffect } from \"react\";\nimport {\n  MDBBtn,\n  MDBCard,\n  MDBCardBody,\n  MDBCardTitle,\n  MDBCardFooter,\n  MDBCardText,\n  MDBCol,\n  MDBContainer,\n  MDBRow,\n} from \"mdb-react-ui-kit\";\nimport { Link } from \"react-router-dom\";\nimport useAxiosPrivate from \"../../hooks/useAxiosPrivate\";\n\nimport MuiAlert from \"@mui/material/Alert\";\n\nfunction DocumentTransaction(props) {\n  const axiosInstance = useAxiosPrivate();\n\n  const [declarationData, setDeclarationData] = useState();\n\n  // State: Zollanmeldung vorhanden\n  const [declarationExists, setDeclarationExists] = useState(false);\n  // State: Status Zollanmeldung\n  const [confirmation, setConfirmation] = useState(\"ausstehend\");\n\n  // Zollanmeldungen abrufen\n  useEffect(() => {\n    axiosInstance.get(\"declaration/\").then((res) => {\n      setDeclarationData(res.data);\n      let declaration = res.data;\n      let anmeldungVorhanden = false;\n\n      if (declaration.length !== 0) {\n        for (let i in declaration) {\n          if (declaration[i].transaction == props.id) {\n            // Wenn Anmeldung Transaktion angehört setze auf true\n            setDeclarationExists(true);\n            // Status Zollanmeldung abfragen\n            setConfirmation(declaration[i].status_confirmation);\n          }\n        }\n      }\n    });\n  }, []);\n\n  return (\n    <div>\n      <MDBCard>\n        <MDBCardBody>\n          <MDBContainer>\n            <MDBRow>\n              <MDBCol>\n                <MDBCardTitle>\n                  {props.isImporteur ? \"Import: \" : \"Export: \"}\n                  {props.description}\n                </MDBCardTitle>\n              </MDBCol>\n            </MDBRow>\n\n            <br />\n          </MDBContainer>\n          <MDBContainer>\n            <MDBRow>\n              <MDBCol>\n                <MDBCardText>\n                  <b>\n                    Handelspartner{\" \"}\n                    {props.isImporteur ? \"(Exporteur)\" : \"(Importeur)\"}\n                  </b>\n                  <br />\n                  {props.name}\n                  <br />\n                  {props.street}\n                  <br />\n                  {props.cityCode} {props.city}, {props.countryCode}\n                </MDBCardText>\n              </MDBCol>\n              <MDBCol>\n                <MDBCardText>\n                  <b>Dokumente insgesamt: </b>\n                  {props.numberInvoiceDocuments + props.numberOtherDocuments}\n                  <br />\n                  <b>Rechnungsdokumente: </b>\n                  {props.numberInvoiceDocuments}\n                  <br />\n                  <b>Zollanmeldung: </b>\n                  {declarationExists ? \"liegt vor\" : \"ausstehend\"}\n                  <br />\n                  <b>Zollbescheid: </b>\n                  {confirmation}\n                </MDBCardText>\n              </MDBCol>\n            </MDBRow>\n            <br />\n            <MDBRow>\n              <MDBCol md=\"8\" lg=\"9\">\n                {props.numberInvoiceDocuments == 0 ? (\n                  <MuiAlert severity=\"info\" sx={{ my: 1 }}>\n                    Transaktion angelegt. Rechnung hochladen um Zollanmeldung\n                    durchführen zu können.\n                  </MuiAlert>\n                ) : props.numberInvoiceDocuments !== 0 &&\n                  declarationExists == false ? (\n                  <MuiAlert severity=\"warning\" sx={{ my: 1 }}>\n                    Rechnung liegt vor. Zollanmeldung ausführen.\n                  </MuiAlert>\n                ) : declarationExists == true &&\n                  confirmation == \"ausstehend\" ? (\n                  <MuiAlert severity=\"info\" sx={{ my: 1 }}>\n                    Zollanmeldung abgeschickt. Warte auf Zollbescheid.\n                  </MuiAlert>\n                ) : confirmation == \"bestätigt\" ? (\n                  <MuiAlert severity=\"success\" sx={{ my: 1 }}>\n                    Zollanmeldung angenommen.\n                  </MuiAlert>\n                ) : confirmation == \"abgelehnt\" ? (\n                  <MuiAlert severity=\"error\" sx={{ my: 1 }}>\n                    Zollanmeldung angenommen.\n                  </MuiAlert>\n                ) : null}\n              </MDBCol>\n              <MDBCol md=\"4\" lg=\"3\">\n                {props.isImporteur == true ? (\n                  <div className=\"float-end\">\n                    {declarationExists == true ||\n                    props.numberInvoiceDocuments == 0 ? (\n                      <MDBBtn\n                        style={{ display: \"block\", margin: \"1rem 0\" }}\n                        disabled\n                        className=\"\"\n                      >\n                        Zollanmeldung\n                      </MDBBtn>\n                    ) : (\n                      <Link\n                        style={{ display: \"block\", margin: \"1rem 0\" }}\n                        to={`declaration`}\n                        params={{ title: \"Hello\" }}\n                      >\n                        <MDBBtn className=\"\">Zollanmeldung</MDBBtn>\n                      </Link>\n                    )}\n                  </div>\n                ) : null}\n              </MDBCol>\n            </MDBRow>\n          </MDBContainer>\n          <MDBCardFooter>\n            <MDBRow>\n              <MDBCol md=\"4\">Hinzugefügt: {props.dateAdded}</MDBCol>\n              <MDBCol md=\"4\">\n                Zuletzt aktualisiert: {props.dateProcessed}\n              </MDBCol>\n            </MDBRow>\n          </MDBCardFooter>\n        </MDBCardBody>\n      </MDBCard>\n    </div>\n  );\n}\n\nexport default DocumentTransaction;\n","/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/components/Documents/InvoiceItemForm.jsx",[],["375","376"],"/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/components/Documents/DocumentsModal.jsx",[],"/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/components/Partners/Partner.jsx",[],"/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/components/Partners/PartnersModal.jsx",[],"/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/components/Documents/CardModal.jsx",[],"/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/components/Documents/InvoiceForm.jsx",["377","378","379","380","381","382","383","384"],"import React, { useState, useEffect, isValidElement } from \"react\";\nimport {\n  MDBContainer,\n  MDBRow,\n  MDBCol,\n  MDBInput,\n  MDBBtn,\n  MDBBadge,\n  MDBIcon,\n} from \"mdb-react-ui-kit\";\nimport { init, createRechnung, createZollanmeldung } from \"../../Web3Client\";\nimport { useParams } from \"react-router-dom\";\nimport {} from \"json2csv\";\nimport LZString from \"lz-string\";\nimport useAxiosPrivate from \"../../hooks/useAxiosPrivate\";\nimport Backdrop from \"@mui/material/Backdrop\";\nimport CircularProgress from \"@mui/material/CircularProgress\";\n\nvar crypto = require(\"crypto\");\nvar blockchaintx = \"\";\nfunction InvoiceForm(props) {\n  const axiosInstance = useAxiosPrivate();\n\n  const [invoiceFields, setInvoiceFields] = useState({\n    type: \"Rechnung\",\n    description: \"\",\n    blockchainID: blockchaintx,\n    issue_date: \"\",\n    invoice_text: \"\",\n    currency: \"\",\n    transaction: \"\",\n    invoiceItem: [],\n    priceTotal: \"\",\n    transport_costs: \"\",\n  });\n\n  const [invoiceItemFields, setInvoiceItemFields] = useState([\n    {\n      product: \"\",\n      amount: \"\",\n      unit: \"\",\n      price: \"\",\n    },\n  ]);\n  const { transactionId } = useParams();\n\n  // -- Loading Backdrop --\n  const [openBackdrop, setOpenBackdrop] = React.useState(false);\n  const handleCloseBackdrop = () => {\n    setOpenBackdrop(false);\n  };\n  const handleToggleBackdrop = () => {\n    setOpenBackdrop(!openBackdrop);\n  };\n\n  // Eingabe handlen\n  function handleItemChange(index, event) {\n    const values = [...invoiceItemFields];\n    values[index][event.target.name] = event.target.value;\n    setInvoiceItemFields(values);\n\n    invoiceFields.invoiceItem = invoiceItemFields;\n\n    setInvoiceFields({ ...invoiceFields, transaction: transactionId });\n  }\n\n  // Abschicken\n  async function handleSubmit(e) {\n    // Check Formular Validierung\n    var forms = document.getElementById(\"invoiceForm\");\n    if (forms.checkValidity() == false) {\n      console.log(\"Formular Eingabe inkorrekt.\");\n      return;\n    }\n\n    handleToggleBackdrop();\n    var crypto = require(\"crypto\");\n    let total = calculatePriceTotal();\n\n    //Blockchain Transaktion\n    createRechnung(\n      total.toString(),\n      props.transactionData?.partnership.partner.publickey,\n      invoiceFields.currency,\n      invoiceFields.issue_date,\n      crypto.createHash(\"sha512\").update(invoiceItemFields).digest(\"hex\"),\n      invoiceFields.transport_costs\n    )\n      .then((tx) => {\n        console.log(\"Transaktion erfolgreich: \" + tx);\n        blockchaintx = tx;\n        //Übermittel und anlegen der Rechnung\n        axiosInstance\n          .post(\"/invoice/\", {\n            blockchain_id: tx - 1, //Blockchain RechnungsID wird gespeichert\n            currency: invoiceFields.currency,\n            description: invoiceFields.description,\n            invoiceItem: invoiceFields.invoiceItem,\n            invoice_text: invoiceFields.invoice_text,\n            issue_date: invoiceFields.issue_date,\n            priceTotal: invoiceFields.priceTotal,\n            transaction: invoiceFields.transaction,\n            transport_costs: invoiceFields.transport_costs,\n            type: invoiceFields.type,\n          })\n          .then((res) => {\n            console.log(\"Rechnung erfolgreich hochgeladen.\");\n            props.setNewDocument(!props.newDocument);\n            props.setSnackbarSuccess(true);\n            props.setSnackbarMessage(\"Rechnung erfolgreich hochgeladen.\");\n            handleCloseBackdrop();\n            props.handleOpenSnackbar();\n            props.setNewDocument(!props.newDocument);\n            props.toggleAddDocumentModal();\n          })\n          .catch((error) => {\n            console.error(\"There was an error!\", error);\n            props.setSnackbarSuccess(false);\n            props.setSnackbarMessage(\"Fehler beim hochladen der Rechnung.\");\n            handleCloseBackdrop();\n            props.handleOpenSnackbar();\n            props.toggleAddDocumentModal();\n          });\n      })\n      .catch((err) => {\n        console.log(\"Transaktion fehlgeschlagen: \" + \"  \" + err);\n        props.setSnackbarSuccess(false);\n        props.setSnackbarMessage(\"Fehler bei der Verarbeitung der Rechnung.\");\n        handleCloseBackdrop();\n        props.handleOpenSnackbar();\n        props.toggleAddDocumentModal();\n      });\n  }\n\n  // Rechnungsposten hinzufügen\n  function handleAddFields(event) {\n    event.preventDefault();\n    setInvoiceItemFields([\n      ...invoiceItemFields,\n      {\n        product: \"\",\n        amount: \"\",\n        unit: \"\",\n        price: \"\",\n      },\n    ]);\n  }\n\n  // Rechnungsposten entfernen\n  function handleRemoveFields(event, index) {\n    event.preventDefault();\n    const values = [...invoiceItemFields];\n\n    // ALT:\n    // values.splice(\n    //   values.findIndex((value) => value.index === index),\n    //   1\n    // );\n\n    values.pop();\n    setInvoiceItemFields(values);\n  }\n\n  function calculatePriceTotal() {\n    const items = invoiceItemFields;\n    let total = 0;\n\n    for (let i = 0; i < items.length; i++) {\n      total += items[i].amount * items[i].price;\n    }\n    setInvoiceFields({ ...items, priceTotal: total });\n\n    return total;\n  }\n\n  return (\n    <>\n      <MDBContainer>\n        <form id=\"invoiceForm\" onSubmit={(e) => e.preventDefault()}>\n          <MDBRow>\n            <MDBCol>\n              <MDBInput\n                className=\"mb-4\"\n                name=\"issue_date\"\n                id=\"issue_date\"\n                label=\"Rechnungsdatum\"\n                type=\"date\"\n                required\n                onChange={(e) =>\n                  setInvoiceFields({\n                    ...invoiceFields,\n                    issue_date: e.target.value,\n                  })\n                }\n              />\n            </MDBCol>\n            <MDBCol>\n              <MDBInput\n                className=\"mb-4\"\n                name=\"currency\"\n                value={invoiceFields.currency}\n                id=\"currency\"\n                label=\"Währung\"\n                type=\"text\"\n                required\n                onChange={(e) =>\n                  setInvoiceFields({\n                    ...invoiceFields,\n                    currency: e.target.value,\n                  })\n                }\n              />\n            </MDBCol>\n            <MDBCol>\n              <MDBInput\n                className=\"mb-4\"\n                name=\"transport_costs\"\n                id=\"transport_costs\"\n                label=\"Lieferkosten\"\n                type=\"number\"\n                required\n                onChange={(e) =>\n                  setInvoiceFields({\n                    ...invoiceFields,\n                    transport_costs: e.target.value,\n                  })\n                }\n              />\n            </MDBCol>\n          </MDBRow>\n          <MDBInput\n            wrapperClass=\"mb-4\"\n            textarea\n            name=\"description\"\n            id=\"description\"\n            rows={3}\n            label=\"Beschreibung\"\n            required\n            onChange={(e) =>\n              setInvoiceFields({\n                ...invoiceFields,\n                description: e.target.value,\n              })\n            }\n          />\n          <hr />\n\n          {invoiceItemFields.map((inputField, index) => (\n            <div key={index}>\n              <h6>Rechnungsposten {index + 1}</h6>\n              <MDBInput\n                className=\"mb-4\"\n                name=\"product\"\n                label=\"Produktname\"\n                type=\"text\"\n                value={inputField.product}\n                required\n                onChange={(event) => handleItemChange(index, event)}\n              />\n              <MDBRow>\n                <MDBCol>\n                  <MDBInput\n                    className=\"mb-4\"\n                    name=\"amount\"\n                    label=\"Anzahl\"\n                    type=\"number\"\n                    value={inputField.amount}\n                    required\n                    onChange={(event) => handleItemChange(index, event)}\n                  />\n                </MDBCol>\n                <MDBCol>\n                  <MDBInput\n                    className=\"mb-4\"\n                    name=\"unit\"\n                    label=\"Einheit\"\n                    type=\"text\"\n                    value={inputField.unit}\n                    required\n                    onChange={(event) => handleItemChange(index, event)}\n                  />\n                </MDBCol>\n                <MDBCol>\n                  <MDBInput\n                    className=\"mb-4\"\n                    name=\"price\"\n                    label=\"Preis pro Enheit\"\n                    type=\"number\"\n                    value={inputField.price}\n                    required\n                    onChange={(event) => handleItemChange(index, event)}\n                  />\n                </MDBCol>\n                <MDBCol>\n                  <MDBBadge className=\"mt-2 me-4 float-end\" color=\"primary\">\n                    Betrag : {inputField.amount * inputField.price}{\" \"}\n                    {invoiceFields.invoiceCurrency}\n                  </MDBBadge>\n                </MDBCol>\n              </MDBRow>\n            </div>\n          ))}\n          <br />\n\n          <MDBBtn\n            className=\"me-3 mb-3\"\n            color=\"success\"\n            onClick={handleAddFields}\n          >\n            <MDBIcon size=\"lg\" className=\"me-2\" fas icon=\"plus\" />\n            Rechnungsposten hinzufügen\n          </MDBBtn>\n          {invoiceItemFields.length > 1 && (\n            <MDBBtn\n              className=\"me-3 mb-3\"\n              color=\"danger\"\n              onClick={handleRemoveFields}\n            >\n              <MDBIcon size=\"lg\" className=\"me-2\" fas icon=\"minus\" />\n              Rechnungsposten entfernen\n            </MDBBtn>\n          )}\n\n          <MDBBtn\n            type=\"submit\"\n            className=\"float-end\"\n            color=\"primary\"\n            onClick={handleSubmit}\n          >\n            <MDBIcon size=\"lg\" className=\"me-2\" fas icon=\"paper-plane\" />\n            Abschicken\n          </MDBBtn>\n        </form>\n      </MDBContainer>\n\n      {/* Loading Backdrop bei Meta Mask Dialog*/}\n      <Backdrop\n        sx={{ color: \"#fff\", zIndex: (theme) => theme.zIndex.drawer + 1 }}\n        open={openBackdrop}\n        onClick={handleCloseBackdrop}\n      >\n        <CircularProgress color=\"inherit\" />\n      </Backdrop>\n    </>\n  );\n}\n\nexport default InvoiceForm;\n","/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/components/Documents/OtherDocumentsForm.jsx",["385","386","387","388","389","390","391","392","393","394","395","396","397","398","399","400","401","402","403","404","405"],"import React, { useEffect, useState } from \"react\";\nimport { uploadDokumentHash, getDokumentenhash } from \"../../Web3Client\";\nimport Box from \"@mui/material/Box\";\nimport Stepper from \"@mui/material/Stepper\";\nimport Step from \"@mui/material/Step\";\nimport StepLabel from \"@mui/material/StepLabel\";\nimport Button from \"@mui/material/Button\";\nimport Typography from \"@mui/material/Typography\";\nimport Alert from \"@mui/material/Alert\";\nimport Backdrop from \"@mui/material/Backdrop\";\nimport CircularProgress from \"@mui/material/CircularProgress\";\n\nimport { MDBInput, MDBFile, MDBBtn, MDBContainer } from \"mdb-react-ui-kit\";\nimport { MDBSpinner } from \"mdb-react-ui-kit\";\nimport useAxiosPrivate from \"../../hooks/useAxiosPrivate\";\nimport { useParams } from \"react-router-dom\";\nimport useAuth from \"../../hooks/useAuth\";\n\nconst steps = [\"Dokument beschreiben\", \"Dokument hochladen\", \"Bestätigen\"];\n\nfunction OtherDocumentsForm(props) {\n  const axiosInstance = useAxiosPrivate();\n\n  const [type, setType] = React.useState(\"\");\n  const [description, setDescription] = React.useState(\"\");\n\n  const [issueDate, setIssueDate] = React.useState(\"\");\n  const [fileID, setFileID] = React.useState();\n\n  const [fileLink, setFileLink] = React.useState(\"\");\n\n  const [activeStep, setActiveStep] = React.useState(0);\n  const [skipped, setSkipped] = React.useState(new Set());\n\n  const [selectedFile, setSelectedFile] = React.useState();\n  const [uploadLoading, setUploadLoading] = React.useState(false);\n  const [fileUploadSuccess, setFileUploadSuccess] = React.useState(false);\n  const { transactionId } = useParams();\n  const [newDocumentData, setNewDocumentData] = useState();\n  const { auth } = useAuth();\n\n  var newDocumentID;\n\n  const docformData = new FormData();\n\n  // -- Loading Backdrop --\n  const [openBackdrop, setOpenBackdrop] = React.useState(false);\n  const handleCloseBackdrop = () => {\n    setOpenBackdrop(false);\n  };\n  const handleToggleBackdrop = () => {\n    setOpenBackdrop(!openBackdrop);\n  };\n\n  // Funktion für Datei Upload\n  function handleUpload(e) {\n    e.preventDefault();\n    setUploadLoading(true);\n    const fileformData = new FormData();\n    fileformData.append(\"file\", selectedFile);\n\n    axiosInstance\n      .post(\"/file/\", fileformData)\n      .then((res) => {\n        setFileID(res.data.id);\n\n        setFileLink(res.data.file);\n        setFileUploadSuccess(true);\n        setUploadLoading(false);\n      })\n      .catch((err) => console.log(err.response));\n  }\n  async function uDokumentHash(_transaktionID, _file) {\n    var crypto = require(\"crypto\");\n    const fileReader = new FileReader();\n    var hashwert = \"\";\n    fileReader.readAsText(_file);\n    fileReader.onload = function (evt) {\n      hashwert = crypto\n        .createHash(\"sha512\")\n        .update(evt.target.result)\n        .digest(\"hex\");\n\n      uploadDokumentHash(_transaktionID, hashwert) //Blockchain Transaktion\n        .then((tx) => {\n          docformData.append(\"blockchain_id\", tx - 1);\n          uploadToDatabase(docformData);\n          return tx;\n        })\n        .catch((err) => {\n          console.log(\"Hashgenerierung fehlgeschlagen. Fehlermeldung: \" + err);\n          // Error-Snackbar setzen\n          props.setSnackbarSuccess(false);\n          props.setSnackbarMessage(\n            \"Fehler bei der Verarbeitung des Dokuments.\"\n          );\n          // Backdrop Ladeanimation schließen\n          handleCloseBackdrop();\n          // Snackbar öffnen\n          props.handleOpenSnackbar();\n          // Modal schließen\n          props.toggleAddDocumentModal();\n        });\n    };\n  }\n\n  // DB Upload\n  async function uploadToDatabase(docformData) {\n    await axiosInstance\n      .post(\"/documents/\", docformData)\n      .then((res) => {\n        setNewDocumentData(res.data);\n        newDocumentID = res.data.id;\n        console.log(\"Dokument erfolgreich hochgeladen.\");\n        // newDocument -> State aktualisieren\n        props.setNewDocument(!props.newDocument);\n        // Erfolgs-Snackbar setzen\n        props.setSnackbarSuccess(true);\n        props.setSnackbarMessage(\"Dokument erfolgreich hochgeladen.\");\n        // Backdrop Ladeanimation öffnen\n        handleToggleBackdrop();\n        // Snackbar öffnen\n        props.handleOpenSnackbar();\n        // Modal schließen\n        props.toggleAddDocumentModal();\n      })\n      .catch((err) => {\n        console.log(err.response);\n        // Error-Snackbar setzen\n        props.setSnackbarSuccess(false);\n        props.setSnackbarMessage(\"Fehler beim hochladen des Dokuments.\");\n        // Backdrop Ladeanimation öffnen\n        handleToggleBackdrop();\n        // Snackbar öffnen\n        props.handleOpenSnackbar();\n        // Modal schließen\n        props.toggleAddDocumentModal();\n      });\n  }\n\n  // Funktion zum Abschicken des Formulars\n  async function handleSubmit(e) {\n    //Standardverhalten abstellen\n    e.preventDefault();\n    // Backdrop Ladeanimation öffnen\n    handleToggleBackdrop();\n    docformData.append(\"description\", description);\n    docformData.append(\"type\", type);\n    docformData.append(\"file\", fileID);\n    docformData.append(\"issue_date\", \"2022-03-15\");\n    if (transactionId == undefined) {\n      console.log(\"Zollmodus mit Transaction ID: \" + props.transactionID_zoll);\n      docformData.append(\"transaction\", props.transactionID_zoll);\n      const tx = await uDokumentHash(props.transactionID_zoll, selectedFile);\n    } else {\n      docformData.append(\"transaction\", transactionId);\n      const tx = await uDokumentHash(transactionId, selectedFile);\n    }\n  }\n\n  // Alle Funktionen unterhalb: Steuerung des Steppers\n\n  // Kein Step ist optional\n  const isStepOptional = (step) => {\n    return;\n  };\n\n  const isStepSkipped = (step) => {\n    return skipped.has(step);\n  };\n\n  const handleNext = () => {\n    let newSkipped = skipped;\n    if (isStepSkipped(activeStep)) {\n      newSkipped = new Set(newSkipped.values());\n      newSkipped.delete(activeStep);\n    }\n\n    if (activeStep === 0) {\n      var forms = document.getElementById(\"documentForm\");\n\n      if (forms.checkValidity() == false) {\n        console.log(\"Formular Eingabe inkorrekt.\");\n        return;\n      }\n    }\n\n    setActiveStep((prevActiveStep) => prevActiveStep + 1);\n    setSkipped(newSkipped);\n  };\n\n  const handleBack = () => {\n    setActiveStep((prevActiveStep) => prevActiveStep - 1);\n  };\n\n  const handleSkip = () => {\n    if (!isStepOptional(activeStep)) {\n      // You probably want to guard against something like this,\n      // it should never occur unless someone's actively trying to break something.\n      throw new Error(\"You can't skip a step that isn't optional.\");\n    }\n\n    setActiveStep((prevActiveStep) => prevActiveStep + 1);\n    setSkipped((prevSkipped) => {\n      const newSkipped = new Set(prevSkipped.values());\n      newSkipped.add(activeStep);\n      return newSkipped;\n    });\n  };\n\n  const handleReset = () => {\n    setActiveStep(0);\n  };\n\n  // Wenn Nutzer = Zoll Dokumententyp: \"Zollbescheid\"\n  useEffect(() => {\n    if (props?.isZoll == true) {\n      setType(\"Zollbescheid\");\n    }\n  }, []);\n\n  return (\n    <>\n      <Box sx={{ width: \"100%\" }}>\n        <Stepper activeStep={activeStep}>\n          {steps.map((label, index) => {\n            const stepProps = {};\n            const labelProps = {};\n            if (isStepOptional(index)) {\n              labelProps.optional = (\n                <Typography variant=\"caption\">Optional</Typography>\n              );\n            }\n            if (isStepSkipped(index)) {\n              stepProps.completed = false;\n            }\n            return (\n              <Step key={label} {...stepProps}>\n                <StepLabel {...labelProps}>{label}</StepLabel>\n              </Step>\n            );\n          })}\n        </Stepper>\n        <MDBContainer className=\"mt-4\">\n          {activeStep === steps.length ? (\n            <React.Fragment>\n              <Typography sx={{ mt: 2, mb: 1 }}>\n                All steps completed - you&apos;re finished\n              </Typography>\n              <Box sx={{ display: \"flex\", flexDirection: \"row\", pt: 2 }}>\n                <Box sx={{ flex: \"1 1 auto\" }} />\n                <Button onClick={handleReset}>Zurücksetzen</Button>\n              </Box>\n            </React.Fragment>\n          ) : (\n            <React.Fragment>\n              {activeStep === 0 ? (\n                <>\n                  <form id=\"documentForm\" onSubmit={(e) => e.preventDefault()}>\n                    {props?.isZoll == true ? (\n                      <MDBInput\n                        className=\"my-4\"\n                        value={\"Zollbescheid\"}\n                        name=\"type\"\n                        id=\"documentType\"\n                        label=\"Dokumententyp\"\n                        disabled\n                        onChange={(e) => setType(e.target.value)}\n                        type=\"text\"\n                      />\n                    ) : (\n                      <MDBInput\n                        className=\"my-4\"\n                        value={type}\n                        name=\"type\"\n                        id=\"documentType\"\n                        label=\"Dokumententyp\"\n                        required\n                        onChange={(e) => setType(e.target.value)}\n                        type=\"text\"\n                      />\n                    )}\n\n                    <MDBInput\n                      wrapperClass=\"mb-4\"\n                      value={description}\n                      textarea\n                      name=\"description\"\n                      id=\"documentDescription\"\n                      rows={3}\n                      onChange={(e) => setDescription(e.target.value)}\n                      label=\"Beschreibung (optional)\"\n                    />\n                  </form>\n                  {type.toUpperCase() == \"RECHNUNG\" && (\n                    <p className=\"errmsg alert alert-danger\">\n                      Bezeichnung \"Rechnung\" nicht zulässig. Rechnungsformular\n                      verwenden.\n                    </p>\n                  )}\n                </>\n              ) : activeStep === 1 ? (\n                <>\n                  <form onSubmit={handleUpload}>\n                    <MDBFile\n                      className=\"my-4\"\n                      label=\"PDF-Dokument auswählen\"\n                      id=\"customFile\"\n                      onChange={(e) => setSelectedFile(e.target.files[0])}\n                    />\n                    {selectedFile === undefined || selectedFile == \"\" ? (\n                      <MDBBtn disabled type=\"submit\" block>\n                        Hochladen\n                      </MDBBtn>\n                    ) : uploadLoading == false ? (\n                      <MDBBtn type=\"submit\" block>\n                        Hochladen\n                      </MDBBtn>\n                    ) : (\n                      <MDBBtn type=\"submit\" block disabled>\n                        <MDBSpinner\n                          size=\"sm\"\n                          role=\"status\"\n                          tag=\"span\"\n                          className=\"me-2\"\n                        />\n                        Hochladen...\n                      </MDBBtn>\n                    )}\n                  </form>\n                  {fileUploadSuccess && (\n                    <Alert severity=\"success\" className=\"mt-4\">\n                      Dokument wurde verarbeitet. Weiter um Upload\n                      abzuschließen.\n                    </Alert>\n                  )}\n                </>\n              ) : (\n                <>\n                  <h5 className=\"mt-4\">Daten bestätigen:</h5>\n                  <p>\n                    <b>Hochgeladene Dokumentenart: </b>\n                    <br />\n                    {type}\n                  </p>\n                  <p>\n                    <b>Beschreibung: </b>\n                    <br />\n                    {description == \"\" ? (\n                      <i>Keine Beschreibung.</i>\n                    ) : (\n                      description\n                    )}\n                  </p>\n\n                  <p>\n                    <a\n                      href={fileLink}\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      Link zur Datei\n                    </a>\n                  </p>\n                </>\n              )}\n              <Box sx={{ display: \"flex\", flexDirection: \"row\", pt: 2 }}>\n                <Button\n                  color=\"inherit\"\n                  disabled={activeStep === 0}\n                  onClick={handleBack}\n                  sx={{ mr: 1 }}\n                >\n                  Zurück\n                </Button>\n                <Box sx={{ flex: \"1 1 auto\" }} />\n                {isStepOptional(activeStep) && (\n                  <Button color=\"inherit\" onClick={handleSkip} sx={{ mr: 1 }}>\n                    Überspringen\n                  </Button>\n                )}\n\n                {activeStep === steps.length - 1 ? (\n                  <Button onClick={handleSubmit}>Abschicken</Button>\n                ) : activeStep == 1 && fileUploadSuccess == false ? (\n                  <Button disabled onClick={handleNext}>\n                    Weiter\n                  </Button>\n                ) : activeStep == 1 && fileUploadSuccess == true ? (\n                  <Button onClick={handleNext}>Weiter</Button>\n                ) : (\n                  <Button\n                    type=\"submit\"\n                    form=\"documentForm\"\n                    onClick={handleNext}\n                  >\n                    Weiter\n                  </Button>\n                )}\n              </Box>\n            </React.Fragment>\n          )}\n        </MDBContainer>\n      </Box>\n\n      <Backdrop\n        sx={{ color: \"#fff\", zIndex: (theme) => theme.zIndex.drawer + 1 }}\n        open={openBackdrop}\n        onClick={handleCloseBackdrop}\n      >\n        <CircularProgress color=\"inherit\" />\n      </Backdrop>\n    </>\n  );\n}\n\nexport default OtherDocumentsForm;\n","/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/components/Partners/PartnerForm.jsx",["406","407","408","409","410","411","412","413","414","415","416"],"import React, { useState, useEffect } from \"react\";\nimport { MDBContainer, MDBInput, MDBBtn, MDBIcon } from \"mdb-react-ui-kit\";\nimport useAxiosPrivate from \"../../hooks/useAxiosPrivate\";\nimport useAuth from \"../../hooks/useAuth\";\n\nfunction PartnerForm(props) {\n  const [eori_nr, setEoriNr] = useState(\"\");\n  const [companies, setCompanies] = useState([]);\n  const [requestedCompany, setrequestedCompany] = useState(\"\");\n  const axiosPrivate = useAxiosPrivate();\n  const [testRerender, setTestRerender] = useState(false);\n  const [notFound, setNotFound] = useState(false);\n  const [isCurrentPartnership, setIsCurrentPartnership] = useState(false);\n  const [partnerships, setPartnerships] = useState();\n  const { auth } = useAuth();\n  //useffect Abfragen der Firmemliste\n\n  // DB Call\n  useEffect(() => {\n    axiosPrivate.get(\"partnership/\").then((res) => {\n      setPartnerships(res.data);\n    });\n  }, [testRerender]);\n\n  // EORI Suche\n  async function handleEORISearch() {\n    var forms = document.getElementById(\"partnerForm\");\n\n    if (forms.checkValidity() == false) {\n      //console.log(\"Formular Eingabe inkorrekt.\");\n      return;\n    }\n\n    //Leeren wenn neu gesucht wird\n    setCompanies();\n    setNotFound(false);\n    setIsCurrentPartnership(false);\n\n    await axiosPrivate\n      .get(`companies/${eori_nr}/`)\n      .then((res) => {\n        setCompanies(res.data);\n\n        if (\n          partnerships.some(\n            (partnerships) => partnerships.partner.eori_nr == res.data.eori_nr\n          ) ||\n          auth.eori_nr == res.data.eori_nr\n        ) {\n          setIsCurrentPartnership(true);\n        }\n      })\n      .catch((err) => {\n        console.log(err);\n        setNotFound(true);\n      });\n  }\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    //firma hinzufügen\n    console.log(\"Added Partner: \" + companies.eori_nr);\n    axiosPrivate\n      .post(\"/partnership/\", { added_partner: companies.eori_nr })\n      .then(\n        // setTestRerender(true),\n        // Reload Partern State\n        props.setNewPartner(!props.newPartner),\n        // Snackbar Alert\n        props.setSnackbarSuccess(true),\n        props.setSnackbarMessage(\"Partneranfrage gesendet.\"),\n        props.handleOpenSnackbar(),\n        // Modal schließen\n        props.toggleShow()\n      )\n      .catch((error) => {\n        console.error(\"There was an error!\", error);\n        // Snackbar definieren\n        props.setSnackbarSuccess(false);\n        props.setSnackbarMessage(\"Fehler beim Anfragen der Handelsbeziehung.\");\n        props.handleOpenSnackbar();\n        // Modal schließen\n        props.toggleShow();\n      });\n\n    //firma als partner hinterlegen\n  }\n\n  return (\n    <>\n      <MDBContainer>\n        <form id=\"partnerForm\" onSubmit={(e) => e.preventDefault()}>\n          <MDBInput\n            className=\"my-3\"\n            name=\"eori_nr\"\n            label=\"EORI-Nr.\"\n            type=\"number\"\n            required\n            onChange={(e) => setEoriNr(e.target.value)}\n          />\n          {eori_nr == \"\" ? (\n            <MDBBtn\n              block\n              className=\"mb-4\"\n              type=\"search\"\n              color=\"primary\"\n              disabled\n              onClick={(e) => handleEORISearch()}\n            >\n              <MDBIcon size=\"lg\" className=\"me-2\" fas icon=\"search\" />\n              Unternehmen suchen\n            </MDBBtn>\n          ) : (\n            <MDBBtn\n              block\n              className=\"mb-4\"\n              color=\"primary\"\n              type=\"submit\"\n              onClick={(e) => handleEORISearch()}\n            >\n              <MDBIcon size=\"lg\" className=\"me-2\" fas icon=\"search\" />\n              Unternehmen suchen\n            </MDBBtn>\n          )}\n        </form>\n        {notFound && <p> EORI-NR nicht gefunden, bitte erneut probieren</p>}\n        {companies?.name != undefined && (\n          <p>\n            {\" \"}\n            Treffer: <br />\n            <b>\n              {companies?.name} <br />\n              {companies?.street} <br />\n              {companies?.city_code} {companies?.city} <br />\n              {companies?.country_code}\n            </b>\n          </p>\n        )}\n        {isCurrentPartnership && (\n          <p>\n            {\" \"}\n            Eine Partnerschaft existiert mit diesem Unternehmen bereits oder es\n            ist ihr eigenes Unternehmen.\n          </p>\n        )}\n\n        {companies?.name != undefined && isCurrentPartnership == false ? (\n          <MDBBtn\n            block\n            className=\"mt-3\"\n            type=\"submit\"\n            onClick={(e) => handleSubmit(e)}\n            color=\"success\"\n          >\n            Anfrage stellen\n          </MDBBtn>\n        ) : null}\n      </MDBContainer>\n    </>\n  );\n}\n\nexport default PartnerForm;\n","/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/components/Documents/PDFViewer.jsx",[],["417","418"],"/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/components/Transactions/TransactionModal.jsx",[],"/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/components/Transactions/Transaction.jsx",["419","420","421","422","423","424","425","426","427","428","429","430","431","432","433"],"import React, { Component, useEffect, useState } from \"react\";\nimport {\n  MDBBtn,\n  MDBCard,\n  MDBCardBody,\n  MDBCardTitle,\n  MDBCardSubTitle,\n  MDBCardText,\n  MDBCol,\n  MDBContainer,\n  MDBRow,\n  MDBIcon,\n  MDBCardFooter,\n  MDBDropdown,\n  MDBDropdownToggle,\n  MDBDropdownMenu,\n  MDBDropdownItem,\n  MDBDropdownLink,\n  MDBModal,\n  MDBModalDialog,\n  MDBModalContent,\n  MDBModalHeader,\n  MDBModalTitle,\n  MDBModalBody,\n  MDBModalFooter,\n  MDBInput,\n  MDBDropdownHeader,\n} from \"mdb-react-ui-kit\";\nimport Inbound from \"../../icons/inbound.png\";\nimport Outbound from \"../../icons/outbound.png\";\n\nimport { Link } from \"react-router-dom\";\nimport useAuth from \"../../hooks/useAuth\";\nimport useAxiosPrivate from \"../../hooks/useAxiosPrivate\";\n\nimport MuiAlert from \"@mui/material/Alert\";\n\nfunction Transaction(props) {\n  const { auth } = useAuth();\n\n  // State: Importeur oder Exporteur\n  const [isImporteur, setIsImporteur] = useState(false);\n\n  // State: Anzahl Dokumente\n  const [numberDocuments, setNumberDocuments] = useState(0);\n\n  // State: Anzahl Rechnungen\n  const [numberInvoices, setNumberInvoices] = useState(0);\n\n  const axiosInstance = useAxiosPrivate();\n\n  // Funktion überprüft ob Importeur oder Exporteur\n  useEffect(() => {\n    if (auth.eori_nr == props.importeur) {\n      setIsImporteur(true);\n    }\n  });\n\n  // Abgleich Anzahl Dokumente für Transaktion\n  useEffect(() => {\n    let documents = props.documentsData;\n    let anzahlDokumente = 0;\n    let anzahlRechnungen = 0;\n    if (documents.length !== 0) {\n      for (let i in documents) {\n        if (documents[i].transaction == props.id) {\n          // Wenn Dokument Transaktion angehört summiere Dokumente\n          anzahlDokumente += 1;\n          // Wenn Dokument == Rechnung summmiere Rechnungen\n          if (documents[i].type == \"Rechnung\") {\n            anzahlRechnungen += 1;\n          }\n        }\n      }\n      setNumberDocuments(anzahlDokumente);\n      setNumberInvoices(anzahlRechnungen);\n    }\n  }, [props.documentsData]);\n\n  // State: Zollanmeldung vorhanden\n  const [declarationExists, setDeclarationExists] = useState(false);\n  // State: Status Zollanmeldung\n  const [confirmation, setConfirmation] = useState(\"ausstehend\");\n\n  // Prüfen ob Zollanmeldung vorliegt\n  useEffect(() => {\n    let declaration = props.declarationData;\n    let anmeldungVorhanden = false;\n    if (declaration.length !== 0) {\n      for (let i in declaration) {\n        if (declaration[i].transaction == props.id) {\n          // Wenn Anmeldung Transaktion angehört setze auf true\n          anmeldungVorhanden = true;\n          // Status Zollanmeldung abfragen\n          setConfirmation(declaration[i].status_confirmation);\n        }\n      }\n      setDeclarationExists(anmeldungVorhanden);\n    }\n  }, [props.declarationData]);\n\n  // Delete Modal State\n  const [deleteModal, setDeleteModal] = useState(false);\n\n  function toggleShowDeleteModal() {\n    setDeleteModal(!deleteModal);\n  }\n\n  // Delete-Request an DB\n\n  function deleteTransaction() {\n    axiosInstance\n      .delete(\"transactions/\" + props.id + \"/\")\n      .then((res) => {\n        //console.log(\"Transaktion gelöscht\");\n      })\n      .catch((err) => {\n        //console.log(err);\n      });\n  }\n\n  // Edit Modal State\n  const [editModal, setEditModal] = useState(false);\n\n  function toggleShowEditModal() {\n    setEditModal(!editModal);\n  }\n\n  // In die Funktion Post-Request für aktualisierte Beschreibung\n  // Beschreibung ist 'description' ; Transaktions-ID ist 'props.id'\n  const [description, setDescription] = useState(props.title);\n\n  // Submit Bearbeitung\n  function handleEditSubmit(e) {\n    e.preventDefault();\n\n    axiosInstance\n      .patch(\"transactions/\" + props.id + \"/\", { description: description })\n      .then((res) => {\n        //console.log(\"Transaktion geändert\");\n      })\n      .catch((err) => {\n        //console.log(err);\n      });\n  }\n\n  return (\n    <div>\n      <MDBCard>\n        <MDBCardBody>\n          <MDBContainer>\n            <MDBCardTitle>\n              {isImporteur ? \"Import: \" : \"Export: \"}\n              {props.title}\n              {/* <MDBIcon className=\"float-end\" size=\"lg\" fas icon=\"ellipsis-h\" /> */}\n              <MDBDropdown className=\"float-end\">\n                <MDBDropdownToggle outline>\n                  <MDBIcon size=\"lg\" fas icon=\"edit\" />\n                </MDBDropdownToggle>\n                {declarationExists ? (\n                  <MDBDropdownMenu>\n                    <MDBDropdownItem>\n                      <MDBDropdownHeader>\n                        Zollanmeldung liegt bereits vor. <br /> Bearbeitung\n                        nicht mehr möglich.\n                      </MDBDropdownHeader>\n                    </MDBDropdownItem>\n                    <MDBDropdownItem>\n                      <MDBDropdownLink\n                        className=\"disabled\"\n                        onClick={toggleShowEditModal}\n                      >\n                        <MDBIcon className=\"me-2\" fas icon=\"edit\" />\n                        Bearbeiten\n                      </MDBDropdownLink>\n                    </MDBDropdownItem>\n                    <MDBDropdownItem>\n                      <MDBDropdownLink\n                        className=\"disabled\"\n                        onClick={toggleShowDeleteModal}\n                      >\n                        <MDBIcon className=\"me-2\" fas icon=\"trash-alt\" />\n                        Löschen\n                      </MDBDropdownLink>\n                    </MDBDropdownItem>\n                  </MDBDropdownMenu>\n                ) : (\n                  <MDBDropdownMenu>\n                    <MDBDropdownItem>\n                      <MDBDropdownLink onClick={toggleShowEditModal}>\n                        <MDBIcon className=\"me-2\" fas icon=\"edit\" />\n                        Bearbeiten\n                      </MDBDropdownLink>\n                    </MDBDropdownItem>\n                    <MDBDropdownItem>\n                      <MDBDropdownLink onClick={toggleShowDeleteModal}>\n                        <MDBIcon className=\"me-2\" fas icon=\"trash-alt\" />\n                        Löschen\n                      </MDBDropdownLink>\n                    </MDBDropdownItem>\n                  </MDBDropdownMenu>\n                )}\n              </MDBDropdown>\n            </MDBCardTitle>\n\n            <MDBCardSubTitle>\n              Hinzugefügt am: {props.added} (\n              {props.timestamp_added.slice(11, 19)})\n            </MDBCardSubTitle>\n            <br />\n          </MDBContainer>\n          <MDBContainer>\n            <MDBRow>\n              <MDBCol sm=\"2\" className=\"d-flex justify-content-center\">\n                <img\n                  style={{ width: \"100px\", height: \"100px\" }}\n                  src={isImporteur ? Inbound : Outbound}\n                />\n\n                {/* <MDBIcon fas icon=\"clipboard-list\" size=\"4x\" className=\"mt-3\" /> */}\n              </MDBCol>\n              <MDBCol sm=\"5\">\n                <MDBCardText className=\"mb-3\">\n                  <b>Handelspartner{isImporteur && \" (Exporteur)\"}</b>\n                  <br />\n                  {props.exportAddress}\n                  <br />\n                  {props.exportStreet}\n                  <br />\n                  {props.exportCity}, {props.exportCountry}\n                </MDBCardText>\n              </MDBCol>\n              <MDBCol sm=\"5\">\n                <MDBCardText className=\"mb-2\">\n                  <b>Dokumente insgesamt: </b>\n                  {numberDocuments}\n                  <br />\n                  <b>Rechnungsdokumente: </b>\n                  {numberInvoices}\n                  <br />\n                  <b>Zollanmeldung: </b>\n                  {declarationExists ? \"liegt vor\" : \"ausstehend\"}\n                  <br />\n                  <b>Zollbescheid: </b>\n                  {confirmation}\n                </MDBCardText>\n              </MDBCol>\n            </MDBRow>\n            <br />\n            <MDBRow>\n              <MDBCol md=\"8\" lg=\"8\">\n                {numberInvoices == 0 ? (\n                  <MuiAlert severity=\"info\" sx={{ my: 1 }}>\n                    Transaktion angelegt. Rechnung hochladen, um Zollanmeldung\n                    durchführen zu können.\n                  </MuiAlert>\n                ) : numberInvoices !== 0 && declarationExists == false ? (\n                  <MuiAlert severity=\"warning\" sx={{ my: 1 }}>\n                    Rechnung liegt vor. Zollanmeldung ist möglich.\n                  </MuiAlert>\n                ) : declarationExists == true &&\n                  confirmation == \"ausstehend\" ? (\n                  <MuiAlert severity=\"info\" sx={{ my: 1 }}>\n                    Zollanmeldung abgeschickt. Warte auf Bearbeitung der\n                    Zollanmeldung.\n                  </MuiAlert>\n                ) : confirmation == \"bestätigt\" ? (\n                  <MuiAlert severity=\"success\" sx={{ my: 1 }}>\n                    Zollanmeldung angenommen.\n                  </MuiAlert>\n                ) : confirmation == \"abgelehnt\" ? (\n                  <MuiAlert severity=\"error\" sx={{ my: 1 }}>\n                    Zollanmeldung abelehnt.\n                  </MuiAlert>\n                ) : null}\n              </MDBCol>\n              <MDBCol md=\"4\" lg=\"4\">\n                <Link\n                  style={{ display: \"block\", margin: \"1rem 0\" }}\n                  to={\"/transactions/\" + props.id.toString()}\n                  key={props.id}\n                  params={{ title: \"Hello\" }}\n                >\n                  <MDBBtn className=\"float-end\">\n                    <MDBIcon size=\"lg\" className=\"me-2\" far icon=\"file\" />\n                    Dokumente anzeigen\n                  </MDBBtn>\n                </Link>\n              </MDBCol>\n            </MDBRow>\n          </MDBContainer>\n          <MDBCardFooter>\n            Zuletzt aktualisiert: {props.lastChange} (\n            {props.timestamp_processed.slice(11, 19)})\n          </MDBCardFooter>\n        </MDBCardBody>\n      </MDBCard>\n\n      {/* Delete Modal */}\n      <MDBModal show={deleteModal} setShow={setDeleteModal} tabIndex=\"-1\">\n        <MDBModalDialog>\n          <MDBModalContent>\n            <MDBModalHeader>\n              <MDBModalTitle>Auftrag entfernen</MDBModalTitle>\n              <MDBBtn\n                className=\"btn-close\"\n                color=\"none\"\n                onClick={toggleShowDeleteModal}\n              ></MDBBtn>\n            </MDBModalHeader>\n            <MDBModalBody>\n              Wollen sie den Auftrag <b>\"{props.title}\"</b> wirklich entfernen?\n              Dieser Vorgang lässt sich nicht rückgängig machen.\n            </MDBModalBody>\n\n            <MDBModalFooter>\n              <MDBBtn color=\"danger\" onClick={toggleShowDeleteModal}>\n                Nicht entfernen\n              </MDBBtn>\n              <MDBBtn outline color=\"danger\" onClick={deleteTransaction}>\n                Entfernen\n              </MDBBtn>\n            </MDBModalFooter>\n          </MDBModalContent>\n        </MDBModalDialog>\n      </MDBModal>\n\n      {/* Edit Modal */}\n      <MDBModal show={editModal} setShow={setEditModal}>\n        <MDBModalDialog>\n          <MDBModalContent>\n            <MDBModalHeader>\n              <MDBModalTitle>Auftrag umbenennen</MDBModalTitle>\n              <MDBBtn\n                className=\"btn-close\"\n                color=\"none\"\n                onClick={toggleShowEditModal}\n              ></MDBBtn>\n            </MDBModalHeader>\n            <MDBModalBody>\n              <MDBContainer>\n                <form onSubmit={handleEditSubmit}>\n                  <MDBInput\n                    name=\"description\"\n                    label=\"Beschreibung der Transaktion\"\n                    type=\"text\"\n                    className=\"mt-2\"\n                    onChange={(e) => setDescription(e.target.value)}\n                    value={description}\n                  />\n                  <MDBRow>\n                    <MDBBtn type=\"submit\" color=\"success\" className=\"mt-4 mb-2\">\n                      Speichern\n                    </MDBBtn>\n                  </MDBRow>\n                </form>\n              </MDBContainer>\n            </MDBModalBody>\n\n            <MDBModalFooter>\n              <MDBBtn color=\"danger\" onClick={toggleShowEditModal}>\n                Abbrechen\n              </MDBBtn>\n            </MDBModalFooter>\n          </MDBModalContent>\n        </MDBModalDialog>\n      </MDBModal>\n    </div>\n  );\n}\n\nexport default Transaction;\n","/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/components/Transactions/TransactionForm.jsx",["434","435","436"],"import React, { useEffect, useState } from \"react\";\nimport {\n  MDBContainer,\n  MDBRow,\n  MDBCol,\n  MDBInput,\n  MDBBtn,\n  MDBIcon,\n} from \"mdb-react-ui-kit\";\nimport useAxiosPrivate from \"../../hooks/useAxiosPrivate\";\nimport Autocomplete from \"@mui/material/Autocomplete\";\nimport TextField from \"@mui/material/TextField\";\nimport Checkbox from \"@mui/material/Checkbox\";\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\nimport { Link } from \"react-router-dom\";\nimport useAuth from \"../../hooks/useAuth\";\n\nfunction TransactionForm(props) {\n  const [checkImporteur, setCheckImporteur] = useState(false);\n  const [description, setDescription] = useState(\"\");\n  const [partnership, setPartnership] = useState(\"\");\n  const [partners, setPartners] = useState([]);\n  const [partnerCompany, setPartnerCompany] = useState();\n  const axiosPrivate = useAxiosPrivate();\n  const { auth } = useAuth();\n\n  useEffect(() => {\n    //lookup partner for checkbox\n    axiosPrivate.get(\"partnership/\").then((res) => {\n      setPartners(res.data);\n    });\n  }, []);\n\n  // Datenbank Submit\n  function handleSubmit(e) {\n    let importeur = 1;\n    if (checkImporteur) {\n      importeur = auth.eori_nr;\n      //console.log(\"Importeur ist eigene Firma\");\n    } else {\n      importeur = partnerCompany;\n    }\n    //console.log(\"Die Importfirma ist\", importeur);\n    e.preventDefault();\n    const newTransaction = {\n      description,\n      partnership,\n      importeur,\n    };\n    //add transaction\n    axiosPrivate\n      .post(\"/transactions/\", newTransaction)\n      .then((res) => {\n        props.setreload(!props.reload);\n        // Modal schließen\n        props.toggleShow();\n        // Snackbar Alert setzen\n        props.setSnackbarSuccess(true);\n        props.setSnackbarMessage(\"Transaktion erfolgreich angelegt.\");\n        props.handleOpenSnackbar();\n      })\n      .catch((error) => {\n        console.error(\"There was an error!\", error);\n        // Modal schließen\n        props.toggleShow();\n        // Snackbar Alert setzen\n        props.setSnackbarSuccess(false);\n        props.setSnackbarMessage(\"Fehler beim anlegen der Transaktion.\");\n        props.handleOpenSnackbar();\n      });\n  }\n\n  return (\n    <>\n      <form onSubmit={handleSubmit}>\n        <MDBContainer>\n          <MDBRow>\n            <MDBInput\n              name=\"description\"\n              label=\"Beschreibung der Transaktion\"\n              type=\"text\"\n              onChange={(e) => setDescription(e.target.value)}\n            />\n          </MDBRow>\n          <div className=\"mt-4\">Partner auswählen:</div>\n          <MDBRow>\n            <MDBCol>\n              <Autocomplete\n                className=\"mt-1\"\n                disablePortal\n                id=\"combo-box-partner\"\n                options={partners}\n                //choose name as label for ui\n                getOptionLabel={(option) => option.partner.name}\n                //when changed, save choosen Partner\n                onChange={(event, value) => {\n                  setPartnership(value.id);\n                  setPartnerCompany(value.partner.eori_nr);\n                }}\n                sx={{ width: 320 }}\n                renderInput={(params) => (\n                  <TextField {...params} label=\"Partner\" />\n                )}\n              />\n            </MDBCol>\n            <MDBCol>\n              <Link to=\"/partners\">\n                <MDBIcon\n                  far\n                  icon=\"address-book\"\n                  className=\"float-end mt-3 me-4\"\n                  size=\"2x\"\n                />\n              </Link>\n            </MDBCol>\n          </MDBRow>\n\n          <MDBRow>\n            <FormControlLabel\n              className=\"mt-3\"\n              control={\n                <Checkbox onClick={() => setCheckImporteur(!checkImporteur)} />\n              }\n              label=\"Ist ihre Firma der Importeur?\"\n            />\n          </MDBRow>\n          {description == \"\" || partnership == \"\" ? (\n            <MDBBtn\n              disabled\n              block\n              type=\"submit\"\n              color=\"success\"\n              className=\"mt-4\"\n            >\n              Hinzufügen\n            </MDBBtn>\n          ) : (\n            <MDBBtn block type=\"submit\" color=\"success\" className=\"mt-4\">\n              Hinzufügen\n            </MDBBtn>\n          )}\n        </MDBContainer>\n      </form>\n    </>\n  );\n}\n\nexport default TransactionForm;\n","/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/context/AuthProvider.js",[],"/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/hooks/useAuth.js",[],"/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/components/requireAuth.js",["437"],"import  { useLocation, Navigate,Outlet} from \"react-router-dom\";\nimport { useState, useEffect } from \"react\";\n\nimport { MDBSpinner } from \"mdb-react-ui-kit\";\n\nimport useAuth from \"../hooks/useAuth\";\nimport useDataUpdate from \"../hooks/useDataUpdate\";\n\n\n//Management der gesperrten Nutzerbereiche und zur Verfügung stellen einer Komponente die die Berechtigungen prüfen \n\nconst RequireAuth =  ({allowedRoles}) => {\n    const {auth} = useAuth();\n    const location = useLocation();\n    const dataUpdate = useDataUpdate(); \n    const [isLoading, setIsLoading] = useState(true);\n\n    useEffect(() => {\n\n        let isMounted = true; \n        //Nutzerdaten müssen beim erstmaligen Login abgefragt werden bzw. aktualisiert werden, damit Rollen zur Verfügung stehen\n\n        const getfirstDataSet = async () => {\n            try {\n                await dataUpdate();\n            }        \n            catch (err) {\n                console.error(err);\n            }\n            finally{\n                isMounted && setIsLoading(false);\n            }\n        }\n\n        !auth?.role?  getfirstDataSet() : setIsLoading(false);\n\n        return () => isMounted = false;\n    }, [])\n\n\n/*     console.log(auth?.user);\n    console.log(`Die aktuelle Rolle ist ${auth?.role}`)\n    console.log(allowedRoles) */\n    \n    return (\n        \n        isLoading\n            ?   <MDBSpinner grow>\n                    <span className='visually-hidden'>Loading...</span>\n                </MDBSpinner>\n                : \n        //wenn AccessToken vorhanden Seite anzeigen, ansonsten login\n                allowedRoles?.includes( auth?.role)\n                        ? <Outlet/> \n                        : auth?.username \n                            ? <Navigate to=\"/unauthorized\" state={{from:location}} replace />\n                            : <Navigate to = \"/login\" state={{from:location}} replace />\n        \n    )\n\n}\n\nexport default RequireAuth;","/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/hooks/useRefreshToken.js",[],"/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/hooks/useAxiosPrivate.js",[],"/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/components/PersistLogin.js",["438","439"],"import { Outlet } from \"react-router-dom\";\nimport { useState, useEffect } from \"react\";\nimport useRefreshToken from \"../hooks/useRefreshToken\";\nimport useAuth from \"../hooks/useAuth\";\nimport { MDBSpinner } from \"mdb-react-ui-kit\";\nimport useDataUpdate from \"../hooks/useDataUpdate\";\nimport \"../pages/css/LoadingSpinner.css\";\n\n//Nutzer bleibt eingeloggt, sofern er sich nicht auslogt oder den Refresh Token im lokalen Speicher löscht \n\nconst PersistLogin = () => {\n  const [isLoading, setIsLoading] = useState(true);\n  const refresh = useRefreshToken();\n  const { auth, setAuth } = useAuth();\n  const dataUpdate = useDataUpdate();\n\n  useEffect(() => {\n    let isMounted = true;\n\n    //Sofern Nutzer zurückgekehrt werden Daten neu abgerufen \n\n    const verifyRefreshToken = async () => {\n      //console.log(\"Verify Refresh token called\");\n      try {\n        await dataUpdate();\n        await refresh();\n      } catch (err) {\n        //console.error(err);\n      } finally {\n        isMounted && setIsLoading(false);\n      }\n    };\n\n    !auth?.accessToken ? verifyRefreshToken() : setIsLoading(false);\n\n    return () => (isMounted = false);\n  }, []);\n\n  //Nur für Debugging und die Anzeige der aktuellen Status:\n\n  /*     useEffect(() => {\n        console.log(`isLoading: ${isLoading}`)\n        console.log(`aT: ${JSON.stringify(auth?.accessToken)}`)\n    }, [isLoading]) */\n\n  return (\n    <>\n      {isLoading ? (\n        <div className=\"loadingSpinner\">\n          <MDBSpinner>\n            <span className=\"visually-hidden\">Lädt..</span>\n          </MDBSpinner>\n        </div>\n      ) : (\n        <Outlet />\n      )}\n    </>\n  );\n};\n\nexport default PersistLogin;\n","/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/pages/Declaration.jsx",["440","441","442","443","444","445","446","447","448","449","450","451","452","453"],"import React, { useState, useEffect } from \"react\";\nimport useAxiosPrivate from \"../hooks/useAxiosPrivate\";\nimport { Link, useParams, useNavigate } from \"react-router-dom\";\nimport \"./css/LoadingSpinner.css\";\n\n// Unterformulare\nimport AllgemeineAngaben from \"../components/Declaration/AllgemeineAngaben\";\nimport Adressdaten from \"../components/Declaration/Adressdaten\";\nimport Lieferdaten from \"../components/Declaration/Lieferdaten\";\nimport Rechnungsdaten from \"../components/Declaration/Rechnungsdaten\";\nimport AnmeldungDokumente from \"../components/Declaration/AnmeldungDokumente\";\n\nimport {\n  MDBContainer,\n  MDBSpinner,\n  MDBBreadcrumb,\n  MDBBreadcrumbItem,\n} from \"mdb-react-ui-kit\";\n\n//Smart Contract\nimport { createZollanmeldung } from \"../Web3Client\";\n\n// Stepper\nimport Box from \"@mui/material/Box\";\nimport Stepper from \"@mui/material/Stepper\";\nimport Step from \"@mui/material/Step\";\nimport StepLabel from \"@mui/material/StepLabel\";\nimport Button from \"@mui/material/Button\";\nimport Typography from \"@mui/material/Typography\";\n\n// Loading Backdrop\nimport Backdrop from \"@mui/material/Backdrop\";\n\n//Nutzerdaten Abruf\nimport useAuth from \"../hooks/useAuth\";\nimport { CircularProgress } from \"@mui/material\";\n\nfunction Declaration(props) {\n  const [usedInvoice, setUsedInvoice] = useState();\n  const [isLoading, setIsLoading] = useState(true);\n  const [pubkeyCO, setPubkeyCO] = useState();\n  const [transactionInvoices, setTransactionInvoices] = useState();\n\n  //state für dokumente\n\n  const usedDocuments = [];\n  const [documents, setDocuments] = useState();\n\n  //auswahl für Zollämter\n\n  const [customOffices, setCustomOffices] = useState({});\n\n  //funktion für Nutzerdaten\n  const { auth } = useAuth();\n\n  //Abfrage der TransaktionsID\n\n  const { transactionId } = useParams();\n\n  // Stepper-Logik\n  const steps = [\n    \"Allgemeine Angaben\",\n    \"Adressdaten\",\n    \"Lieferdaten\",\n    \"Rechnungsdaten\",\n    \"Dokumente\",\n  ];\n\n  const [activeStep, setActiveStep] = React.useState(0);\n  const [skipped, setSkipped] = React.useState(new Set());\n\n  // (Kein Step ist optional)\n  const isStepOptional = (step) => {\n    return;\n  };\n\n  //Abfrage der voreingestellten Daten\n  const axiosInstance = useAxiosPrivate();\n\n  const isStepSkipped = (step) => {\n    return skipped.has(step);\n  };\n\n  const handleNext = (e) => {\n    let newSkipped = skipped;\n    if (isStepSkipped(activeStep)) {\n      newSkipped = new Set(newSkipped.values());\n      newSkipped.delete(activeStep);\n    }\n    // Check Validierung\n    if (activeStep === 0 && allgemeineAngabenValidity == false) {\n      return;\n    }\n    if (activeStep === 2 && lieferdatenValidity == false) {\n      return;\n    }\n    if (activeStep === 3 && rechnungsdatenValidity == false) {\n      return;\n    }\n    e.preventDefault();\n    setActiveStep((prevActiveStep) => prevActiveStep + 1);\n    setSkipped(newSkipped);\n  };\n\n  const handleBack = () => {\n    setActiveStep((prevActiveStep) => prevActiveStep - 1);\n  };\n\n  const handleSkip = () => {\n    if (!isStepOptional(activeStep)) {\n      // You probably want to guard against something like this,\n      // it should never occur unless someone's actively trying to break something.\n      throw new Error(\"You can't skip a step that isn't optional.\");\n    }\n\n    setActiveStep((prevActiveStep) => prevActiveStep + 1);\n    setSkipped((prevSkipped) => {\n      const newSkipped = new Set(prevSkipped.values());\n      newSkipped.add(activeStep);\n      return newSkipped;\n    });\n  };\n\n  const handleReset = () => {\n    setActiveStep(0);\n  };\n\n  //Übertragen der Daten\n  async function handleSubmit() {\n    // Backdrop Ladeanimation öffnen\n    handleToggleBackdrop();\n    const zollwert = (await fieldValue.gesamtbetrag) + fieldValue.lieferkosten;\n    await blockchainZollanmeldungTransaction(\n      pubkeyCO,\n      fieldValue.blockchainRID,\n      zollwert.toString(),\n      fieldValue.lieferbedingung\n    );\n\n    return;\n  }\n\n  // -- DATENFELDER --\n  // State des Inhalts der Felder\n  const [fieldValue, setFieldValue] = React.useState({\n    // Allgemeine Angaben\n    auftragsnummer: \"\",\n    bearbeitendeDienststelle: \"\",\n    anmeldungArt: \"\",\n    geschaeftArt: \"\",\n    zahlungArt: \"\",\n    // Adressdaten Versender\n    eoriVersender: \"\",\n    nameVersender: \"\",\n    vornameVersender: \"\",\n    firmaVersender: \"\",\n    strasseVersender: \"\",\n    plzVersender: \"\",\n    ortVersender: \"\",\n    staatVersender: \"\",\n    telefonVersender: \"\",\n    emailVersender: \"\",\n    // Adressdaten Anmelder\n    eoriAnmelder: \"\",\n    nameAnmelder: \"\",\n    vornameAnmelder: \"\",\n    firmaAnmelder: \"\",\n    strasseAnmelder: \"\",\n    plzAnmelder: \"\",\n    ortAnmelder: \"\",\n    staatAnmelder: \"\",\n    telefonAnmelder: \"\",\n    emailAnmelder: \"\",\n    // Lieferdaten\n    ausfuhrland: \"\",\n    bestimmungsland: \"\",\n    bestimmungsbundesland: \"\",\n    befoerderungsmittel: \"\",\n    lieferbedingung: \"\",\n    lieferort: \"\",\n    warenort: \"\",\n    lieferkosten: \"\",\n    //Rechnungsdaten\n    datumRechnung: \"\",\n    gesamtbetrag: \"\",\n    waehrung: \"\",\n  });\n\n  const [rechnungsposten, setRechnungsposten] = React.useState([{}]);\n\n  // Legacy State über fehlende Eingaben\n  // -> Keine manuelle Validierung mehr, sondern HTML5 Required-Validierung\n  const [inputMissingError, setInputMissingError] = React.useState({\n    // Allgemeine Angaben\n    auftragsnummer: false,\n    bearbeitendeDienststelle: false,\n    anmeldungArt: false,\n    geschaeftArt: false,\n    zahlungArt: false,\n    // Adressdaten Versender\n    eoriVersender: false,\n    nameVersender: false,\n    vornameVersender: false,\n    firmaVersender: false,\n    strasseVersender: false,\n    plzVersender: false,\n    ortVersender: false,\n    staatVersender: false,\n    telefonVersender: false,\n    emailVersender: false,\n    // Adressdaten Anmelder\n    eoriAnmelder: false,\n    nameAnmelder: false,\n    vornameAnmelder: false,\n    firmaAnmelder: false,\n    strasseAnmelder: false,\n    plzAnmelder: false,\n    ortAnmelder: false,\n    staatAnmelder: false,\n    telefonAnmelder: false,\n    emailAnmelder: false,\n    // Lieferdaten\n    ausfuhrland: false,\n    bestimmungsland: false,\n    bestimmungsbundesland: false,\n    befoerderungsmittel: false,\n    lieferbedingung: false,\n    lieferort: false,\n    warenort: false,\n    lieferkosten: false,\n    //Rechnungsdaten\n    datumRechnung: false,\n    gesamtbetrag: false,\n    waehrung: false,\n  });\n\n  // Legacy State über falsche Inputs (müssen Zahlen sein)\n  // -> Keine manuelle Validierung mehr, sondern HTML5 Required-Validierung\n  const [inputWrongError, setInputWrongError] = React.useState({\n    auftragsnummer: false,\n    eoriVersender: false,\n    plzVersender: false,\n    eoriAnmelder: false,\n    plsAnmelder: false,\n    lieferkosten: false,\n  });\n\n  // Neue Validierung-States\n  const [allgemeineAngabenValidity, setAllgemeineAngabenValidity] =\n    useState(false);\n  const [lieferdatenValidity, setLieferdatenValidity] = useState(false);\n  const [rechnungsdatenValidity, setRechnungsdatenValidity] = useState(false);\n\n  // FieldChange für Select und String-Felder\n  function handleFieldChange(event) {\n    const name = event.target.name;\n    const value = event.target.value;\n\n    setFieldValue({ ...fieldValue, [name]: value });\n    setInputMissingError({ ...inputMissingError, [name]: false });\n  }\n\n  // FieldChange für Zahlen-Inputfelder\n  function handleNumberFieldChange(event) {\n    const name = event.target.name;\n    const value = event.target.value;\n\n    // Validierung: nur Zahlen\n    if (isNaN(value)) {\n      setInputWrongError({ ...inputWrongError, [name]: true });\n    } else {\n      setInputWrongError({ ...inputWrongError, [name]: false });\n    }\n\n    setFieldValue({ ...fieldValue, [name]: value });\n    setInputMissingError({ ...inputMissingError, [name]: false });\n  }\n\n  // Abfragen der Bestandsdaten\n\n  useEffect(async () => {\n    await axiosInstance.get(`transactions/` + transactionId).then((res) => {\n      setFieldValue((prev) => {\n        return {\n          ...prev,\n          auftragsnummer: res.data.id,\n          eoriVersender: res.data.partnership.partner.eori_nr,\n          //nameVersender: .partnership.partner.name,\n          firmaVersender: res.data.partnership.partner.name,\n          strasseVersender: res.data.partnership.partner.street,\n          plzVersender: res.data.partnership.partner.city_code,\n          ortVersender: res.data.partnership.partner.city,\n          staatVersender: res.data.partnership.partner.country_code,\n          telefonVersender: res.data.partnership.partner.phone,\n          emailVersender: res.data.partnership.partner.email,\n          exporteur_pubkey: res.data.partnership.partner.publickey,\n        };\n      });\n      setIsLoading(false);\n    });\n\n    //Abfrage der eigenen Nutzerdaten\n\n    await axiosInstance.get(`user/`).then((response) => {\n      setFieldValue((prev) => {\n        return {\n          ...prev,\n          eoriAnmelder: response.data[0].employee?.company.eori_nr,\n          //nameVersender: .partnership.partner.name,\n          firmaAnmelder: response.data[0].employee.company.name,\n          strasseAnmelder: response.data[0].employee.company.street,\n          plzAnmelder: response.data[0].employee.company.city_code,\n          ortAnmelder: response.data[0].employee.company.city,\n          staatAnmelder: response.data[0].employee.company.country_code,\n          telefonAnmelder: response.data[0].employee.company.phone,\n          emailAnmelder: response.data[0].employee.company.email,\n        };\n      });\n    });\n\n    //Abfrage der Rechnungen für Auswahl\n\n    await axiosInstance\n      .get(`invoice/?transaction=${transactionId}`)\n      .then((response) => {\n        setTransactionInvoices(response.data);\n      });\n\n    //Abfrage der Zollstationen\n    await axiosInstance.get(\"customoffices/\").then((res) => {\n      setCustomOffices(res.data);\n      //setCompanies(res.data);\n    });\n    //Abfrage der Documente\n    await axiosInstance\n      .get(\"documents/?transaction=\" + transactionId)\n      .then((res) => {\n        setDocuments(res.data);\n        //setCompanies(res.data);\n      });\n  }, [transactionId]);\n\n  //Abfrage der Rechnungsdaten\n  useEffect(async () => {\n    if (typeof usedInvoice !== \"undefined\") {\n      await axiosInstance.get(`invoice/${usedInvoice}/`).then((response) => {\n        setFieldValue((prev) => {\n          return {\n            ...prev,\n            waehrung: response.data?.currency,\n            datumRechnung: response.data?.issue_date,\n            gesamtbetrag: response.data?.total_value,\n            lieferkosten: response.data?.transport_costs,\n            gesamtbetrag: response.data?.total_value,\n            blockchainRID: response.data?.blockchain_id,\n            rechnungID: response.data?.id,\n          };\n        });\n        setRechnungsposten(response.data?.invoiceItem);\n      });\n    }\n  }, [usedInvoice]);\n\n  // Blockchain Transaktion\n  async function blockchainZollanmeldungTransaction(\n    _zoll,\n    _rechnungID,\n    _zollwert,\n    _incoterms\n  ) {\n    var erfolgreich = false;\n    await createZollanmeldung(_zoll, _rechnungID, _zollwert, _incoterms)\n      .then((tx) => {\n        console.log(tx);\n        erfolgreich = true;\n        axiosInstance\n          .post(\"/declaration/\", {\n            anmeldeArt: fieldValue.anmeldungArt,\n            geschaeftArt: fieldValue.geschaeftArt,\n            zahlungsart: fieldValue?.zahlungArt,\n            ausfuhrland: fieldValue.ausfuhrland,\n            bestimmungsland: fieldValue.bestimmungsland,\n            befoerderungsmittel: fieldValue.befoerderungsmittel,\n            lieferbedingung: fieldValue.lieferbedingung,\n            lieferort: fieldValue.lieferort,\n            warenort: fieldValue?.warenort,\n            invoice: usedInvoice,\n            transaction: transactionId,\n            customs_office: fieldValue.bearbeitendeDienststelle,\n            blockchain_zid: tx - 1,\n            document: usedDocuments,\n          })\n          .then((res) => {\n            // Backdrop Ladeanimation schließen\n            handleCloseBackdrop();\n            handleNavigate(true, \"Zollanmeldung angelegt und übermittelt.\");\n          })\n          .catch(function (error) {\n            if (error.response) {\n              // The request was made and the server responded with a status code\n              // that falls out of the range of 2xx\n              console.log(error.response.data);\n              console.log(error.response.status);\n              console.log(error.response.headers);\n              // Backdrop Ladeanimation schließen\n              handleCloseBackdrop();\n              handleNavigate(false, \"Fehler bei Erstellung der Zollanmeldung.\");\n            } else if (error.request) {\n              // The request was made but no response was received\n              // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\n              // http.ClientRequest in node.js\n              console.log(error.request);\n              handleNavigate(false, \"Fehler bei Erstellung der Zollanmeldung.\");\n            } else {\n              // Something happened in setting up the request that triggered an Error\n              console.log(\"Error\", error.message);\n              handleNavigate(false, \"Fehler bei Erstellung der Zollanmeldung.\");\n            }\n          });\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n    return erfolgreich;\n  }\n\n  // Navigation an DocumentsNew\n  //+ State: Informationen für Snackbar Alert\n\n  let navigate = useNavigate();\n\n  function handleNavigate(snackSuccess, snackMessage) {\n    let urladdress = \"/transactions/\" + fieldValue.auftragsnummer;\n    navigate(urladdress, {\n      replace: true,\n      state: { success: snackSuccess, message: snackMessage },\n    });\n  }\n\n  // -- Loading Backdrop --\n  const [openBackdrop, setOpenBackdrop] = React.useState(false);\n  const handleCloseBackdrop = () => {\n    setOpenBackdrop(false);\n  };\n  const handleToggleBackdrop = () => {\n    setOpenBackdrop(!openBackdrop);\n  };\n\n  return (\n    <>\n      {isLoading ? (\n        <div className=\"loadingSpinner\">\n          <MDBSpinner>\n            <span className=\"visually-hidden\">Lädt..</span>\n          </MDBSpinner>\n        </div>\n      ) : (\n        <>\n          <h3>Zollanmeldung erstellen</h3>\n          <MDBBreadcrumb>\n            <MDBBreadcrumbItem>\n              <Link to=\"/transactions\">Aufträge</Link>\n            </MDBBreadcrumbItem>\n            <MDBBreadcrumbItem>\n              <Link to={\"/transactions/\" + transactionId}>\n                Auftrags-ID {transactionId}\n              </Link>\n            </MDBBreadcrumbItem>\n            <MDBBreadcrumbItem active>Formular Zollanmeldung</MDBBreadcrumbItem>\n          </MDBBreadcrumb>\n          <br />\n          <div>\n            <Box sx={{ width: \"100%\" }}>\n              <Stepper className=\"mb-3\" activeStep={activeStep}>\n                {steps.map((label, index) => {\n                  const stepProps = {};\n                  const labelProps = {};\n                  if (isStepOptional(index)) {\n                    labelProps.optional = (\n                      <Typography variant=\"caption\">Optional</Typography>\n                    );\n                  }\n                  if (isStepSkipped(index)) {\n                    stepProps.completed = false;\n                  }\n                  return (\n                    <Step key={label} {...stepProps}>\n                      <StepLabel {...labelProps}>{label}</StepLabel>\n                    </Step>\n                  );\n                })}\n              </Stepper>\n              {activeStep === steps.length ? (\n                <React.Fragment>\n                  <Typography sx={{ mt: 2, mb: 1 }}>\n                    All steps completed - you&apos;re finished\n                  </Typography>\n                  <Box sx={{ display: \"flex\", flexDirection: \"row\", pt: 2 }}>\n                    <Box sx={{ flex: \"1 1 auto\" }} />\n                    <Button onClick={handleReset}>Zurücksetzen</Button>\n                  </Box>\n                </React.Fragment>\n              ) : (\n                <React.Fragment>\n                  {activeStep === 0 ? (\n                    <>\n                      <MDBContainer>\n                        <AllgemeineAngaben\n                          fieldValue={fieldValue}\n                          customOffices={customOffices}\n                          setPubkeyCO={setPubkeyCO}\n                          setFieldValue={setFieldValue}\n                          inputMissingError={inputMissingError}\n                          setInputMissingError={setInputMissingError}\n                          inputWrongError={inputWrongError}\n                          setInputWrongError={setInputWrongError}\n                          handleFieldChange={handleFieldChange}\n                          handleNumberFieldChange={handleNumberFieldChange}\n                          // Validierung State\n                          allgemeineAngabenValidity={allgemeineAngabenValidity}\n                          setAllgemeineAngabenValidity={\n                            setAllgemeineAngabenValidity\n                          }\n                          // Stepper Funktionen\n                          handleBack={handleBack}\n                          isStepOptional={isStepOptional}\n                          activeStep={activeStep}\n                          handleSkip={handleSkip}\n                          activeStep={activeStep}\n                          steps={steps}\n                          handleSubmit={handleSubmit}\n                          handleNext={handleNext}\n                        />\n                      </MDBContainer>\n                    </>\n                  ) : activeStep === 1 ? (\n                    <>\n                      <MDBContainer>\n                        <Adressdaten\n                          fieldValue={fieldValue}\n                          setFieldValue={setFieldValue}\n                          inputMissingError={inputMissingError}\n                          setInputMissingError={setInputMissingError}\n                          inputWrongError={inputWrongError}\n                          setInputWrongError={setInputWrongError}\n                          handleFieldChange={handleFieldChange}\n                          handleNumberFieldChange={handleNumberFieldChange}\n                          // Stepper Funktionen\n                          handleBack={handleBack}\n                          isStepOptional={isStepOptional}\n                          activeStep={activeStep}\n                          handleSkip={handleSkip}\n                          activeStep={activeStep}\n                          steps={steps}\n                          handleSubmit={handleSubmit}\n                          handleNext={handleNext}\n                        />\n                      </MDBContainer>\n                    </>\n                  ) : activeStep === 2 ? (\n                    <>\n                      <MDBContainer>\n                        <Lieferdaten\n                          fieldValue={fieldValue}\n                          setFieldValue={setFieldValue}\n                          inputMissingError={inputMissingError}\n                          setInputMissingError={setInputMissingError}\n                          inputWrongError={inputWrongError}\n                          setInputWrongError={setInputWrongError}\n                          handleFieldChange={handleFieldChange}\n                          handleNumberFieldChange={handleNumberFieldChange}\n                          // Validierung State\n                          lieferdatenValidity={lieferdatenValidity}\n                          setLieferdatenValidity={setLieferdatenValidity}\n                          // Stepper Funktionen\n                          handleBack={handleBack}\n                          isStepOptional={isStepOptional}\n                          activeStep={activeStep}\n                          handleSkip={handleSkip}\n                          activeStep={activeStep}\n                          steps={steps}\n                          handleSubmit={handleSubmit}\n                          handleNext={handleNext}\n                        />\n                      </MDBContainer>\n                    </>\n                  ) : activeStep === 3 ? (\n                    <>\n                      <MDBContainer>\n                        <Rechnungsdaten\n                          fieldValue={fieldValue}\n                          setFieldValue={setFieldValue}\n                          inputMissingError={inputMissingError}\n                          setInputMissingError={setInputMissingError}\n                          inputWrongError={inputWrongError}\n                          setInputWrongError={setInputWrongError}\n                          handleFieldChange={handleFieldChange}\n                          handleNumberFieldChange={handleNumberFieldChange}\n                          rechnungsposten={rechnungsposten}\n                          setRechnungsposten={setRechnungsposten}\n                          transactionInvoices={transactionInvoices}\n                          usedInvoice={usedInvoice}\n                          setUsedInvoice={setUsedInvoice}\n                          // Validierung State\n                          rechnungsdatenValidity={rechnungsdatenValidity}\n                          setRechnungsdatenValidity={setRechnungsdatenValidity}\n                          // Stepper Funktionen\n                          handleBack={handleBack}\n                          isStepOptional={isStepOptional}\n                          activeStep={activeStep}\n                          handleSkip={handleSkip}\n                          activeStep={activeStep}\n                          steps={steps}\n                          handleSubmit={handleSubmit}\n                          handleNext={handleNext}\n                        />\n                      </MDBContainer>\n                    </>\n                  ) : (\n                    <>\n                      <MDBContainer>\n                        <AnmeldungDokumente\n                          usedDocuments={usedDocuments}\n                          documents={documents}\n                          // Stepper Funktionen\n                          handleBack={handleBack}\n                          isStepOptional={isStepOptional}\n                          activeStep={activeStep}\n                          handleSkip={handleSkip}\n                          activeStep={activeStep}\n                          steps={steps}\n                          handleSubmit={handleSubmit}\n                          handleNext={handleNext}\n                        />\n                      </MDBContainer>\n                    </>\n                  )}\n                </React.Fragment>\n              )}\n            </Box>\n          </div>\n          <Backdrop\n            sx={{ color: \"#fff\", zIndex: (theme) => theme.zIndex.drawer + 1 }}\n            open={openBackdrop}\n            onClick={handleCloseBackdrop}\n          >\n            <CircularProgress color=\"inherit\" />\n          </Backdrop>\n        </>\n      )}\n    </>\n  );\n}\n\nexport default Declaration;\n","/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/components/UI/TopNavigation.jsx",["454"],"import React, { useEffect, useState } from \"react\";\nimport {\n  MDBContainer,\n  MDBNavbar,\n  MDBIcon,\n  MDBDropdown,\n  MDBDropdownToggle,\n  MDBDropdownMenu,\n  MDBDropdownItem,\n  MDBDropdownLink,\n  MDBDropdownDivider,\n  MDBDropdownHeader,\n} from \"mdb-react-ui-kit\";\n\nimport { Link } from \"react-router-dom\";\n\nimport useAuth from \"../../hooks/useAuth\";\nimport useAxiosPrivate from \"../../hooks/useAxiosPrivate\";\nimport { useNavigate } from \"react-router-dom\";\nimport NotificationToast from \"../Dashboard/NotifcationToast\";\n\nexport default function TopNavigation() {\n  // Logout\n  const { auth } = useAuth();\n  const username = auth.username;\n  const company = auth.company;\n  const navigate = useNavigate();\n\n  const logout = () => {\n    localStorage.removeItem(\"username\");\n    localStorage.removeItem(\"company\");\n    localStorage.removeItem(\"refresh_token\");\n    localStorage.removeItem(\"access_token\");\n    //alert(\"Sie werden ausgeloggt.\");\n    navigate(\"/login\", { replace: true });\n    window.location.reload(false);\n  };\n\n  const [alerts, setAlerts] = useState([]);\n  const [notificationsLoading, setNotificationLoading] = useState(true);\n\n  const axiosInstance = useAxiosPrivate();\n\n  // Suchen State\n  const [searchTerm, setSearchTerm] = useState();\n\n  // Notifications DB Call\n  useEffect(() => {\n    axiosInstance.get(\"/alerts?unread=true\").then((res) => {\n      setAlerts(res.data);\n      setNotificationLoading(false);\n    });\n  }, []);\n\n  // Search Submit\n  const submitHandler = (e) => {\n    e.preventDefault();\n    navigate(`/search?=${searchTerm}`, { replace: false });\n  };\n\n  return (\n    <>\n      <MDBNavbar\n        style={{ marginLeft: 64 }}\n        fixed=\"top\"\n        expand=\"lg\"\n        light\n        bgColor=\"dark\"\n      >\n        <MDBContainer fluid>\n          <div className=\"d-flex flex-row\">\n            <form\n              onSubmit={submitHandler}\n              className=\"d-flex input-group w-auto\"\n            >\n              <input\n                style={{ width: 300 }}\n                type=\"search\"\n                className=\"form-control\"\n                placeholder=\"Suchbegriff eingeben\"\n                aria-label=\"Search\"\n                onChange={(e) => setSearchTerm(e.target.value)}\n              />\n              <Link to={`/search?=${searchTerm}`} className=\"btn btn-primary\">\n                Suchen\n              </Link>\n            </form>\n          </div>\n          <div className=\"d-flex flex-row\">\n            <MDBDropdown size=\"3\" className=\"mx-2\">\n              {/* Anzahl Benachrichtungen */}\n              <MDBDropdownToggle outline size=\"sm\">\n                <MDBIcon size=\"2x\" className=\"ms-1\" far icon=\"bell\" />\n              </MDBDropdownToggle>\n              <MDBDropdownMenu\n                className=\"p-3 text-muted overflow-scroll\"\n                style={{\n                  width: \"400px\",\n                  minHeight: \"200px\",\n                  maxHeight: \"400px\",\n                }}\n              >\n                <MDBDropdownItem>\n                  <MDBDropdownHeader className=\"mb-2\">\n                    Benachrichtigungen\n                  </MDBDropdownHeader>\n                </MDBDropdownItem>\n                <>\n                  {alerts.length !== 0 && !notificationsLoading ? (\n                    <>\n                      {alerts.map((alert) => (\n                        <MDBDropdownItem key={alert.id}>\n                          <NotificationToast alert={alert} />\n                        </MDBDropdownItem>\n                      ))}\n                    </>\n                  ) : (\n                    <>\n                      <MDBDropdownItem className=\"mt-5 d-flex justify-content-center\">\n                        <p>Keinen neuen Benachrichtungen</p>\n                      </MDBDropdownItem>\n                    </>\n                  )}\n                </>\n              </MDBDropdownMenu>\n            </MDBDropdown>\n            <MDBDropdown>\n              <MDBDropdownToggle outline size=\"sm\">\n                <MDBIcon size=\"2x\" className=\"ms-1\" far icon=\"user-circle\" />\n              </MDBDropdownToggle>\n              <MDBDropdownMenu className=\"text-muted\">\n                <p className=\"mt-3 mx-3\">\n                  <b>Organisation: </b>\n                  {company}\n                </p>\n                <p className=\"mt-3 ms-3\">\n                  <b>Mitarbeiter: </b>\n                  {username}\n                </p>\n                <MDBDropdownItem>\n                  <MDBDropdownItem>\n                    <MDBDropdownDivider />\n                  </MDBDropdownItem>\n                  <MDBDropdownLink onClick={logout}>\n                    <MDBIcon\n                      fas\n                      icon=\"sign-out-alt\"\n                      size=\"lg\"\n                      className=\"me-2\"\n                    />\n                    Logout\n                  </MDBDropdownLink>\n                </MDBDropdownItem>\n                <MDBDropdownItem>\n                  <MDBDropdownLink\n                    onClick={() => {\n                      navigate(\"/settings\");\n                    }}\n                  >\n                    <MDBIcon fas icon=\"cog\" size=\"lg\" className=\"me-2\" />\n                    Account\n                  </MDBDropdownLink>\n                </MDBDropdownItem>\n              </MDBDropdownMenu>\n            </MDBDropdown>\n          </div>\n        </MDBContainer>\n      </MDBNavbar>\n      <br />\n    </>\n  );\n}\n","/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/components/UI/SideNavigation.jsx",["455","456"],"import React, { useEffect, useState } from \"react\";\nimport { MDBIcon } from \"mdb-react-ui-kit\";\n\nimport SideNav, { NavItem, NavIcon, NavText } from \"@trendmicro/react-sidenav\";\n\nimport \"../../pages/css/react-sidenav.css\";\nimport { useNavigate, useLocation } from \"react-router-dom\";\n\nfunction SideNavigation(props) {\n  let navigate = useNavigate();\n  let location = useLocation();\n\n  return (\n    <SideNav\n      onToggle={() => props.setExpandedNav(!props.expandedNav)}\n      style={{\n        padding: \"0px 0px 0px 0px\",\n        position: \"fixed\",\n      }}\n    >\n      <SideNav.Toggle />\n\n      <SideNav.Nav defaultSelected=\"dashboard\">\n        <NavItem\n          // eventKey=\"dashboard\"\n          active={location.pathname.includes(\"/dashboard\")}\n          onSelect={() => navigate(\"/dashboard\", { replace: false })}\n        >\n          <NavIcon>\n            <MDBIcon fas icon=\"tachometer-alt\" style={{ fontSize: \"1.75em\" }} />\n          </NavIcon>\n          <NavText>Dashboard</NavText>\n        </NavItem>\n        <NavItem\n          // eventKey=\"transactions\"\n          active={location.pathname.includes(\"/transactions\")}\n          onSelect={() => navigate(\"/transactions\", { replace: false })}\n        >\n          <NavIcon>\n            <MDBIcon fas icon=\"box\" style={{ fontSize: \"1.75em\" }} />\n          </NavIcon>\n          <NavText>Aufträge</NavText>\n        </NavItem>\n        <NavItem\n          // eventKey=\"partners\"\n          active={location.pathname.includes(\"/partners\")}\n          onSelect={() => navigate(\"/partners\", { replace: false })}\n        >\n          <NavIcon>\n            <MDBIcon fas icon=\"address-book\" style={{ fontSize: \"1.75em\" }} />\n          </NavIcon>\n          <NavText>Partner</NavText>\n        </NavItem>\n        <NavItem\n          // eventKey=\"settings\"\n          active={location.pathname.includes(\"/settings\")}\n          onSelect={() => navigate(\"/settings\", { replace: false })}\n        >\n          <NavIcon>\n            <MDBIcon fas icon=\"cog\" style={{ fontSize: \"1.75em\" }} />\n          </NavIcon>\n          <NavText>Einstellungen</NavText>\n        </NavItem>\n      </SideNav.Nav>\n    </SideNav>\n  );\n}\n\nexport default SideNavigation;\n","/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/components/Documents/DocumentBreadcrumb.jsx",[],"/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/components/Layout.js",[],"/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/hooks/useDataUpdate.js",["457","458"],"import axiosInstance from \"../axiosApi\"\nimport useAuth from \"./useAuth\"\nimport useAxiosPrivate from \"./useAxiosPrivate\";\n\n\nconst useDataUpdate = () => {\n    const { setAuth } = useAuth();\n    const axiosInstance = useAxiosPrivate();\n\n    //Globale Nutzerdaten abfragen, die dann anwendungsweit zur Verfügung gestellt werden\n\n    const dataUpdate = async() => {\n        //console.log(`Neue Nutzerdaten werden angefordert`);\n        const response = await axiosInstance.get('user')\n        //console.log(response.data[0])\n        //Unterscheiden wird Rollenbezogen für Zoll und Unternehmensmitarbeiter \n        if (response.data[0].role==\"company_employee\") {\n            setAuth(prev => {\n                return {\n                    ...prev,\n                    username: response.data[0].username,\n                    company: response.data[0].employee?.company.name,\n                    pubkey: response.data[0].employee?.company.publickey,\n                    eori_nr: response.data[0].employee?.company.eori_nr,\n                    role: response.data[0].role,\n                    userData: response.data[0]\n                }\n            });\n            return; \n        }\n        setAuth(prev => {\n            //console.log(`New Username received : ${response.data[0].username}`);\n            return {\n                ...prev,\n                username: response.data[0].username,\n                company: response.data[0].employee?.custom_office.name,\n                pubkey: response.data[0].employee?.custom_office.publickey,\n                eori_nr: response.data[0].employee?.custom_office.id,\n                role: response.data[0].role\n            }\n        });\n        return; \n\n\n\n    }\n  return dataUpdate\n\n}\n\nexport default useDataUpdate","/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/components/Partners/PartnerRequests.jsx",["459","460","461"],"import React, { useEffect, useState } from \"react\";\nimport {\n  MDBTable,\n  MDBTableHead,\n  MDBTableBody,\n  MDBBtn,\n  MDBSpinner,\n  MDBIcon,\n} from \"mdb-react-ui-kit\";\nimport { Accordion } from \"react-bootstrap\";\nimport useAxiosPrivate from \"../../hooks/useAxiosPrivate\";\nimport useAuth from \"../../hooks/useAuth\";\n\nexport default function PartnerRequests(props) {\n  const axiosInstance = useAxiosPrivate();\n  const { auth } = useAuth();\n\n  const [openRequests, setopenRequests] = useState();\n\n  const [userCompanyEORI, setUserCompanyEORI] = useState();\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    setUserCompanyEORI(auth.eori_nr);\n  }, [auth]);\n\n  useEffect(async () => {\n    await axiosInstance\n      .get(`partnership/?partner2=${userCompanyEORI}&confirmed=false`)\n      .then((res) => {\n        setopenRequests(res.data);\n        setIsLoading(false);\n      })\n      .catch(function (error) {\n        if (error.response) {\n/*           // The request was made and the server responded with a status code\n          // that falls out of the range of 2xx\n          console.log(error.response.data);\n          console.log(error.response.status);\n          console.log(error.response.headers); */\n        } else if (error.request) {\n          // The request was made but no response was received\n          // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\n          // http.ClientRequest in node.js\n          //console.log(error.request);\n        } else {\n          // Something happened in setting up the request that triggered an Error\n          //console.log(\"Error\", error.message);\n        }\n      });\n  }, [userCompanyEORI, props.reload]);\n\n  function handleDelete() {}\n\n  function handleAccept(partnership_id) {\n    axiosInstance\n      .patch(`partnership/${partnership_id}/`, { confirmed: true })\n      .then((res) => {\n        props.setReload();\n      });\n    props.setSnackbarSuccess(true);\n    props.setSnackbarMessage(\"Partneranfrage angenommen.\");\n    props.handleOpenSnackbar();\n    props.setNewPartner(!props.newPartner);\n    return;\n  }\n\n  return (\n    <>\n      {isLoading ? (\n        <div className=\"text-center\">\n          <MDBSpinner>\n            <span className=\"visually-hidden\">Lädt..</span>\n          </MDBSpinner>\n        </div>\n      ) : (\n        // Akkordian automatisch geöffnet wenn min. 1 Partneranfrage:\n        <Accordion defaultActiveKey={openRequests.length !== 0 ? \"0\" : \"1\"}>\n          {/* // Akkordion öffnet nicht automatisch:\n        // <Accordion defaultActiveKey=\"1\"> */}\n          <Accordion.Item eventKey=\"0\">\n            <Accordion.Header>\n              Ausstehende Partneranfragen (<b>{openRequests.length}</b>)\n            </Accordion.Header>\n            <Accordion.Body>\n              {openRequests.length == 0 ? (\n                \"Es liegen keine Anfragen vor.\"\n              ) : (\n                <MDBTable responsive className=\"align-middle\">\n                  <MDBTableHead>\n                    <tr>\n                      <th scope=\"col\">#</th>\n                      <th scope=\"col\">Unternehmen</th>\n                      <th scope=\"col\">EORI-Nr.</th>\n                      <th scope=\"col\">Anfragedatum</th>\n                      <th scope=\"col\"></th>\n                    </tr>\n                  </MDBTableHead>\n                  <MDBTableBody>\n                    {openRequests.map((openRequests, index) => (\n                      <tr key={index}>\n                        <th scope=\"row\">\n                          <div className=\"\">{index + 1}</div>\n                        </th>\n                        <td>\n                          <div className=\"\">{openRequests.partner.name}</div>\n                        </td>\n                        <td>\n                          <div className=\"\">{openRequests.partner.eori_nr}</div>\n                        </td>\n                        <td>\n                          <div className=\"\">{openRequests.date_added}</div>\n                        </td>\n                        <td>\n                          <div className=\"float-end\">\n                            <MDBBtn\n                              color=\"success\"\n                              outline\n                              rounded\n                              onClick={() => handleAccept(openRequests.id)}\n                            >\n                              <MDBIcon size=\"lg\" fas icon=\"check\" />\n                            </MDBBtn>\n                            <MDBBtn\n                              color=\"danger mx-2\"\n                              className=\"\"\n                              outline\n                              rounded\n                              onClick={() => handleDelete(openRequests.id)}\n                            >\n                              <MDBIcon size=\"lg\" fas icon=\"times\" />\n                            </MDBBtn>\n                          </div>\n                        </td>\n                      </tr>\n                    ))}\n                  </MDBTableBody>\n                </MDBTable>\n              )}\n            </Accordion.Body>\n          </Accordion.Item>\n        </Accordion>\n      )}\n    </>\n  );\n}\n","/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/components/Declaration/Adressdaten.jsx",[],"/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/components/Declaration/Rechnungsdaten.jsx",["462","463"],"import React, { useEffect } from \"react\";\nimport { MDBRow, MDBCol } from \"mdb-react-ui-kit\";\n\nimport TextField from \"@mui/material/TextField\";\nimport Autocomplete from \"@mui/material/Autocomplete\";\n\nimport { Box } from \"@mui/system\";\nimport { Button } from \"@mui/material\";\n\nfunction Rechnungsdaten(props) {\n  // Check Status der Validierung bei Eingabe\n  useEffect(() => {\n    var forms = document.getElementById(\"rechnungsdatenForm\");\n\n    if (forms.checkValidity() == true) {\n      props.setRechnungsdatenValidity(true);\n    }\n  }, [props.usedInvoice]);\n\n  return (\n    <>\n      <h5 className=\"mb-4\">Rechnungsdaten</h5>\n      <form id=\"rechnungsdatenForm\" onSubmit={(e) => e.preventDefault()}>\n        <MDBRow>\n          <MDBCol>\n            <Autocomplete\n              className=\"mb-3\"\n              disablePortal\n              id=\"combo-box-transactioninvoices\"\n              options={props.transactionInvoices}\n              //choose name as label for ui\n              getOptionLabel={(option) => option.description}\n              //when changed, save choosen Partner\n              onChange={(event, value) => {\n                props.setUsedInvoice(value.id);\n              }}\n              sx={{ width: 320 }}\n              renderInput={(params) => (\n                <TextField {...params} required label=\"Rechnungsdokument\" />\n              )}\n            />\n          </MDBCol>\n        </MDBRow>\n        <MDBRow>\n          <MDBCol>\n            <TextField\n              className=\"mb-3\"\n              sx={{ minWidth: 250, maxWidth: 250 }}\n              type=\"date\"\n              id=\"datumRechnung\"\n              name=\"datumRechnung\"\n              label=\"Rechnungsdatum*\"\n              variant=\"outlined\"\n              disabled\n              value={props.fieldValue.datumRechnung}\n              error={\n                props.inputMissingError.datumRechnung ||\n                props.inputWrongError.datumRechnung\n              }\n              helperText={\n                props.inputMissingError.datumRechnung ? \"Pflichtfeld\" : null\n              }\n              onChange={(event) => props.handleFieldChange(event)}\n            />\n          </MDBCol>\n        </MDBRow>\n        <MDBRow>\n          <MDBCol>\n            <TextField\n              sx={{ minWidth: 250, maxWidth: 250 }}\n              className=\"mb-3 me-3\"\n              id=\"gesamtbetrag\"\n              name=\"gesamtbetrag\"\n              label=\"Gesamtbetrag*\"\n              variant=\"outlined\"\n              disabled\n              value={props.fieldValue.gesamtbetrag}\n              error={\n                props.inputMissingError.gesamtbetrag ||\n                props.inputWrongError.gesamtbetrag\n              }\n              helperText={\n                props.inputMissingError.eoriVersender\n                  ? \"Pflichtfeld\"\n                  : props.inputWrongError.eoriVersender\n                  ? \"Zahl eingeben\"\n                  : null\n              }\n              onChange={(event) => props.handleNumberFieldChange(event)}\n            />\n\n            <TextField\n              className=\"mb-3\"\n              id=\"waehrung\"\n              name=\"waehrung\"\n              label=\"Währung*\"\n              variant=\"outlined\"\n              disabled\n              value={props.fieldValue.waehrung}\n              error={\n                props.inputMissingError.waehrung ||\n                props.inputWrongError.waehrung\n              }\n              helperText={\n                props.inputMissingError.waehrung ? \"Pflichtfeld\" : null\n              }\n              onChange={(event) => props.handleFieldChange(event)}\n            />\n          </MDBCol>\n        </MDBRow>\n        <MDBRow>\n          <MDBCol>\n            <TextField\n              className=\"mb-3 me-3\"\n              sx={{ minWidth: 250, maxWidth: 250 }}\n              id=\"lieferkosten\"\n              name=\"lieferkosten\"\n              label=\"Lieferkosten*\"\n              variant=\"outlined\"\n              disabled\n              value={props.fieldValue.lieferkosten}\n              error={\n                props.inputMissingError.lieferkosten ||\n                props.inputWrongError.lieferkosten\n              }\n              helperText={\n                props.inputMissingError.lieferkosten ? \"Pflichtfeld\" : null\n              }\n              onChange={(event) => props.handleNumberFieldChange(event)}\n            />\n          </MDBCol>\n        </MDBRow>\n        <hr className=\"my-4\" />\n        {/* Rechnungsposten müssen gemapt werden: */}\n        {props.rechnungsposten.map((posten) => (\n          <>\n            <MDBRow className=\"mb-3\">\n              <MDBCol>\n                <b>Rechnungsposten:</b>\n              </MDBCol>\n            </MDBRow>\n            <MDBRow>\n              <MDBCol>\n                <TextField\n                  sx={{ minWidth: 400, maxWidth: 400 }}\n                  className=\"mb-3\"\n                  disabled\n                  value={posten.product}\n                  id=\"rechnungspostenProdukt\"\n                  name=\"rechnungspostenProdukt\"\n                  label=\"Produkt*\"\n                  variant=\"outlined\"\n                />\n              </MDBCol>\n            </MDBRow>\n            <MDBRow>\n              <MDBCol>\n                <TextField\n                  sx={{ minWidth: 200, maxWidth: 200 }}\n                  className=\"mb-3 me-3\"\n                  disabled\n                  value={posten.amount}\n                  id=\"rechnungspostenAnzahl\"\n                  name=\"rechnungspostenAnzahl\"\n                  label=\"Anzahl*\"\n                  variant=\"outlined\"\n                />\n                <TextField\n                  className=\"mb-3 me-3\"\n                  disabled\n                  sx={{ minWidth: 200, maxWidth: 200 }}\n                  value={posten.unit}\n                  id=\"rechnungspostenEinheit\"\n                  name=\"rechnungspostenEinheit\"\n                  label=\"Einheit*\"\n                  variant=\"outlined\"\n                />\n                <TextField\n                  className=\"mb-3 me-3\"\n                  sx={{ minWidth: 200, maxWidth: 200 }}\n                  value={posten.price}\n                  disabled\n                  id=\"rechnungspostenPreisEinheit\"\n                  name=\"rechnungspostenPreisEinheit\"\n                  label=\"Preis pro Einheit*\"\n                  variant=\"outlined\"\n                />\n              </MDBCol>\n            </MDBRow>\n          </>\n        ))}\n        <hr className=\"my-4\" />\n\n        {/* Abgaben Berechnung: */}\n        <MDBRow>\n          <p className=\"ms-4\">\n            <b>Zollwert</b> (Geamtbetrag + Lieferkosten) ={\" \"}\n            {(\n              Number(props.fieldValue.gesamtbetrag) +\n              Number(props.fieldValue.lieferkosten)\n            ).toFixed(2)}{\" \"}\n            {props.fieldValue.waehrung}\n          </p>\n          <p className=\"ms-4\">\n            <b>Zollbetrag</b> (Pauschaler Zollsatz 4 %) ={\" \"}\n            {(\n              (Number(props.fieldValue.gesamtbetrag) +\n                Number(props.fieldValue.lieferkosten)) *\n              Number(0.04)\n            ).toFixed(2)}{\" \"}\n            {props.fieldValue.waehrung}\n          </p>\n          <p className=\"ms-4\">\n            <b>Einfuhrumsatzsteuer(EUSt)-Wert</b> (Zollwert + Zollbetrag) ={\" \"}\n            {(\n              (Number(props.fieldValue.gesamtbetrag) +\n                Number(props.fieldValue.lieferkosten)) *\n              Number(1.04)\n            ).toFixed(2)}{\" \"}\n            {props.fieldValue.waehrung}\n          </p>\n          <p className=\"ms-4\">\n            <b>EUSt-Betrag</b> (EUSt-Wert * EUSt-Satz 19 %) ={\" \"}\n            {(\n              (Number(props.fieldValue.gesamtbetrag) +\n                Number(props.fieldValue.lieferkosten)) *\n              Number(1.04) *\n              Number(0.19)\n            ).toFixed(2)}{\" \"}\n            {props.fieldValue.waehrung}\n          </p>\n          <p className=\"ms-4\">\n            <b>Prognostizierte Gesamtabgabe</b> (Zollbetrag + EUSt-Betrag) ={\" \"}\n            <u>\n              {(\n                (Number(props.fieldValue.gesamtbetrag) +\n                  Number(props.fieldValue.lieferkosten)) *\n                  Number(0.04) +\n                (Number(props.fieldValue.gesamtbetrag) +\n                  Number(props.fieldValue.lieferkosten)) *\n                  Number(1.04) *\n                  Number(0.19)\n              ).toFixed(2)}{\" \"}\n              {props.fieldValue.waehrung}\n            </u>\n          </p>\n        </MDBRow>\n        {/* Stepper von Declaration */}\n        <Box sx={{ display: \"flex\", flexDirection: \"row\", pt: 2 }}>\n          <Button\n            color=\"inherit\"\n            disabled={props.activeStep === 0}\n            onClick={props.handleBack}\n            sx={{ mr: 1 }}\n          >\n            Zurück\n          </Button>\n          <Box sx={{ flex: \"1 1 auto\" }} />\n          {props.isStepOptional(props.activeStep) && (\n            <Button color=\"inherit\" onClick={props.handleSkip} sx={{ mr: 1 }}>\n              Überspringen\n            </Button>\n          )}\n\n          {props.activeStep === props.steps.length - 1 ? (\n            <Button onClick={props.handleSubmit}>Abschicken</Button>\n          ) : (\n            <Button type=\"submit\" onClick={props.handleNext}>\n              Weiter\n            </Button>\n          )}\n        </Box>\n      </form>\n    </>\n  );\n}\n\nexport default Rechnungsdaten;\n","/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/components/Declaration/Lieferdaten.jsx",["464","465","466"],"import React, { useEffect } from \"react\";\nimport { MDBRow, MDBCol } from \"mdb-react-ui-kit\";\n\nimport TextField from \"@mui/material/TextField\";\n\nimport InputLabel from \"@mui/material/InputLabel\";\nimport MenuItem from \"@mui/material/MenuItem\";\nimport FormControl from \"@mui/material/FormControl\";\nimport Select, { SelectChangeEvent } from \"@mui/material/Select\";\nimport FormHelperText from \"@mui/material/FormHelperText\";\nimport { Box } from \"@mui/system\";\nimport { Button } from \"@mui/material\";\n\nfunction Lieferdaten(props) {\n  // Check Status der Validierung bei Eingabe\n  useEffect(() => {\n    var forms = document.getElementById(\"lieferdatenForm\");\n\n    if (forms.checkValidity() == true) {\n      props.setLieferdatenValidity(true);\n    }\n  }, [props.fieldValue]);\n\n  return (\n    <>\n      <h5 className=\"mb-4\">Lieferdaten</h5>\n      <form id=\"lieferdatenForm\" onSubmit={(e) => e.preventDefault()}>\n        <MDBRow>\n          <MDBCol>\n            <TextField\n              className=\"mb-3 me-3\"\n              sx={{ minWidth: 400, maxWidth: 600 }}\n              id=\"ausfuhrland\"\n              name=\"ausfuhrland\"\n              label=\"Ausfuhrland\"\n              variant=\"outlined\"\n              error={\n                props.inputMissingError.ausfuhrland ||\n                props.inputWrongError.ausfuhrland\n              }\n              helperText={\n                props.inputMissingError.ausfuhrland ? \"Pflichtfeld\" : null\n              }\n              type=\"text\"\n              required\n              onChange={(event) => props.handleFieldChange(event)}\n            />\n\n            <TextField\n              className=\"mb-3\"\n              sx={{ minWidth: 400, maxWidth: 600 }}\n              id=\"bestimmungsland\"\n              name=\"bestimmungsland\"\n              label=\"Bestimmungsland\"\n              variant=\"outlined\"\n              error={\n                props.inputMissingError.bestimmungsland ||\n                props.inputWrongError.bestimmungsland\n              }\n              helperText={\n                props.inputMissingError.bestimmungsland ? \"Pflichtfeld\" : null\n              }\n              type=\"text\"\n              required\n              onChange={(event) => props.handleFieldChange(event)}\n            />\n          </MDBCol>\n        </MDBRow>\n        <MDBRow className=\"mb-3\">\n          <MDBCol>\n            <FormControl>\n              <InputLabel id=\"bestimmungsbundesland\">\n                Bestimmungsbundesland *\n              </InputLabel>\n              <Select\n                sx={{ minWidth: 300, maxWidth: 900 }}\n                name=\"bestimmungsbundesland\"\n                labelId=\"bestimmungsbundesland\"\n                id=\"bestimmungsbundesland\"\n                value={props.fieldValue.bestimmungsbundesland}\n                label=\"Select\"\n                error={props.inputMissingError.bestimmungsbundesland}\n                required\n                onChange={(event) => props.handleFieldChange(event)}\n              >\n                <MenuItem value=\"\">\n                  <em>Nichts</em>\n                </MenuItem>\n                <MenuItem value={\"Baden-Württemberg\"}>\n                  Baden-Württemberg\n                </MenuItem>\n                <MenuItem value={\"Bayern\"}>Bayern</MenuItem>\n                <MenuItem value={\"Berlin\"}>Berlin</MenuItem>\n                <MenuItem value={\"Brandenburg\"}>Brandenburg</MenuItem>\n                <MenuItem value={\"Bremen\"}>Bremen</MenuItem>\n                <MenuItem value={\"Hamburg\"}>Hamburg</MenuItem>\n                <MenuItem value={\"Hessen\"}>Hessen</MenuItem>\n                <MenuItem value={\"Mecklenburg-Vorpommern\"}>\n                  Mecklenburg-Vorpommern\n                </MenuItem>\n                <MenuItem value={\"Niedersachsen\"}>Niedersachsen</MenuItem>\n                <MenuItem value={\"Nordrhein-Westfalen\"}>\n                  Nordrhein-Westfalen\n                </MenuItem>\n                <MenuItem value={\"Rheinland-Pfalz\"}>Rheinland-Pfalz</MenuItem>\n                <MenuItem value={\"Saarland\"}>Saarland</MenuItem>\n                <MenuItem value={\"Sachsen\"}>Sachsen</MenuItem>\n                <MenuItem value={\"Sachsen-Anhalt\"}>Sachsen-Anhalt</MenuItem>\n                <MenuItem value={\"Schleswig-Holstein\"}>\n                  Schleswig-Holstein\n                </MenuItem>\n                <MenuItem value={\"Thüringen\"}>Thüringen</MenuItem>\n                <MenuItem value={\"Ausland\"}>Für das Ausland bestimmt</MenuItem>\n              </Select>\n              {props.inputMissingError.bestimmungsbundesland ? (\n                <FormHelperText error={true}>Pflichtfeld</FormHelperText>\n              ) : null}\n            </FormControl>\n          </MDBCol>\n        </MDBRow>\n        <hr className=\"my-4\" />\n        <MDBRow className=\"mb-3\">\n          <MDBCol>\n            <FormControl>\n              <InputLabel id=\"befoerderungsmittel\">\n                Art des grenzüberschreitenden Beförderungsmittel *\n              </InputLabel>\n              <Select\n                sx={{ minWidth: 500, maxWidth: 600 }}\n                name=\"befoerderungsmittel\"\n                labelId=\"befoerderungsmittel\"\n                id=\"befoerderungsmittel\"\n                value={props.fieldValue.befoerderungsmittel}\n                label=\"Select\"\n                error={props.inputMissingError.befoerderungsmittel}\n                required\n                onChange={(event) => props.handleFieldChange(event)}\n              >\n                <MenuItem value=\"\">\n                  <em>Nichts</em>\n                </MenuItem>\n                <MenuItem value={\"Lastkraftwagen\"}>Lastkraftwagen</MenuItem>\n                <MenuItem value={\"Schiff\"}>Schiff</MenuItem>\n                <MenuItem value={\"Waggon\"}>Waggon</MenuItem>\n                <MenuItem value={\"Flugzeug\"}>Flugzeug</MenuItem>\n                <MenuItem value={\"PKW\"}>PKW</MenuItem>\n                <MenuItem value={\"Ohne\"}>Ohne</MenuItem>\n                <MenuItem value={\"Andere\"}>Andere</MenuItem>\n              </Select>\n              {props.inputMissingError.befoerderungsmittel ? (\n                <FormHelperText error={true}>Pflichtfeld</FormHelperText>\n              ) : null}\n            </FormControl>\n          </MDBCol>\n        </MDBRow>\n        <MDBRow className=\"mb-3\">\n          <MDBCol>\n            <FormControl>\n              <InputLabel id=\"lieferbedingung\">Lieferbedingung *</InputLabel>\n              <Select\n                sx={{ minWidth: 600, maxWidth: 900 }}\n                name=\"lieferbedingung\"\n                labelId=\"lieferbedingung\"\n                id=\"lieferbedingung\"\n                value={props.fieldValue.lieferbedingung}\n                label=\"Select\"\n                error={props.inputMissingError.lieferbedingung}\n                required\n                onChange={(event) => props.handleFieldChange(event)}\n              >\n                <MenuItem value=\"\">\n                  <em>Nichts</em>\n                </MenuItem>\n                <MenuItem value={\"CFR\"}>Kosten und Fracht</MenuItem>\n                <MenuItem value={\"CIF\"}>\n                  Kosten, Versicherung und Fracht\n                </MenuItem>\n                <MenuItem value={\"DAP\"}>Geliefert benannter Ort</MenuItem>\n                <MenuItem value={\"DAT\"}>Geliefert Terminal</MenuItem>\n                <MenuItem value={\"DDP\"}>Geliefert verzollt</MenuItem>\n                <MenuItem value={\"FOB\"}>Frei an Bord</MenuItem>\n              </Select>\n            </FormControl>\n          </MDBCol>\n        </MDBRow>\n        <MDBRow>\n          <MDBCol>\n            <TextField\n              className=\"mb-3 me-3\"\n              sx={{ minWidth: 400, maxWidth: 600 }}\n              id=\"lieferort\"\n              name=\"lieferort\"\n              label=\"Lieferort\"\n              variant=\"outlined\"\n              error={\n                props.inputMissingError.lieferort ||\n                props.inputWrongError.lieferort\n              }\n              helperText={\n                props.inputMissingError.lieferort ? \"Pflichtfeld\" : null\n              }\n              type=\"text\"\n              required\n              onChange={(event) => props.handleFieldChange(event)}\n            />\n\n            <TextField\n              className=\"mb-3\"\n              sx={{ minWidth: 400, maxWidth: 600 }}\n              id=\"warenort\"\n              name=\"warenort\"\n              label=\"Warenort (optional)\"\n              variant=\"outlined\"\n              onChange={(event) => props.handleFieldChange(event)}\n            />\n          </MDBCol>\n        </MDBRow>\n\n        {/* Stepper von Declaration */}\n        <Box sx={{ display: \"flex\", flexDirection: \"row\", pt: 2 }}>\n          <Button\n            color=\"inherit\"\n            disabled={props.activeStep === 0}\n            onClick={props.handleBack}\n            sx={{ mr: 1 }}\n          >\n            Zurück\n          </Button>\n          <Box sx={{ flex: \"1 1 auto\" }} />\n          {props.isStepOptional(props.activeStep) && (\n            <Button color=\"inherit\" onClick={props.handleSkip} sx={{ mr: 1 }}>\n              Überspringen\n            </Button>\n          )}\n\n          {props.activeStep === props.steps.length - 1 ? (\n            <Button onClick={props.handleSubmit}>Abschicken</Button>\n          ) : (\n            <Button type=\"submit\" onClick={props.handleNext}>\n              Weiter\n            </Button>\n          )}\n        </Box>\n      </form>\n    </>\n  );\n}\n\nexport default Lieferdaten;\n","/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/components/Declaration/AllgemeineAngaben.jsx",["467","468","469"],"import React, { useEffect } from \"react\";\nimport { MDBRow, MDBCol } from \"mdb-react-ui-kit\";\n\nimport TextField from \"@mui/material/TextField\";\nimport Autocomplete from \"@mui/material/Autocomplete\";\n\nimport InputLabel from \"@mui/material/InputLabel\";\nimport MenuItem from \"@mui/material/MenuItem\";\nimport FormControl from \"@mui/material/FormControl\";\nimport Select, { SelectChangeEvent } from \"@mui/material/Select\";\nimport FormHelperText from \"@mui/material/FormHelperText\";\nimport { Box } from \"@mui/system\";\nimport { Button } from \"@mui/material\";\n\nfunction AllgemeineAngaben(props) {\n  // Check Status der Validierung bei Eingabe\n  useEffect(() => {\n    var forms = document.getElementById(\"allgemeineAngabenForm\");\n\n    if (forms.checkValidity() == true) {\n      props.setAllgemeineAngabenValidity(true);\n    }\n  }, [props.fieldValue]);\n\n  return (\n    <>\n      <h5 className=\"mb-4\">Allgemeine Angaben</h5>\n      <form id=\"allgemeineAngabenForm\" onSubmit={(e) => e.preventDefault()}>\n        <MDBRow>\n          <MDBCol className=\"col-md-4\">\n            <TextField\n              className=\"mb-3\"\n              // Für automatische Übernahme aus DB:\n              disabled\n              value={props.fieldValue.auftragsnummer}\n              sx={{ minWidth: 300, maxWidth: 600 }}\n              id=\"auftragsnummer\"\n              name=\"auftragsnummer\"\n              label=\"Auftragsnummer*\"\n              variant=\"outlined\"\n              error={\n                props.inputMissingError.auftragsnummer ||\n                props.inputWrongError.auftragsnummer\n              }\n              helperText={\n                props.inputMissingError.auftragsnummer\n                  ? \"Pflichtfeld\"\n                  : props.inputWrongError.auftragsnummer\n                  ? \"Zahl eingeben\"\n                  : null\n              }\n              onChange={(event) => props.handleNumberFieldChange(event)}\n            />\n          </MDBCol>\n          <MDBCol>\n            <Autocomplete\n              className=\"mb-3\"\n              disablePortal\n              id=\"combo-box-customOffices\"\n              options={props.customOffices}\n              //choose name as label for ui\n              getOptionLabel={(option) => option.name}\n              //when changed, save choosen Partner\n              onChange={(event, value) => {\n                props.setFieldValue((prev) => {\n                  return {\n                    ...prev,\n                    bearbeitendeDienststelle: value?.id,\n                  };\n                });\n                props.setPubkeyCO(value?.publickey);\n              }}\n              sx={{ width: 320 }}\n              renderInput={(params) => (\n                <TextField\n                  {...params}\n                  required\n                  label=\"Bearbeitende Dienststelle\"\n                />\n              )}\n            />\n          </MDBCol>\n        </MDBRow>\n        <MDBRow className=\"mb-3\">\n          <MDBCol>\n            <FormControl>\n              <InputLabel id=\"anmeldungArt\">Art der Anmeldung *</InputLabel>\n              <Select\n                sx={{ minWidth: 600, maxWidth: 900 }}\n                name=\"anmeldungArt\"\n                labelId=\"anmeldungArt\"\n                id=\"anmeldungArt\"\n                value={props.fieldValue.anmeldungArt}\n                label=\"Select\"\n                error={props.inputMissingError.anmeldungArt}\n                required\n                onChange={(event) => props.handleFieldChange(event)}\n              >\n                <MenuItem value=\"\">\n                  <em>Nichts</em>\n                </MenuItem>\n                <MenuItem value={\"CO\"}>\n                  CO: Warenverkehr zwischen Mitgliedsstaaten der Gemeinschaft\n                </MenuItem>\n                <MenuItem value={\"EU\"}>\n                  EU: Warenverkehr zwischen der Gemeinschaft und den\n                  EFTA-/Visegrad-Ländern\n                </MenuItem>\n                <MenuItem value={\"IM\"}>\n                  IM: Warenverkehr zwischen der Gemeinschaft und anderen\n                  Drittländern als den EFTA-Ländern\n                </MenuItem>\n              </Select>\n              {props.inputMissingError.anmeldeart ? (\n                <FormHelperText error={true}>Pflichtfeld</FormHelperText>\n              ) : null}\n            </FormControl>\n          </MDBCol>\n        </MDBRow>\n        <MDBRow className=\"mb-3\">\n          <MDBCol>\n            <FormControl>\n              <InputLabel id=\"geschaeftArt\">Art des Geschäfts *</InputLabel>\n              <Select\n                sx={{ minWidth: 600, maxWidth: 900 }}\n                name=\"geschaeftArt\"\n                labelId=\"geschaeftArt\"\n                id=\"geschaeftArt\"\n                value={props.fieldValue.geschaeftArt}\n                label=\"Select\"\n                error={props.inputMissingError.geschaeftArt}\n                required\n                onChange={(event) => props.handleFieldChange(event)}\n              >\n                <MenuItem value=\"\">\n                  <em>Nichts</em>\n                </MenuItem>\n                <MenuItem value={\"Endgültiger Kauf/Verkauf\"}>\n                  Endgültiger Kauf/Verkauf (gewerblich)\n                </MenuItem>\n                <MenuItem value={\"Direkter Handel mit privaten Verbrauchern\"}>\n                  Direkter Handel (mit privaten Verbrauchern)\n                </MenuItem>\n                <MenuItem value={\"Rücksendung von Waren\"}>\n                  Rücksendung von Waren\n                </MenuItem>\n                <MenuItem value={\"Ersatz (z. B. wegen Garantie)\"}>\n                  Ersatz (z. B. wegen Garantie)\n                </MenuItem>\n                <MenuItem value={\"Finanzierungsleasing (Mietkauf)\"}>\n                  Finanzierungsleasing (Mietkauf)\n                </MenuItem>\n                <MenuItem value={\"Warensendung zur Reperatur\"}>\n                  Warensendung zur Reperatur\n                </MenuItem>\n                <MenuItem value={\"Anderweitige Geschäfte\"}>\n                  Anderweitige Geschäfte\n                </MenuItem>\n              </Select>\n              {props.inputMissingError.geschaeftArt ? (\n                <FormHelperText error={true}>Pflichtfeld</FormHelperText>\n              ) : null}\n            </FormControl>\n          </MDBCol>\n        </MDBRow>\n        <MDBRow>\n          <MDBCol>\n            <FormControl>\n              <InputLabel id=\"zahlungArt\">Zahlungsart (optional)</InputLabel>\n              <Select\n                sx={{ minWidth: 600, maxWidth: 900 }}\n                name=\"zahlungArt\"\n                labelId=\"zahlungArt\"\n                id=\"zahlungArt\"\n                value={props.fieldValue.zahlungArt}\n                label=\"Select\"\n                error={props.inputMissingError.zahlungArt}\n                onChange={(event) => props.handleFieldChange(event)}\n              >\n                <MenuItem value=\"\">\n                  <em>Nichts</em>\n                </MenuItem>\n                <MenuItem value={\"Barzahlung\"}>Barzahlung</MenuItem>\n                <MenuItem value={\"Scheck\"}>Scheck</MenuItem>\n                <MenuItem value={\"Überweisung\"}>Überweisung</MenuItem>\n                <MenuItem value={\"Zahlungsaufschub\"}>Zahlungsaufschub</MenuItem>\n              </Select>\n            </FormControl>\n          </MDBCol>\n        </MDBRow>\n        {/* Stepper von Declaration */}\n        <Box sx={{ display: \"flex\", flexDirection: \"row\", pt: 2 }}>\n          <Button\n            color=\"inherit\"\n            disabled={props.activeStep === 0}\n            onClick={props.handleBack}\n            sx={{ mr: 1 }}\n          >\n            Zurück\n          </Button>\n          <Box sx={{ flex: \"1 1 auto\" }} />\n          {props.isStepOptional(props.activeStep) && (\n            <Button color=\"inherit\" onClick={props.handleSkip} sx={{ mr: 1 }}>\n              Überspringen\n            </Button>\n          )}\n\n          {props.activeStep === props.steps.length - 1 ? (\n            <Button onClick={props.handleSubmit}>Abschicken</Button>\n          ) : (\n            <Button type=\"submit\" onClick={props.handleNext}>\n              Weiter\n            </Button>\n          )}\n        </Box>\n      </form>\n    </>\n  );\n}\n\nexport default AllgemeineAngaben;\n","/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/components/Partners/CompanyModal.jsx",[],["470","471"],"/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/components/Partners/CompanyForm.jsx",["472"],"import React, { useState } from \"react\";\nimport {\n  MDBContainer,\n  MDBRow,\n  MDBCol,\n  MDBInput,\n  MDBBtn,\n} from \"mdb-react-ui-kit\";\nimport useAxiosPrivate from \"../../hooks/useAxiosPrivate\";\n\n\nfunction CompanyForm() {\n  const [eori_nr, setEoriNr] = useState(\"\");\n  const [street, setStreet] = useState(\"\");\n  const [city_code, setZipCode] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [name, setName] = useState(\"\");\n  const [city, setCity] = useState(\"\");\n  const [country_code, setCountry] = useState(\"\");\n\n  const axiosInstance = useAxiosPrivate();\n  \n  function handleSubmit(e) {\n    e.preventDefault();\n    const newCompany = {\n      eori_nr,\n      street,\n      city_code,\n      city,\n      email,\n      name,\n      country_code,\n    };\n    console.log(newCompany);\n    //firma hinzufügen\n    axiosInstance\n      .post(\"/companies/\", newCompany)\n      .then(console.log())\n      .catch((error) => {\n        this.setState({ errorMessage: error.message });\n        console.error(\"There was an error!\", error);\n      })\n      .then(\n        axiosInstance\n          .post(\"/partnership/\", { added_partner: eori_nr })\n          .then(console.log())\n          .catch((error) => {\n            this.setState({ errorMessage: error.message });\n            console.error(\"There was an error!\", error);\n          })\n      );\n    //firma als partner hinterlegen\n  }\n\n  return (\n    <>\n      <form onSubmit={handleSubmit}>\n        <MDBContainer>\n          <MDBInput\n            className=\"my-3\"\n            name=\"eori_nr\"\n            label=\"EORI-Nr.\"\n            type=\"number\"\n            onChange={(e) => setEoriNr(e.target.value)}\n          />\n          <MDBInput\n            className=\"mb-3\"\n            name=\"name\"\n            label=\"Name des Unternehmens\"\n            type=\"text\"\n            onChange={(e) => setName(e.target.value)}\n          />\n          <MDBRow>\n            <MDBCol md=\"9\">\n              <MDBInput\n                className=\"mb-3\"\n                name=\"street\"\n                label=\"Straße\"\n                type=\"text\"\n                onChange={(e) => setStreet(e.target.value)}\n              />\n            </MDBCol>\n          </MDBRow>\n          <MDBRow>\n            <MDBCol md=\"4\">\n              <MDBInput\n                className=\"mb-3\"\n                name=\"zipCode\"\n                label=\"PLZ\"\n                type=\"number\"\n                onChange={(e) => setZipCode(e.target.value)}\n              />\n            </MDBCol>\n            <MDBCol md=\"8\">\n              <MDBInput\n                className=\"mb-3\"\n                name=\"city\"\n                label=\"Stadt\"\n                type=\"text\"\n                onChange={(e) => setCity(e.target.value)}\n              />\n            </MDBCol>\n          </MDBRow>\n          <MDBInput\n            className=\"mb-3\"\n            name=\"country\"\n            label=\"Land\"\n            type=\"text\"\n            onChange={(e) => setCountry(e.target.value)}\n          />\n          <div className=\"d-grid mx-auto\">\n            <MDBBtn className=\"mt-3\" type=\"submit\" color=\"success\">\n              Hinzufügen\n            </MDBBtn>\n          </div>\n        </MDBContainer>\n      </form>\n    </>\n  );\n}\n\nexport default CompanyForm;\n","/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/pages/Zoll/ZollDocuments.jsx",["473","474","475","476","477","478","479"],"import React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport useAxiosPrivate from \"../../hooks/useAxiosPrivate\";\nimport { Link } from \"react-router-dom\";\nimport \"../css/LoadingSpinner.css\";\nimport {\n  MDBContainer,\n  MDBBtn,\n  MDBRow,\n  MDBCol,\n  MDBSpinner,\n  MDBBadge,\n} from \"mdb-react-ui-kit\";\nimport { MDBBreadcrumb, MDBBreadcrumbItem } from \"mdb-react-ui-kit\";\n\nimport Divider from \"@mui/material/Divider\";\nimport Backdrop from \"@mui/material/Backdrop\";\nimport CircularProgress from \"@mui/material/CircularProgress\";\nimport { Snackbar } from \"@mui/material\";\nimport MuiAlert from \"@mui/material/Alert\";\n\nimport ZollDocumentsModal from \"../../components/ZollDocuments/ZollDocumentsModal\";\nimport ZollDocumentTransaction from \"../../components/ZollDocuments/ZollDocumentTransaction\";\nimport DocumentCard from \"../../components/Documents/DocumentCard\";\nimport DeclarationCard from \"../../components/Documents/DeclarationCard\";\n\n// Snackbar Alert\nconst Alert = React.forwardRef(function Alert(props, ref) {\n  return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\n});\n\nfunction ZollDocuments(props) {\n  // Allgemeine Auftragsinformationen\n  const [transactionData, setTransactionData] = useState([]);\n\n  // Informationen der hochgeladenen Dokumente\n  const [documentsData, setDocumentsData] = useState([]);\n  const [declarationData, setDeclarationData] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [totalValue, setTotalValue] = useState(true);\n  const [invoiceData, setInvoiceData] = useState();\n  const [isVerified, setIsVerified] = useState(false);\n  const [open, setOpen] = useState(false);\n\n  const [reload, setReload] = useState(false);\n\n  const axiosInstance = useAxiosPrivate();\n\n  // Speichern der Transaktions-ID aus URL\n  const { declarationID } = useParams();\n\n  useEffect(async () => {\n    await axiosInstance\n      .get(`declaration_auth/` + declarationID)\n      .then((res) => {\n        setDeclarationData(res.data);\n        setDocumentsData(res.data.document);\n        setTransactionData(res.data.transaction);\n        axiosInstance\n          .get(\"invoice/\" + res.data.invoice.id + \"/\")\n          .then((res) => {\n            setTotalValue(res.data.total_value);\n\n            setInvoiceData(res.data);\n          });\n      })\n      .catch((err) => {\n        console.log(\"Keine Zollanmeldung liegt vor\" + err);\n      });\n\n    setIsLoading(false);\n  }, [reload]);\n\n  // State für \"Dokument hinzufügen\" Modal\n  const [addDocumentModal, setAddDocumentModal] = useState(false);\n  // Funktion für Manipulation von Modal (als props weitergereicht)\n  function toggleAddDocumentModal() {\n    setAddDocumentModal(!addDocumentModal);\n  }\n\n  // Anzahl Rechnungs+Zolldokumente call(a) und sonstige Dokumente call(b)\n  function numberInvoiceDocuments(alternative) {\n    let invoiceAndCustoms = 0;\n    let other = 0;\n    for (let i = 0; i < documentsData.length; i++) {\n      if (documentsData[i].type == \"Rechnung\") {\n        invoiceAndCustoms += 1;\n      } else {\n        other += 1;\n      }\n    }\n    if (alternative == \"a\") {\n      return invoiceAndCustoms;\n    }\n    if (alternative == \"b\") {\n      return other;\n    }\n    return;\n  }\n\n  // -- Loading Backdrop --\n  const [openBackdrop, setOpenBackdrop] = React.useState(false);\n  const handleCloseBackdrop = () => {\n    setOpenBackdrop(false);\n  };\n  const handleToggleBackdrop = () => {\n    setOpenBackdrop(!openBackdrop);\n  };\n\n  // -- Snackbar-Alert Rückmeldung --\n  // State: Geöffnet (true) / Geschlossen (false)\n  const [openSnackbar, setOpenSnackbar] = useState(false);\n  // State: Succcess (true) / Error (false)\n  const [snackbarSuccess, setSnackbarSuccess] = useState(true);\n  // State: Snackbar Nachricht\n  const [snackbarMessage, setSnackbarMessage] = useState(\"\");\n\n  // Öffnen der Snackbar\n  const handleOpenSnackbar = () => {\n    setOpenSnackbar(true);\n  };\n\n  // Schließen der Snackbar\n  const handleCloseSnackbar = (event, reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n\n    setOpenSnackbar(false);\n  };\n\n  return (\n    <>\n      {isLoading ? (\n        <div className=\"loadingSpinner\">\n          <MDBSpinner>\n            <span className=\"visually-hidden\">Lädt..</span>\n          </MDBSpinner>\n        </div>\n      ) : (\n        <MDBContainer>\n          <h3>Zollanmeldung Dokumente</h3>\n          <ZollDocumentsModal\n            basicModal={addDocumentModal}\n            setBasicModal={setAddDocumentModal}\n            toggleShow={toggleAddDocumentModal}\n            transactionData={transactionData}\n            setSnackbarSuccess={setSnackbarSuccess}\n            setSnackbarMessage={setSnackbarMessage}\n            handleOpenSnackbar={handleOpenSnackbar}\n            handleCloseSnackbar={handleCloseSnackbar}\n            transactionID_zoll={declarationData.transaction.id}\n            reload={reload}\n            setReload={setReload}\n          />\n          <MDBBreadcrumb>\n            <MDBBreadcrumbItem>\n              <Link to=\"/zoll/declarations\">Aufträge</Link>\n            </MDBBreadcrumbItem>\n            <MDBBreadcrumbItem active>\n              Zollanmeldung-ID {declarationData.id}\n            </MDBBreadcrumbItem>\n          </MDBBreadcrumb>\n          <ZollDocumentTransaction\n            declarationData={declarationData}\n            numberDocuments={documentsData?.length}\n            gesamtbetrag={totalValue}\n            invoiceData={invoiceData}\n            setIsVerified={setIsVerified}\n            isVerified={isVerified}\n            setOpen={setOpen}\n            handleToggleBackdrop={handleToggleBackdrop}\n            handleCloseBackdrop={handleCloseBackdrop}\n            handleOpenSnackbar={handleOpenSnackbar}\n            handleCloseSnackbar={handleCloseSnackbar}\n            setSnackbarSuccess={setSnackbarSuccess}\n            setSnackbarMessage={setSnackbarMessage}\n            reload={reload}\n            setReload={setReload}\n          />\n\n          {/* Navleiste mit Anzahl der Dokumente */}\n          <nav className=\"my-3 navbar navbar-expand-lg navbar-light bg-light\">\n            <MDBContainer>\n              <div>\n                <MDBBadge pill className=\"ms-3\">\n                  {1}\n                </MDBBadge>{\" \"}\n                <b>Zollanmeldung</b>\n                <MDBBadge pill className=\"ms-3\">\n                  {1}\n                </MDBBadge>{\" \"}\n                <b>Rechnungsdokument</b>\n                <MDBBadge pill className=\"ms-3\">\n                  {numberInvoiceDocuments(\"b\")}\n                </MDBBadge>{\" \"}\n                <b>Sonstige Dokumente</b>\n              </div>\n              <MDBBtn\n                className=\"float-end\"\n                color=\"success\"\n                onClick={toggleAddDocumentModal}\n              >\n                Zollbescheid hochladen\n              </MDBBtn>\n            </MDBContainer>\n          </nav>\n          {/* Auflistung der Rechnungsdokumente */}\n          <Divider textAlign=\"left\" className=\"my-4\">\n            <h5>Zollanmeldung</h5>\n          </Divider>\n          <MDBRow>\n            <DeclarationCard\n              anmeldeArt={declarationData.anmeldeArt}\n              gesamtbetrag={totalValue}\n              waehrung={declarationData.invoice.currency}\n              bearbeitendeDienststelle={declarationData.customs_office.name}\n              lieferkosten={declarationData.invoice.transport_costs}\n              documentId={documentsData.documentId}\n              anmelderName={declarationData.importeur.name}\n              issue_date={declarationData.date_added}\n            />\n          </MDBRow>\n          <Divider textAlign=\"left\" className=\"my-4\">\n            <h5>Rechnungsdokument</h5>\n          </Divider>\n          <MDBRow>\n            <MDBCol className=\"mb-4 d-flex justify-content-center\">\n              <DocumentCard\n                key={declarationData.invoice.id}\n                id={declarationData.invoice.id}\n                author_company={declarationData.exporteur.name}\n                author=\"Karl Company\"\n                type=\"Rechnung\"\n                description={declarationData.invoice.description}\n                documentDate={declarationData.invoice.issue_date}\n                uploadDate={declarationData.invoice.upload_date}\n                file={declarationData.invoice.file}\n                isZoll={true}\n              />\n            </MDBCol>\n          </MDBRow>\n\n          {/* Auflistung der sonstigen Dokumente */}\n          {numberInvoiceDocuments(\"b\") !== 0 && (\n            <>\n              <Divider textAlign=\"left\" className=\"mt-5 mb-4\">\n                <h5>Sonstige Dokumente</h5>\n              </Divider>\n              <MDBRow>\n                {documentsData.map(\n                  (documentData) =>\n                    documentData.type !== \"Rechnung\" && (\n                      <React.Fragment>\n                        <MDBCol className=\"mb-4 d-flex justify-content-center\">\n                          <DocumentCard\n                            key={documentData.id}\n                            id={documentData.id}\n                            author={documentData.author}\n                            type={documentData.type}\n                            description={documentData.description}\n                            documentDate={documentData.issue_date}\n                            uploadDate={documentData.upload_date}\n                            file={documentData.file}\n                            confirmed={documentData.confirmed}\n                            isZoll={true}\n                            blockchain_did={documentData.blockchain_id}\n                          />\n                        </MDBCol>\n                      </React.Fragment>\n                    )\n                )}\n              </MDBRow>\n            </>\n          )}\n\n          {/* Loading Backddrop */}\n          <Backdrop\n            sx={{ color: \"#fff\", zIndex: (theme) => theme.zIndex.drawer + 1 }}\n            open={openBackdrop}\n            onClick={handleCloseBackdrop}\n          >\n            <CircularProgress color=\"inherit\" />\n          </Backdrop>\n          {/* Snackbar */}\n          <Snackbar\n            anchorOrigin={{ vertical: \"top\", horizontal: \"right\" }}\n            open={openSnackbar}\n            autoHideDuration={6000}\n            onClose={handleCloseSnackbar}\n            className=\"mt-5\"\n          >\n            {snackbarSuccess == true ? (\n              <Alert\n                onClose={handleCloseSnackbar}\n                severity=\"success\"\n                sx={{ width: \"100%\" }}\n              >\n                {snackbarMessage}\n              </Alert>\n            ) : (\n              <Alert\n                onClose={handleCloseSnackbar}\n                severity=\"error\"\n                sx={{ width: \"100%\" }}\n              >\n                {snackbarMessage}\n              </Alert>\n            )}\n          </Snackbar>\n        </MDBContainer>\n      )}\n    </>\n  );\n}\n\nexport default ZollDocuments;\n","/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/pages/Zoll/ZollTransactions.jsx",["480","481","482"],"/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/components/Declaration/AnmeldungDokumente.jsx",["483","484"],"import React, { useEffect, useState } from \"react\";\nimport { MDBRow, MDBCol } from \"mdb-react-ui-kit\";\n\nimport { Button, FormGroup } from \"@mui/material\";\nimport { Checkbox } from \"@mui/material\";\n\nimport { FormControlLabel } from \"@mui/material\";\nimport { Box } from \"@mui/system\";\n\nfunction AnmeldungDokumente(props) {\n  const handleChange = (documentID) => {\n    if (props.usedDocuments.includes(documentID)) {\n      console.log(`${documentID} bereits enthalten - wird entfernt`);\n      const index = props.usedDocuments.indexOf(documentID);\n      if (index > -1) {\n        props.usedDocuments.splice(index, 1); // 2nd parameter means remove one item only\n      }\n      return;\n    }\n    props.usedDocuments.push(documentID);\n  };\n\n  return (\n    <>\n      <h5 className=\"mb-4\">Weitere Dokumente</h5>\n      <MDBRow>\n        <MDBCol>Sonstige Dokumente auswählen (optional):</MDBCol>\n      </MDBRow>\n      <MDBRow>\n        <FormGroup>\n          {/* Dokumente werden aufgelistet, Rechnungen werden rausgefiltert */}\n          {props.documents\n            .filter((document) => document.type !== \"Rechnung\")\n            .map((document) => (\n              <FormControlLabel\n                control={\n                  <Checkbox onChange={() => handleChange(document.id)} />\n                }\n                label={document.representation}\n              />\n            ))}\n        </FormGroup>\n      </MDBRow>\n      {/* Stepper */}\n      <Box sx={{ display: \"flex\", flexDirection: \"row\", pt: 2 }}>\n        <Button\n          color=\"inherit\"\n          disabled={props.activeStep === 0}\n          onClick={props.handleBack}\n          sx={{ mr: 1 }}\n        >\n          Zurück\n        </Button>\n        <Box sx={{ flex: \"1 1 auto\" }} />\n        {props.isStepOptional(props.activeStep) && (\n          <Button color=\"inherit\" onClick={props.handleSkip} sx={{ mr: 1 }}>\n            Überspringen\n          </Button>\n        )}\n\n        {props.activeStep === props.steps.length - 1 ? (\n          <Button onClick={props.handleSubmit}>Abschicken</Button>\n        ) : (\n          <Button type=\"submit\" onClick={props.handleNext}>\n            Weiter\n          </Button>\n        )}\n      </Box>\n    </>\n  );\n}\n\nexport default AnmeldungDokumente;\n","/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/components/ZollDocuments/ZollDocumentsModal.jsx",["485","486"],"import React, { useState, useEffect} from \"react\";\nimport {\n  MDBBtn,\n  MDBModal,\n  MDBModalDialog,\n  MDBModalContent,\n  MDBModalHeader,\n  MDBModalTitle,\n  MDBModalBody,\n} from \"mdb-react-ui-kit\";\n\nimport OtherDocumentsForm from \"../Documents/OtherDocumentsForm\";\n\nfunction ZollDocumentsModal(props) {\n  // Modal-State wird in Documents gehalten und über props manipuliert.\n\n  //Debug Element\n/*   useEffect(() => {\n    console.log(props.transactionID_zoll)\n  }, []) */\n  return (\n    <>\n      <MDBModal\n        show={props.basicModal}\n        setShow={props.setBasicModal}\n        tabIndex=\"-1\"\n      >\n        <MDBModalDialog size=\"lg\">\n          <MDBModalContent>\n            <MDBModalHeader>\n              <MDBModalTitle>Dokument hinzufügen</MDBModalTitle>\n              <MDBBtn\n                className=\"btn-close\"\n                color=\"none\"\n                onClick={props.toggleShow}\n              ></MDBBtn>\n            </MDBModalHeader>\n            <MDBModalBody>\n              <OtherDocumentsForm\n                isZoll={true}\n                setSnackbarSuccess={props.setSnackbarSuccess}\n                setSnackbarMessage={props.setSnackbarMessage}\n                handleOpenSnackbar={props.handleOpenSnackbar}\n                handleCloseSnackbar={props.handleCloseSnackbar}\n                toggleAddDocumentModal={props.toggleShow}\n                transactionId={props.transactionId}\n                newDocument={props.reload}\n                setNewDocument={props.setReload}\n                transactionID_zoll={props.transactionID_zoll}\n\n              />\n            </MDBModalBody>\n          </MDBModalContent>\n        </MDBModalDialog>\n      </MDBModal>\n    </>\n  );\n}\n\nexport default ZollDocumentsModal;\n","/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/components/ZollDocuments/ZollDocumentTransaction.jsx",["487","488","489","490","491","492","493","494","495","496","497","498","499","500","501","502","503","504","505","506","507","508","509","510"],"import React, { useState } from \"react\";\nimport {\n  MDBBtn,\n  MDBCard,\n  MDBCardBody,\n  MDBCardTitle,\n  MDBCardFooter,\n  MDBCardText,\n  MDBCol,\n  MDBContainer,\n  MDBRow,\n  MDBModal,\n  MDBModalDialog,\n  MDBModalContent,\n  MDBModalHeader,\n  MDBModalTitle,\n  MDBModalBody,\n  MDBModalFooter,\n  MDBIcon,\n} from \"mdb-react-ui-kit\";\nimport { getZollanmeldung } from \"../../Web3Client.js\";\nimport useAxiosPrivate from \"../../hooks/useAxiosPrivate.js\";\n\nimport MuiAlert from \"@mui/material/Alert\";\n// Snackbar Alert\n\nfunction ZollDocumentTransaction(props) {\n  const axiosInstance = useAxiosPrivate();\n\n  const [verified, setVerified] = useState(\n    props.declarationData.status_verificiation\n  );\n\n  const [confirmation, setConfirmation] = useState(\n    props.declarationData.status_confirmation\n  );\n\n  async function abgleichBlockchain(_blockchain_zid) {\n    var crypto = require(\"crypto\");\n    console.log(\"Zollanmeldung ID:\" + _blockchain_zid);\n\n    await getZollanmeldung(_blockchain_zid) //blockchain Transaktion\n      .then((tx) => {\n        console.log(\n          \"Zollwert: \" +\n            tx[0].zollwert +\n            \", \" +\n            (props.invoiceData.transport_costs + props.invoiceData.total_value)\n        );\n        //Abgleich Blockchain-Anwender\n        if (\n          tx[0].gesamtbetrag == props.invoiceData.total_value &&\n          tx[0].zollwert ==\n            props.invoiceData.transport_costs + props.invoiceData.total_value &&\n          tx[0].lieferkosten == props.declarationData.invoice.transport_costs &&\n          tx[0].incoterms == props.declarationData.lieferbedingung &&\n          tx[0].exporteur == props.declarationData.exporteur.publickey &&\n          tx[0].importeur == props.declarationData.importeur.publickey &&\n          tx[0].zoll == props.declarationData.customs_office.publickey &&\n          tx[0].anmelder == props.declarationData.importeur.publickey &&\n          tx[1].gesamtbetrag == props.invoiceData.total_value &&\n          tx[1].waehrung == props.declarationData.invoice.currency &&\n          tx[1].exporteur == props.declarationData.exporteur.publickey &&\n          tx[1].importeur == props.declarationData.importeur.publickey &&\n          tx[1].datum == props.declarationData.invoice.issue_date &&\n          tx[1].rechnungsposten ==\n            crypto\n              .createHash(\"sha512\")\n              .update(props.invoiceData.invoiceItem)\n              .digest(\"hex\") &&\n          tx[1].lieferkosten == props.declarationData.invoice.transport_costs\n        ) {\n          console.log(\"Verifikation: Daten sind korrekt\");\n          // props.setIsVerified(true);\n          axiosInstance.patch(\n            \"declaration_auth/\" + props.declarationData.id + \"/\",\n            { status_verificiation: \"korrekt\" }\n          );\n          props.handleCloseBackdrop();\n          props.setSnackbarSuccess(true);\n          props.setSnackbarMessage(\"Korrektheit der Daten wurde verifiziert.\");\n          props.handleOpenSnackbar();\n          setVerified(\"korrekt\");\n\n          props.setReload(!props.reload);\n          return true;\n        } else {\n          console.log(\"Verifikation: Fehler liegt vor\");\n          axiosInstance.patch(\n            \"declaration_auth/\" + props.declarationData.id + \"/\",\n            { status_verificiation: \"inkorrekt\" }\n          );\n          props.handleCloseBackdrop();\n          props.setSnackbarSuccess(false);\n          props.setSnackbarMessage(\n            \"Warnung: Daten stimmen nicht mit Blockchain überein.\"\n          );\n          props.handleOpenSnackbar();\n          setVerified(\"inkorrekt\");\n\n          props.setReload(!props.reload);\n          return false;\n        }\n      })\n      .catch((err) => {\n        console.log(err);\n        props.handleCloseBackdrop();\n        props.setSnackbarSuccess(false);\n        props.setSnackbarMessage(\"Fehler bei Verifikation der Daten.\");\n        return false;\n      });\n  }\n\n  async function handleVerification() {\n    //setIsVerified(true)\n    props.handleToggleBackdrop();\n    abgleichBlockchain(props.declarationData.blockchain_zid).then((res) => {\n      console.log(res);\n    });\n  }\n\n  function handleConfirmation() {\n    axiosInstance\n      .patch(\"declaration_auth/\" + props.declarationData.id + \"/\", {\n        status_confirmation: \"bestätigt\",\n      })\n      .then((res) => {\n        console.log(\"Zollanmeldung bestätigt\");\n        toggleShowConfirmModal();\n        props.setReload(!props.reload);\n        // Snackbar\n        props.setSnackbarSuccess(true);\n        props.setSnackbarMessage(\"Zollanmeldung bestätigt.\");\n        props.handleOpenSnackbar();\n        setConfirmation(\"bestätigt\");\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  }\n\n  function handleReject() {\n    axiosInstance\n      .patch(\"declaration_auth/\" + props.declarationData.id + \"/\", {\n        status_confirmation: \"abgelehnt\",\n      })\n      .then((res) => {\n        console.log(\"Zollanmeldung abgelehnt\");\n        toggleShowRejectModal();\n        props.setReload(!props.reload);\n        // Snackbar\n        props.setSnackbarSuccess(false);\n        props.setSnackbarMessage(\"Zollanmeldung abgelehnt.\");\n        props.handleOpenSnackbar();\n        setConfirmation(\"abgelehnt\");\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  }\n\n  // Reject Modal State\n  const [rejectModal, setRejectModal] = useState(false);\n\n  function toggleShowRejectModal() {\n    setRejectModal(!rejectModal);\n  }\n\n  // Confirm Modal State\n  const [confirmModal, setConfirmModal] = useState(false);\n\n  function toggleShowConfirmModal() {\n    setConfirmModal(!confirmModal);\n  }\n\n  return (\n    <div>\n      <MDBCard>\n        <MDBCardBody>\n          <MDBContainer>\n            <MDBRow>\n              <MDBCol>\n                <MDBCardTitle>\n                  {props.declarationData.transaction.description}\n                </MDBCardTitle>\n              </MDBCol>\n            </MDBRow>\n            <br />\n          </MDBContainer>\n          <MDBContainer>\n            <MDBRow>\n              <MDBCol>\n                <MDBCardText>\n                  <b>Versender</b>\n                  <br />\n                  {props.declarationData.exporteur.name}\n                  <br />\n                  {props.declarationData.exporteur.street}\n                  <br />\n                  {props.declarationData.exporteur.city_code}{\" \"}\n                  {props.declarationData.exporteur.city},{\" \"}\n                  {props.declarationData.exporteur.country_code}\n                </MDBCardText>\n              </MDBCol>\n              <MDBCol>\n                <MDBCardText>\n                  <b>Empfänger / Anmelder</b>\n                  <br />\n                  {props.declarationData.importeur.name}\n                  <br />\n                  {props.declarationData.importeur.street}\n                  <br />\n                  {props.declarationData.importeur.city_code}{\" \"}\n                  {props.declarationData.importeur.city},{\" \"}\n                  {props.declarationData.importeur.country_code}\n                </MDBCardText>\n              </MDBCol>\n              <MDBCol>\n                <b>Anzahl Dokumente: </b>\n                {/* +2 wegen Zollanmeldungs u. Rechnung */}\n                {props.numberDocuments + 2}\n                <br />\n                <br />\n                <b>Verifikation: </b>\n                {/* {props.declarationData.status_verificiation} */}\n                {verified}\n                <br />\n                <b>Status der Annmeldung: </b>\n                {props.declarationData.status_confirmation}\n              </MDBCol>\n            </MDBRow>\n            <br />\n            <MDBRow>\n              <MDBCol md=\"8\" lg=\"9\">\n                {verified == \"ausstehend\" && confirmation == \"ausstehend\" ? (\n                  <MuiAlert severity=\"info\" sx={{ my: 1 }}>\n                    Neue Anmeldung liegt vor. Verifikation durchführen um\n                    Zollanmeldung zu prüfen und zu bestätigen.\n                  </MuiAlert>\n                ) : null}\n                {verified == \"korrekt\" && confirmation == \"ausstehend\" ? (\n                  <MuiAlert severity=\"success\" sx={{ my: 2 }}>\n                    Korrektheit der Zollanmeldung wurde durch Blockchain\n                    verifiziert. Annahme der Zollanmeldung ist möglich.\n                  </MuiAlert>\n                ) : null}\n                {verified == \"inkorrekt\" && confirmation == \"ausstehend\" ? (\n                  <MuiAlert severity=\"error\" sx={{ my: 2 }}>\n                    Daten stimmen nicht mit Blockchain überein und wurden\n                    möglicherweise manipuliert. Prüfung erforderlich!\n                  </MuiAlert>\n                ) : null}\n                {confirmation == \"bestätigt\" ? (\n                  <MuiAlert severity=\"success\" sx={{ my: 1 }}>\n                    Zollanmeldung angenommen.\n                  </MuiAlert>\n                ) : null}\n                {confirmation == \"abgelehnt\" ? (\n                  <MuiAlert severity=\"error\" sx={{ my: 1 }}>\n                    Zollanmeldung abgelehnt.\n                  </MuiAlert>\n                ) : null}\n              </MDBCol>\n              <MDBCol md=\"4\" lg=\"3\">\n                <div className=\"float-end\">\n                  {/* {props.isVerified ? (\n                    <MDBBtn className=\"my-3\">Daten sind verifiziert</MDBBtn>\n                  ) : ( */}\n                  <MDBBtn onClick={() => handleVerification()} className=\"my-3\">\n                    <MDBIcon\n                      size=\"lg\"\n                      className=\"me-2\"\n                      fas\n                      icon=\"fingerprint\"\n                    />\n                    Daten verifizieren\n                  </MDBBtn>\n                  {/* )} */}\n                </div>\n              </MDBCol>\n            </MDBRow>\n            {confirmation == \"ausstehend\" && (\n              <>\n                {verified !== \"ausstehend\" ? (\n                  <MDBRow>\n                    <MDBBtn\n                      className=\"mx-3 mb-3\"\n                      color=\"success\"\n                      style={{ width: 300 }}\n                      onClick={toggleShowConfirmModal}\n                    >\n                      Anmeldung Bestätigen\n                    </MDBBtn>\n                    <MDBBtn\n                      color=\"danger\"\n                      className=\"mx-3 mb-3\"\n                      style={{ width: 300 }}\n                      onClick={toggleShowRejectModal}\n                    >\n                      Anmeldung Ablehnen\n                    </MDBBtn>\n                  </MDBRow>\n                ) : (\n                  <MDBRow>\n                    <MDBBtn\n                      disabled\n                      className=\"mx-3 mb-3\"\n                      color=\"success\"\n                      style={{ width: 300 }}\n                      onClick={toggleShowConfirmModal}\n                    >\n                      Anmeldung Bestätigen\n                    </MDBBtn>\n                    <MDBBtn\n                      disabled\n                      color=\"danger\"\n                      className=\"mx-3 mb-3\"\n                      style={{ width: 300 }}\n                      onClick={toggleShowRejectModal}\n                    >\n                      Anmeldung Ablehnen\n                    </MDBBtn>\n                  </MDBRow>\n                )}\n              </>\n            )}\n          </MDBContainer>\n          <MDBCardFooter>\n            <MDBRow>\n              <MDBCol md=\"4\">\n                Hinzugefügt: {props.declarationData.transaction.date_added}\n              </MDBCol>\n              <MDBCol md=\"4\">\n                Zuletzt aktualisiert:{\" \"}\n                {props.declarationData.transaction.date_processed}\n              </MDBCol>\n            </MDBRow>\n          </MDBCardFooter>\n        </MDBCardBody>\n      </MDBCard>\n\n      {/* Modal Anmeldung ablehnen */}\n      <MDBModal show={rejectModal} setShow={setRejectModal} tabIndex=\"-1\">\n        <MDBModalDialog>\n          <MDBModalContent>\n            <MDBModalHeader>\n              <MDBModalTitle>Anmeldung ablehnen</MDBModalTitle>\n              <MDBBtn\n                className=\"btn-close\"\n                color=\"none\"\n                onClick={toggleShowRejectModal}\n              ></MDBBtn>\n            </MDBModalHeader>\n            <MDBModalBody>\n              Wollen Sie die Zollanmeldung{\" \"}\n              <i>{props.declarationData.transaction.description}</i> wirklich\n              ablehnen? <br />\n              Diese Auswahl lässt sich nicht rückgängig machen.\n            </MDBModalBody>\n\n            <MDBModalFooter>\n              <MDBBtn color=\"danger\" onClick={handleReject}>\n                Ablehnen\n              </MDBBtn>\n              <MDBBtn outline color=\"danger\" onClick={toggleShowRejectModal}>\n                Abbrechen\n              </MDBBtn>\n            </MDBModalFooter>\n          </MDBModalContent>\n        </MDBModalDialog>\n      </MDBModal>\n\n      {/* Modal Anmeldung annehmen */}\n      <MDBModal show={confirmModal} setShow={setConfirmModal} tabIndex=\"-1\">\n        <MDBModalDialog>\n          <MDBModalContent>\n            <MDBModalHeader>\n              <MDBModalTitle>Anmeldung annehmen</MDBModalTitle>\n              <MDBBtn\n                className=\"btn-close\"\n                color=\"none\"\n                onClick={toggleShowConfirmModal}\n              ></MDBBtn>\n            </MDBModalHeader>\n            <MDBModalBody>\n              Wollen Sie die Zollanmeldung{\" \"}\n              <i>{props.declarationData.transaction.description}</i> wirklich\n              annehmen? <br />\n              Diese Auswahl lässt sich nicht rückgängig machen.\n            </MDBModalBody>\n\n            <MDBModalFooter>\n              <MDBBtn color=\"success\" onClick={handleConfirmation}>\n                Annehmen\n              </MDBBtn>\n              <MDBBtn outline color=\"danger\" onClick={toggleShowConfirmModal}>\n                Abbrechen\n              </MDBBtn>\n            </MDBModalFooter>\n          </MDBModalContent>\n        </MDBModalDialog>\n      </MDBModal>\n    </div>\n  );\n}\n\nexport default ZollDocumentTransaction;\n","/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/components/ZollLayout.js",["511","512","513","514"],"import { Outlet } from \"react-router-dom\";\nimport React from \"react\";\nimport { useState } from \"react\";\nimport Footer from \"./UI/Footer\";\nimport SideNavigation from \"./UI/SideNavigation\";\nimport ZollSideNavigation from \"./ZollUI/ZollSideNavigation\";\nimport ZollTopNavigation from \"./ZollUI/ZollTopNavigation.jsx\";\n\nconst Layout = () => {\n  const [expandedNav, setExpandedNav] = useState(false);\n\n  return (\n    <React.Fragment>\n      {/* Anpassung der TopNavigation Position an Sidebar State */}\n      <div\n        class=\"TopNavigation\"\n        style={{\n          marginBottom: 54,\n          // marginLeft: expandedNav ? 240 : 64,\n          padding: \"0px 0px 0px 0px\",\n          // transition: \"0.2s\",\n        }}\n      >\n        <ZollTopNavigation />\n      </div>\n\n      {/* Anpassung de Content Position an Sidebar State \n              (muss alle Routes einschließen) */}\n      <div\n        class=\"Content\"\n        style={{\n          // marginLeft: expandedNav ? 240 : 64,\n          padding: \"0px 20px 70px 20px\",\n          transition: \"0.2s\",\n        }}\n      >\n        <main className=\"App\">\n          <Outlet />\n        </main>\n      </div>\n      <Footer />\n    </React.Fragment>\n  );\n};\n\nexport default Layout;\n","/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/components/ZollUI/ZollSideNavigation.jsx",[],"/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/components/ZollTransactions/ZollTransaction.jsx",[],"/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/pages/Search.jsx",["515","516","517","518","519"],"import React, { useEffect, useState } from \"react\";\nimport {\n  MDBContainer,\n  MDBRow,\n  MDBBtn,\n  MDBCol,\n  MDBBadge,\n} from \"mdb-react-ui-kit\";\nimport { TextField } from \"@mui/material\";\nimport useAxiosPrivate from \"../hooks/useAxiosPrivate\";\nimport Partner from \"../components/Partners/Partner\";\nimport Transaction from \"../components/Transactions/Transaction\";\nimport { Divider } from \"@mui/material\";\nimport { useSearchParams } from \"react-router-dom\";\n\nfunction Search(props) {\n  const axiosInstance = useAxiosPrivate();\n\n  const [query, setQuery] = useState(\"\");\n\n  const [resultsTransaction, setResultsTransactions] = useState([]);\n\n  const [resultsPartnerships, setResultsPartnerships] = useState([]);\n  const [documentsData, setDocumentsData] = useState([]);\n  const [declarationData, setDeclarationData] = useState([]);\n\n  const [activeSearch, setActiveSearch] = useState(false);\n\n  const { search } = window.location;\n  let [searchParams, setSearchParams] = useSearchParams();\n\n  useEffect(() => {\n    setQuery(suchbegriff);\n  }, []);\n\n  let suchbegriff = searchParams.get(\"\");\n\n  useEffect(async () => {\n    if (suchbegriff) {\n      let queryFix = suchbegriff;\n      setQuery(suchbegriff);\n      handleSearch(queryFix);\n    }\n  }, [suchbegriff]);\n\n  //Bisher Suche nur nach Transaktionen\n  function handleSearch(queryset) {\n    axiosInstance.get(\"transactions/?search=\" + queryset).then((res) => {\n      console.log(res);\n      setResultsTransactions(res.data);\n    });\n    axiosInstance.get(\"partnership/?search=\" + queryset).then((res) => {\n      console.log(res);\n      setResultsPartnerships(res.data);\n    });\n    console.log(\"hier steht eine suche mit dem suchwort\" + queryset);\n    // Dokumente abrufen\n\n    axiosInstance.get(\"documents/\").then((res) => {\n      setDocumentsData(res.data);\n    });\n    // Zollanmeldungen abrufen\n\n    axiosInstance.get(\"declaration/\").then((res) => {\n      setDeclarationData(res.data);\n      console.log(res.data);\n    });\n\n    setActiveSearch(true);\n  }\n\n  return (\n    <div>\n      <MDBContainer>\n        <MDBRow>\n          <h3>Suche</h3>\n        </MDBRow>\n        <MDBRow>\n          <MDBCol>\n            <TextField\n              className=\"my-3\"\n              sx={{ width: 550 }}\n              id=\"suchbegriff\"\n              name=\"suchbegriff\"\n              label=\"Suchbegriff\"\n              variant=\"outlined\"\n              value={query}\n              onChange={(event) => {\n                setActiveSearch(false);\n                setQuery(event.target.value);\n              }}\n            />\n          </MDBCol>\n          <MDBCol>\n            <MDBBtn\n              className=\"mt-4 float-start\"\n              onClick={() => handleSearch(query)}\n            >\n              {\" \"}\n              Abschicken\n            </MDBBtn>\n          </MDBCol>\n        </MDBRow>\n\n        {activeSearch && (\n          <>\n            <MDBRow>\n              <h5 className=\"mt-3\">\n                Suche nach Aufträgen/Partnern, die folgenden Begriff enthalten:{\" \"}\n                <i>{query}</i>\n              </h5>\n            </MDBRow>\n            <Divider textAlign=\"left\" className=\"mt-5 mb-4\">\n              <h5>Überblick über die Ergebnisse</h5>\n            </Divider>\n            <MDBBadge pill className=\"ms-3\">\n              {resultsPartnerships.length}\n            </MDBBadge>\n            <b> Partnerschaften</b>\n            <MDBBadge pill className=\"ms-3\">\n              {resultsTransaction.length}\n            </MDBBadge>\n            <b> Aufträge</b>\n            <Divider textAlign=\"left\" className=\"mt-5 mb-4\">\n              <h5>Ergebnisse für Aufträge</h5>\n            </Divider>\n            <MDBRow>\n              {resultsTransaction.map((transactionData) => (\n                <React.Fragment>\n                  <Transaction\n                    key={transactionData.id}\n                    id={transactionData.id}\n                    title={transactionData.description}\n                    added={transactionData.date_added}\n                    exportAddress={transactionData.partnership.partner.name}\n                    exportStreet={transactionData.partnership.partner.street}\n                    exportCity={transactionData.partnership.partner.city}\n                    exportCountry={\n                      transactionData.partnership.partner.country_code\n                    }\n                    importAddress={transactionData.importAddress}\n                    importStreet={transactionData.importStreet}\n                    importCity={transactionData.importCity}\n                    importCountry={transactionData.importCountry}\n                    stakeholderCount={transactionData.stakeholderCount}\n                    lastChange={transactionData.date_processed}\n                    status={transactionData.status}\n                    timestamp_added={transactionData.timestamp_added}\n                    timestamp_processed={transactionData.timestamp_processed}\n                    documentsData={documentsData}\n                    declarationData={declarationData}\n                  />\n                  <br />\n                </React.Fragment>\n              ))}\n              <Divider textAlign=\"left\" className=\"mt-5 mb-4\">\n                <h5>Ergebnisse für Partnerschaften</h5>\n              </Divider>\n              {resultsPartnerships.map((partner) => (\n                <React.Fragment>\n                  <Partner\n                    key={partner.partner.eori_nr}\n                    id={partner.partner.eori_nr}\n                    id_relation={partner.id}\n                    title={partner.partner.name}\n                    added={partner.date_added}\n                    addressStreet={partner.partner.street}\n                    addressCity={partner.partner.city}\n                    addressCountry={partner.partner.country_code}\n                    email={partner.partner.email}\n                    phone={partner.partner.phone}\n                    eori={partner.partner.eori_nr}\n                  />\n                  <br />\n                </React.Fragment>\n              ))}\n              ;\n            </MDBRow>\n          </>\n        )}\n      </MDBContainer>\n    </div>\n  );\n}\n\nexport default Search;\n","/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/components/Documents/DeclarationCard.jsx",[],"/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/pages/Unauthorized.jsx",[],"/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/components/Documents/PreviewOther.jsx",["520","521","522","523","524"],"import React, { useState, useEffect } from \"react\";\nimport {\n  MDBCard,\n  MDBCardBody,\n  MDBCardHeader,\n  MDBBtn,\n  MDBRow,\n  MDBCol,\n  MDBIcon,\n  MDBBreadcrumb,\n  MDBBreadcrumbItem,\n} from \"mdb-react-ui-kit\";\nimport { Link } from \"react-router-dom\";\nimport useAuth from \"../../hooks/useAuth\";\nimport { useParams } from \"react-router-dom\";\n\n// PDF-Reader\nimport { Document, Page } from \"react-pdf\";\nimport { pdfjs } from \"react-pdf\";\npdfjs.GlobalWorkerOptions.workerSrc = `//unpkg.com/pdfjs-dist@${pdfjs.version}/legacy/build/pdf.worker.min.js`;\n\nconst url =\n  \"https://cors-anywhere.herokuapp.com/http://www.pdf995.com/samples/pdf.pdf\";\n\nexport default function PreviewOther(props) {\n  // -- DATENFELDER --\n\n  // Auftrag Metadaten\n  const [documentMetadata, setDocumentMetadata] = React.useState({\n    documentId: props.documentData.id,\n    transactionId: props.documentData.transaction,\n    documentType: props.documentData.type,\n    dateAdded: props.documentData.upload_date,\n    description: props.documentData.description,\n  });\n\n  const [isZoll, setIsZoll] = useState(false);\n  const { auth } = useAuth();\n  const { transactionId, declarationID } = useParams();\n\n  //Prüfen ob Betrachter Zoll ist\n  useEffect(() => {\n    if (auth.role == \"custom_officer\") {\n      setIsZoll(true);\n    }\n  }, [auth.role]);\n\n  const [numPages, setNumPages] = useState(null);\n  const [pageNumber, setPageNumber] = useState(1);\n\n  function onDocumentLoadSuccess({ numPages }) {\n    setNumPages(numPages);\n  }\n\n  function changePage(offSet) {\n    setPageNumber((prevPageNumber) => prevPageNumber + offSet);\n  }\n\n  function changePageBack() {\n    changePage(-1);\n  }\n\n  function changePageNext() {\n    changePage(+1);\n  }\n\n  return (\n    <>\n      <h3>Dokument: Sonstige</h3>\n      {isZoll ? (\n        <MDBBreadcrumb>\n          <MDBBreadcrumbItem>\n            <Link to=\"/zoll/declarations/\">Zollanmeldungen</Link>\n          </MDBBreadcrumbItem>\n          <MDBBreadcrumbItem>\n            <Link to={\"/zoll/declarations/\" + declarationID}>\n              Zollanmeldungs-ID {declarationID}\n            </Link>\n          </MDBBreadcrumbItem>\n          <MDBBreadcrumbItem active>\n            Dokumenten-ID {documentMetadata.documentId}\n          </MDBBreadcrumbItem>\n        </MDBBreadcrumb>\n      ) : (\n        <MDBBreadcrumb>\n          <MDBBreadcrumbItem>\n            <Link to=\"/transactions\">Aufträge</Link>\n          </MDBBreadcrumbItem>\n          <MDBBreadcrumbItem>\n            <Link to={\"/transactions/\" + documentMetadata.transactionId}>\n              Auftrags-ID {documentMetadata.transactionId}\n            </Link>\n          </MDBBreadcrumbItem>\n          <MDBBreadcrumbItem active>\n            Dokumenten-ID {documentMetadata.documentId}\n          </MDBBreadcrumbItem>\n        </MDBBreadcrumb>\n      )}\n      <MDBCard style={{ minHeight: \"1000px\" }}>\n        <MDBCardHeader>\n          <h5>\n            {documentMetadata.documentType} für Auftrags-ID{\" \"}\n            {documentMetadata.transactionId}\n          </h5>\n        </MDBCardHeader>\n        <MDBCardBody>\n          <MDBRow>\n            <MDBCol className=\"col-md-8\">\n              <div\n                className=\"d-flex justify-content-center\"\n                style={{ minHeight: \"800px\" }}\n              >\n                <Document\n                  // PDF muss Objekt sein\n                  file={{\n                    url: props.fileLink,\n                  }}\n                  onLoadSuccess={onDocumentLoadSuccess}\n                >\n                  <Page pageNumber={pageNumber} />\n                </Document>\n              </div>\n              <div className=\"d-flex justify-content-center\">\n                <p>\n                  Seite {pageNumber} von {numPages}\n                </p>\n              </div>\n              {pageNumber > 1 ? (\n                <MDBBtn\n                  outline\n                  className=\"float-start me-3\"\n                  onClick={changePageBack}\n                >\n                  <MDBIcon className=\"me-1\" size=\"lg\" fas icon=\"chevron-left\" />\n                  Letzte Seite\n                </MDBBtn>\n              ) : (\n                <MDBBtn\n                  outline\n                  className=\"float-start me-3\"\n                  disabled\n                  onClick={changePageBack}\n                >\n                  <MDBIcon className=\"me-1\" size=\"lg\" fas icon=\"chevron-left\" />\n                  Letzte Seite\n                </MDBBtn>\n              )}\n              {pageNumber < numPages ? (\n                <MDBBtn outline className=\"float-end\" onClick={changePageNext}>\n                  Nächste Seite\n                  <MDBIcon\n                    className=\"ms-1\"\n                    size=\"lg\"\n                    fas\n                    icon=\"chevron-right\"\n                  />\n                </MDBBtn>\n              ) : (\n                <MDBBtn\n                  outline\n                  className=\"float-end\"\n                  disabled\n                  onClick={changePageNext}\n                >\n                  Nächste Seite\n                  <MDBIcon\n                    className=\"ms-1\"\n                    size=\"lg\"\n                    fas\n                    icon=\"chevron-right\"\n                  />\n                </MDBBtn>\n              )}\n            </MDBCol>\n            <MDBCol\n              className=\"col-md-4\"\n              style={{ border: \"3px solid #cccccc\", height: 500 }}\n            >\n              <p className=\"mt-4 ms-3\">\n                <b>Auftrags-ID: </b>\n                {documentMetadata.transactionId}\n              </p>\n              <p className=\"ms-3\">\n                <b>Dokumenten-ID: </b>\n                {documentMetadata.documentId}\n              </p>\n              <p className=\"ms-3\">\n                <b>Dokumententyp: </b>\n                {documentMetadata.documentType}\n              </p>\n              <p className=\"ms-3\">\n                <b>Hochgeladen am: </b>\n                {documentMetadata.dateAdded}\n              </p>\n\n              <p className=\"ms-3 mb-5\">\n                <b>Beschreibung: </b>\n                {documentMetadata.description == \"\" ? (\n                  <i>Es liegt keine Beschreibung vor.</i>\n                ) : (\n                  documentMetadata.description\n                )}\n              </p>\n\n              <MDBBtn download href={props.fileLink} className=\"ms-3 mt-2\">\n                <MDBIcon fas icon=\"download\" size=\"lg\" className=\"me-1\" />\n                Download\n              </MDBBtn>\n            </MDBCol>\n          </MDBRow>\n        </MDBCardBody>\n      </MDBCard>\n    </>\n  );\n}\n","/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/components/Dashboard/DashboardDocumentCard.jsx",["525","526","527"],"import { React, useState, useEffect } from \"react\";\nimport {\n  MDBCard,\n  MDBCardBody,\n  MDBCardTitle,\n  MDBCardText,\n  MDBCardHeader,\n  MDBCardFooter,\n  MDBBtn,\n} from \"mdb-react-ui-kit\";\n\nimport { Link } from \"react-router-dom\";\n\n\nfunction DashboardDocumentCard(props) {\n\n  return (\n    <>\n      <MDBCard\n        className=\"me-3 mb-2\"\n        style={{ minHeight: \"300px\", width: \"300px\" }}\n      >\n        <MDBCardHeader>Auftrags-ID {props.document.transaction}</MDBCardHeader>\n        <MDBCardBody>\n          <MDBCardTitle>{props.document.type} ({props.document.issue_date})</MDBCardTitle>\n          <MDBCardText className=\"my-4\">\n            {props.document.description == \"\" ? <br /> : props.document.description}\n          </MDBCardText>\n          <Link\n            style={{ display: \"block\", margin: \"1rem 0\" }}\n            to={\"/transactions/\" + props.document.transaction.toString() + \"/document/\" + props.document.id.toString()}\n          >\n            <MDBBtn outline>\n              Anzeigen\n            </MDBBtn>\n          </Link>\n        </MDBCardBody>\n        <MDBCardFooter className=\"text-muted\">\n          Hochgeladen am: {props.document.upload_date}\n          <br />\n          von {props.document.owner.employee.company.name} ({props.document.owner.username})\n        </MDBCardFooter>\n      </MDBCard>\n    </>\n  );\n}\n\nexport default DashboardDocumentCard;\n","/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/components/Documents/ImporteurDocumentsModal.jsx",[],"/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/pages/DocumentDetail.jsx",["528","529","530"],"import React, { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport useAxiosPrivate from \"../hooks/useAxiosPrivate\";\nimport PreviewInvoice from \"../components/Documents/PreviewInvoice\";\nimport PreviewOther from \"../components/Documents/PreviewOther\";\nimport { MDBSpinner } from \"mdb-react-ui-kit\";\nimport \"./css/LoadingSpinner.css\";\n\nfunction DocumentDetail() {\n  //URL Parameter abfragen\n  const { documentID } = useParams();\n  const axiosInstance = useAxiosPrivate();\n  const [documentData, setDocumentData] = useState();\n  const [invoiceData, setInvoiceData] = useState();\n  const [transactionData, setTransactionData] = useState();\n  const [isLoading, setIsLoading] = useState(true);\n  const [fileLink, setFileLink] = useState();\n\n  const [isInvoice, setIsInvoice] = useState(false);\n\n  useEffect(() => {\n    axiosInstance.get(`/documents/${documentID}/`).then((res) => {\n      setDocumentData(res.data);\n      axiosInstance\n        .get(`/transactions/${res.data.transaction}/`)\n        .then((resT) => {\n          setTransactionData(resT.data);\n          if (res.data.type == \"Rechnung\") {\n            axiosInstance.get(`/invoice/${documentID}/`).then((res) => {\n              setInvoiceData(res.data);\n              if (res.data.type == \"Rechnung\") {\n                setIsInvoice(true);\n                setIsLoading(false);\n              }\n            });\n          } else {\n            axiosInstance.get(`/file/${res.data.file}/`).then((resF) => {\n              setFileLink(resF.data.file);\n              setIsLoading(false);\n            });\n          }\n        });\n    });\n  }, []);\n\n  useEffect(() => {}, []);\n\n  return (\n    <>\n      {isLoading ? (\n        <div className=\"loadingSpinner\">\n          <MDBSpinner>\n            <span className=\"visually-hidden\">Lädt..</span>\n          </MDBSpinner>\n        </div>\n      ) : isInvoice ? (\n        <PreviewInvoice\n          invoiceData={invoiceData}\n          transactionData={transactionData}\n        ></PreviewInvoice>\n      ) : (\n        <PreviewOther\n          documentData={documentData}\n          transactionData={transactionData}\n          fileLink={fileLink}\n        ></PreviewOther>\n      )}\n    </>\n  );\n}\n\nexport default DocumentDetail;\n","/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/components/Documents/PreviewInvoice.jsx",["531","532","533","534","535"],"import React, { useEffect, useState } from \"react\";\nimport {\n  MDBCard,\n  MDBCardBody,\n  MDBCardText,\n  MDBCardHeader,\n  MDBRow,\n  MDBCol,\n  MDBBreadcrumb,\n  MDBBreadcrumbItem,\n} from \"mdb-react-ui-kit\";\nimport { Link } from \"react-router-dom\";\nimport useAuth from \"../../hooks/useAuth\";\nimport { useParams } from \"react-router-dom\";\n\nexport default function PreviewInvoice(props) {\n  const [isZoll, setIsZoll] = useState(false);\n  const { auth } = useAuth();\n  const { transactionId, declarationID } = useParams();\n\n  useEffect(() => {\n    if (auth.role == \"custom_officer\") {\n      setIsZoll(true);\n    }\n  }, [auth.role]);\n  // Auftrag Metadaten\n  const [auftragMetadaten, setAuftragMetadaten] = React.useState({\n    documentId: props.invoiceData.id,\n    transactionId: props.invoiceData.transaction,\n    documentType: \"Rechnung\",\n    dateAdded: props.transactionData.upload_date,\n    description: props.invoiceData.description,\n  });\n\n  // State des Inhalts der Felder\n  const [fieldValue, setFieldValue] = React.useState({\n    //Rechnungsdaten\n    datumRechnung: props.invoiceData.issue_date,\n    gesamtbetrag: props.invoiceData.total_value,\n    waehrung: props.invoiceData.currency,\n    lieferkosten: props.invoiceData.transport_costs,\n    beschreibung: props.invoiceData.description,\n  });\n  //Durch dieses Array von Objekten mappen\n  const Rechnungsposten = props.invoiceData.invoiceItem;\n\n  return (\n    <>\n      <h3>Dokument: Rechnung</h3>\n      {isZoll ? (\n        <MDBBreadcrumb>\n          <MDBBreadcrumbItem>\n            <Link to=\"/zoll/declarations/\">Zollanmeldungen</Link>\n          </MDBBreadcrumbItem>\n          <MDBBreadcrumbItem>\n            <Link to={\"/zoll/declarations/\" + declarationID}>\n              Zollanmeldungs-ID {declarationID}\n            </Link>\n          </MDBBreadcrumbItem>\n          <MDBBreadcrumbItem active>\n            Dokumenten-ID {auftragMetadaten.documentId}\n          </MDBBreadcrumbItem>\n        </MDBBreadcrumb>\n      ) : (\n        <MDBBreadcrumb>\n          <MDBBreadcrumbItem>\n            <Link to=\"/transactions\">Aufträge</Link>\n          </MDBBreadcrumbItem>\n          <MDBBreadcrumbItem>\n            <Link to={\"/transactions/\" + auftragMetadaten.transactionId}>\n              Auftrags-ID {auftragMetadaten.transactionId}\n            </Link>\n          </MDBBreadcrumbItem>\n          <MDBBreadcrumbItem active>\n            Dokumenten-ID {auftragMetadaten.documentId}\n          </MDBBreadcrumbItem>\n        </MDBBreadcrumb>\n      )}\n      <MDBCard style={{ minHeight: 600 }}>\n        <MDBCardHeader>\n          <h5>Rechnung für Auftrags-ID {auftragMetadaten.transactionId}</h5>\n        </MDBCardHeader>\n        <MDBCardBody>\n          <MDBRow>\n            <MDBCol className=\"col-md-8\">\n              <MDBCardText>\n                <p>\n                  <b>Rechnungsdatum: </b>\n                  {fieldValue.datumRechnung}\n                </p>\n                <p>\n                  <b>Gesamtbetrag: </b>\n                  {fieldValue.gesamtbetrag} {fieldValue.waehrung}\n                </p>\n                <p>\n                  <b>Lieferkosten: </b>\n                  {fieldValue.lieferkosten} {fieldValue.waehrung}\n                </p>\n\n                {Rechnungsposten.map((posten) => (\n                  <>\n                    <hr className=\"my-4\" />\n                    <h6>\n                      <u>Rechnungsposten 1</u>\n                    </h6>\n                    <p>\n                      <b>Produkt: </b>\n                      {posten.product}\n                    </p>\n                    <p>\n                      <b>Anzahl: </b>\n                      {posten.amount}\n                    </p>\n                    <p>\n                      <b>Einheit: </b>\n                      {posten.unit}\n                    </p>\n                    <p>\n                      <b>Preis pro Einheit: </b>\n                      {posten.price.toFixed(2)} {fieldValue.waehrung}\n                    </p>\n                  </>\n                ))}\n              </MDBCardText>\n            </MDBCol>\n            <MDBCol\n              className=\"col-md-4\"\n              style={{ border: \"3px solid #cccccc\", height: 500 }}\n            >\n              <p className=\"mt-4 ms-3\">\n                <b>Auftrags-ID: </b>\n                {auftragMetadaten.transactionId}\n              </p>\n              <p className=\"ms-3\">\n                <b>Dokumenten-ID: </b>\n                {auftragMetadaten.documentId}\n              </p>\n              <p className=\"ms-3\">\n                <b>Dokumententyp: </b>\n                {auftragMetadaten.documentType}\n              </p>\n              <p className=\"ms-3\">\n                <b>Hochgeladen am: </b>\n                {auftragMetadaten.dateAdded}\n              </p>\n              <p className=\"ms-3\">\n                <b>Hochgeladen von: </b>\n                {auftragMetadaten.author}\n              </p>\n              <p className=\"ms-3 mb-5\">\n                <b>Beschreibung: </b>\n                {auftragMetadaten.description == \"\" ? (\n                  <i>Es liegt keine Beschreibung vor.</i>\n                ) : (\n                  auftragMetadaten.description\n                )}\n              </p>\n            </MDBCol>\n          </MDBRow>\n        </MDBCardBody>\n      </MDBCard>\n    </>\n  );\n}\n","/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/components/Documents/PreviewDeclaration.jsx",["536","537","538","539","540","541","542","543","544"],"import React, { useEffect, useState } from \"react\";\nimport \"../../pages/css/LoadingSpinner.css\";\nimport {\n  MDBCard,\n  MDBCardBody,\n  MDBCardTitle,\n  MDBCardText,\n  MDBCardHeader,\n  MDBTabs,\n  MDBTabsItem,\n  MDBTabsLink,\n  MDBBtn,\n  MDBRow,\n  MDBCol,\n  MDBTabsPane,\n  MDBTabsContent,\n  MDBIcon,\n  MDBSpinner,\n  MDBBreadcrumb,\n  MDBBreadcrumbItem,\n} from \"mdb-react-ui-kit\";\nimport { Link } from \"react-router-dom\";\nimport { useParams } from \"react-router-dom\";\nimport axiosInstance from \"../../axiosApi\";\nimport useAuth from \"../../hooks/useAuth\";\n\nexport default function PreviewDelacration() {\n  const { transactionId, declarationID } = useParams();\n  const [customDeclaration, setCustomDeclaration] = useState({});\n  const [isLoading, setIsLoading] = useState(true);\n  const [rechnungsposten, setRechnungsposten] = React.useState([]);\n  const [fieldValue, setFieldValue] = React.useState({});\n  const [invoiceData, setInvoiceData] = useState();\n\n  const [auftragMetadaten, setAuftragMetadaten] = React.useState({});\n\n  const [isZoll, setIsZoll] = useState(false);\n  const { auth } = useAuth();\n\n  //Prüfen ob Betrachter Zoll ist\n  useEffect(() => {\n    if (auth.role == \"custom_officer\") {\n      setIsZoll(true);\n    }\n  }, [auth.role]);\n\n  // DB Call\n  useEffect(async () => {\n    var link;\n    if (transactionId == undefined) {\n      link = \"/declaration_auth/\" + declarationID + \"/\";\n    } else {\n      link = \"/declaration_auth/?transaction=\" + transactionId;\n    }\n    await axiosInstance.get(link).then((res) => {\n      if (res.data[0] != undefined) {\n        res.data = res.data[0];\n      }\n      setCustomDeclaration(res.data);\n      setRechnungsposten(res.data.invoice.invoiceItem);\n      axiosInstance\n        .get(\"/invoice/\" + res.data.invoice.id + \"/\")\n        .then((resI) => {\n          setInvoiceData(resI.data);\n        });\n    });\n    setIsLoading(false);\n  }, []);\n\n  //Werte im Timing richtig einspeichern und ggf. neu rendern wenn sie nicht vorliegen\n\n  useEffect(async () => {\n    await setFieldValue({\n      auftragsnummer: customDeclaration?.transaction?.id,\n      bearbeitendeDienststelle: customDeclaration?.customs_office?.name,\n      anmeldungArt: customDeclaration?.anmeldeArt,\n      geschaeftArt: customDeclaration?.geschaeftArt,\n      zahlungArt: customDeclaration?.zahlungsart,\n      // Adressdaten Versender\n      eoriVersender: customDeclaration?.exporteur?.eori_nr,\n      // nameVersender: \"\",\n      // vornameVersender: \"\",\n      firmaVersender: customDeclaration?.exporteur?.name,\n      strasseVersender: customDeclaration?.exporteur?.street,\n      plzVersender: customDeclaration?.exporteur?.city_code,\n      ortVersender: customDeclaration?.exporteur?.city,\n      staatVersender: customDeclaration?.exporteur?.country_code,\n      telefonVersender: customDeclaration?.exporteur?.phone,\n      emailVersender: customDeclaration?.exporteur?.email,\n      // Adressdaten Anmelder\n      eoriAnmelder: customDeclaration?.importeur?.eori_nr,\n      // nameAnmelder: \"\",\n      // vornameAnmelder: \"\",\n      firmaAnmelder: customDeclaration?.importeur?.name,\n      strasseAnmelder: customDeclaration?.importeur?.street,\n      plzAnmelder: customDeclaration?.importeur?.city_code,\n      ortAnmelder: customDeclaration?.importeur?.city,\n      staatAnmelder: customDeclaration?.importeur?.country_code,\n      telefonAnmelder: customDeclaration?.importeur?.phone,\n      emailAnmelder: customDeclaration?.importeur?.email,\n      // Lieferdaten\n      ausfuhrland: customDeclaration?.ausfuhrland,\n      bestimmungsland: customDeclaration?.bestimmungsland,\n      //bestimmungsbundesland: \"Niedersachsen\",\n      befoerderungsmittel: customDeclaration?.befoerderungsmittel,\n      lieferbedingung: customDeclaration?.lieferbedingung,\n      lieferort: customDeclaration?.lieferort,\n      warenort: customDeclaration?.warenort,\n\n      //Rechnungsdaten\n      datumRechnung: customDeclaration?.invoice?.issue_date,\n      gesamtbetrag: invoiceData?.total_value,\n      waehrung: customDeclaration?.invoice?.currency,\n      lieferkosten: customDeclaration?.invoice?.transport_costs,\n    });\n    setAuftragMetadaten({\n      documentId: customDeclaration?.id,\n      transactionId: customDeclaration?.transaction?.id,\n      documentType: \"Zollanmeldung\",\n      dateAdded: customDeclaration?.date_added,\n      author: customDeclaration?.importeur?.name,\n      freigabeStatus: true,\n      description: \"\",\n      statusAnmeldung: customDeclaration?.status,\n      statusAuftrag: customDeclaration?.transaction?.status,\n    });\n  }, [customDeclaration, invoiceData]);\n\n  // -- Tab-Steuerung --\n  // State über aktiven Tab\n  const [fillActive, setFillActive] = useState(\"tab1\");\n\n  // Funktion zum wechseln des Tabs\n  function handleFillClick(value) {\n    if (value === fillActive) {\n      return;\n    }\n\n    setFillActive(value);\n  }\n\n  return (\n    <>\n      {isLoading ? (\n        <div className=\"loadingSpinner\">\n          <MDBSpinner>\n            <span className=\"visually-hidden\">Lädt..</span>\n          </MDBSpinner>\n        </div>\n      ) : (\n        <>\n          <h3>Dokument: Zollanmeldung</h3>\n\n          {isZoll ? (\n            <MDBBreadcrumb>\n              <MDBBreadcrumbItem>\n                <Link to=\"/zoll/declarations/\">Zollanmeldungen</Link>\n              </MDBBreadcrumbItem>\n              <MDBBreadcrumbItem>\n                <Link to={\"/zoll/declarations/\" + declarationID}>\n                  Zollanmeldungs-ID {declarationID}\n                </Link>\n              </MDBBreadcrumbItem>\n              <MDBBreadcrumbItem active>\n                Dokumenten-ID {auftragMetadaten.documentId}\n              </MDBBreadcrumbItem>\n            </MDBBreadcrumb>\n          ) : (\n            <MDBBreadcrumb>\n              <MDBBreadcrumbItem>\n                <Link to=\"/transactions\">Aufträge</Link>\n              </MDBBreadcrumbItem>\n              <MDBBreadcrumbItem>\n                <Link to={\"/transactions/\" + auftragMetadaten.transactionId}>\n                  Auftrags-ID {auftragMetadaten.transactionId}\n                </Link>\n              </MDBBreadcrumbItem>\n              <MDBBreadcrumbItem active>\n                Dokumenten-ID {auftragMetadaten.documentId}\n              </MDBBreadcrumbItem>\n            </MDBBreadcrumb>\n          )}\n\n          <MDBCard style={{ minHeight: 600 }}>\n            <MDBCardHeader>\n              <MDBTabs pills className=\"card-header-tabs\">\n                <MDBTabsItem>\n                  <MDBTabsLink\n                    onClick={() => handleFillClick(\"tab1\")}\n                    active={fillActive === \"tab1\"}\n                  >\n                    Allgemeine Angaben\n                  </MDBTabsLink>\n                </MDBTabsItem>\n                <MDBTabsItem>\n                  <MDBTabsLink\n                    onClick={() => handleFillClick(\"tab2\")}\n                    active={fillActive === \"tab2\"}\n                  >\n                    Adressdaten\n                  </MDBTabsLink>\n                </MDBTabsItem>\n                <MDBTabsItem>\n                  <MDBTabsLink\n                    onClick={() => handleFillClick(\"tab3\")}\n                    active={fillActive === \"tab3\"}\n                  >\n                    Lieferdaten\n                  </MDBTabsLink>\n                </MDBTabsItem>\n                <MDBTabsItem>\n                  <MDBTabsLink\n                    onClick={() => handleFillClick(\"tab4\")}\n                    active={fillActive === \"tab4\"}\n                  >\n                    Rechnungsdaten\n                  </MDBTabsLink>\n                </MDBTabsItem>\n              </MDBTabs>\n            </MDBCardHeader>\n            <MDBCardBody>\n              <MDBRow>\n                <MDBCol className=\"col-md-8\">\n                  {fillActive === \"tab1\" ? (\n                    <MDBCardTitle className=\"mb-4\">\n                      Allgemeine Angaben\n                    </MDBCardTitle>\n                  ) : fillActive === \"tab2\" ? (\n                    <MDBCardTitle className=\"mb-4\">Adressdaten</MDBCardTitle>\n                  ) : fillActive === \"tab3\" ? (\n                    <MDBCardTitle className=\"mb-4\">Lieferdaten</MDBCardTitle>\n                  ) : (\n                    <MDBCardTitle className=\"mb-4\">Rechnungsdaten</MDBCardTitle>\n                  )}\n                  <MDBCardText>\n                    <MDBTabsContent>\n                      <MDBTabsPane show={fillActive === \"tab1\"}>\n                        <p>\n                          <b>Auftragsnummer: </b>\n                          {fieldValue.auftragsnummer}\n                        </p>\n                        <p>\n                          <b>Bearbeitende Dienststelle: </b>\n                          {fieldValue.bearbeitendeDienststelle}\n                        </p>\n                        <p>\n                          <b>Art der Anmeldung: </b>\n                          {fieldValue.anmeldungArt}\n                        </p>\n                        <p>\n                          <b>Art des Geschäfts: </b>\n                          {fieldValue.geschaeftArt}\n                        </p>\n                        <p>\n                          <b>Zahlungsart: </b>\n                          {fieldValue.zahlungArt}\n                        </p>\n                      </MDBTabsPane>\n                      <MDBTabsPane show={fillActive === \"tab2\"}>\n                        {/* Versender Daten */}\n                        <h6>\n                          <u>Versender</u>\n                        </h6>\n                        <p>\n                          <b>EORI-Nummer: </b>\n                          {fieldValue.eoriVersender}\n                        </p>\n                        <p>\n                          <b>Firma: </b>\n                          {fieldValue.firmaVersender}\n                        </p>\n                        <p>\n                          <b>Straße u.Hausnummer: </b>\n                          {fieldValue.strasseVersender}\n                        </p>\n                        <p>\n                          <b>Postleitzahl: </b>\n                          {fieldValue.plzVersender}\n                        </p>\n                        <p>\n                          <b>Postleitzahl: </b>\n                          {fieldValue.ortVersender}\n                        </p>\n                        <p>\n                          <b>Staatsangehörigkeit: </b>\n                          {fieldValue.staatVersender}\n                        </p>\n                        <p>\n                          <b>Telefonnummer: </b>\n                          {fieldValue.telefonVersender}\n                        </p>\n                        <p>\n                          <b>Telefonnummer: </b>\n                          {fieldValue.emailVersender}\n                        </p>\n                        <br />\n                        {/* Anmelder Daten */}\n                        <h6>\n                          <u>Empfänger / Anmelder</u>\n                        </h6>\n                        <p>\n                          <b>EORI-Nummer: </b>\n                          {fieldValue.eoriAnmelder}\n                        </p>\n                        <p>\n                          <b>Firma: </b>\n                          {fieldValue.firmaAnmelder}\n                        </p>\n                        <p>\n                          <b>Straße u.Hausnummer: </b>\n                          {fieldValue.strasseAnmelder}\n                        </p>\n                        <p>\n                          <b>Postleitzahl: </b>\n                          {fieldValue.plzAnmelder}\n                        </p>\n                        <p>\n                          <b>Postleitzahl: </b>\n                          {fieldValue.ortAnmelder}\n                        </p>\n                        <p>\n                          <b>Staatsangehörigkeit: </b>\n                          {fieldValue.staatAnmelder}\n                        </p>\n                        <p>\n                          <b>Telefonnummer: </b>\n                          {fieldValue.telefonAnmelder}\n                        </p>\n                        <p>\n                          <b>Telefonnummer: </b>\n                          {fieldValue.emailAnmelder}\n                        </p>\n                      </MDBTabsPane>\n                      <MDBTabsPane show={fillActive === \"tab3\"}>\n                        <p>\n                          <b>Ausfuhrland: </b>\n                          {fieldValue.ausfuhrland}\n                        </p>\n                        <p>\n                          <b>Bestimmungsland: </b>\n                          {fieldValue.bestimmungsland}\n                        </p>\n                        <p>\n                          <b>Bestimmungsbundesland: </b>\n                          {fieldValue.bestimmungsbundesland}\n                        </p>\n                        <p>\n                          <b>\n                            Art des grenzüberschreitenden Beförderungsmittels:{\" \"}\n                          </b>\n                          {fieldValue.befoerderungsmittel}\n                        </p>\n                        <p>\n                          <b>Lieferbedingungen: </b>\n                          {fieldValue.lieferbedingung}\n                        </p>\n                        <p>\n                          <b>Lieferort: </b>\n                          {fieldValue.lieferort}\n                        </p>\n                        <p>\n                          <b>Lieferort: </b>\n                          {fieldValue.warenort}\n                        </p>\n                      </MDBTabsPane>\n                      <MDBTabsPane show={fillActive === \"tab4\"}>\n                        <p>\n                          <b>Rechnungsdatum: </b>\n                          {fieldValue.datumRechnung}\n                        </p>\n                        <p>\n                          <b>Gesamtbetrag: </b>\n                          {fieldValue.gesamtbetrag} {fieldValue.waehrung}\n                        </p>\n                        <p>\n                          <b>Lieferkosten: </b>\n                          {fieldValue.lieferkosten} {fieldValue.waehrung}\n                        </p>\n                        <hr className=\"my-4\" />\n                        {rechnungsposten.map((posten) => (\n                          <>\n                            <hr className=\"my-4\" />\n                            <h6>\n                              <u>Rechnungsposten 1</u>\n                            </h6>\n                            <p>\n                              <b>Produkt: </b>\n                              {posten.product}\n                            </p>\n                            <p>\n                              <b>Anzahl: </b>\n                              {posten.amount}\n                            </p>\n                            <p>\n                              <b>Einheit: </b>\n                              {posten.unit}\n                            </p>\n                            <p>\n                              <b>Preis pro Einheit: </b>\n                              {posten.price.toFixed(2)} {fieldValue.waehrung}\n                            </p>\n                          </>\n                        ))}\n                        <hr className=\"my-4\" />\n\n                        {/* Berechnung Zollabgabe */}\n                        <p className=\"ms-4\">\n                          <b>Zollwert</b> (Geamtbetrag + Lieferkosten) ={\" \"}\n                          {(\n                            Number(fieldValue.gesamtbetrag) +\n                            Number(fieldValue.lieferkosten)\n                          ).toFixed(2)}{\" \"}\n                          {fieldValue.waehrung}\n                        </p>\n                        <p className=\"ms-4\">\n                          <b>Zollbetrag</b> (Pauschaler Zollsatz 4 %) ={\" \"}\n                          {(\n                            (Number(fieldValue.gesamtbetrag) +\n                              Number(fieldValue.lieferkosten)) *\n                            Number(0.04)\n                          ).toFixed(2)}{\" \"}\n                          {fieldValue.waehrung}\n                        </p>\n                        <p className=\"ms-4\">\n                          <b>Einfuhrumsatzsteuer(EUSt)-Wert</b> (Zollwert +\n                          Zollbetrag) ={\" \"}\n                          {(\n                            (Number(fieldValue.gesamtbetrag) +\n                              Number(fieldValue.lieferkosten)) *\n                            Number(1.04)\n                          ).toFixed(2)}{\" \"}\n                          {fieldValue.waehrung}\n                        </p>\n                        <p className=\"ms-4\">\n                          <b>EUSt-Betrag</b> (EUSt-Wert * EUSt-Satz 19 %) ={\" \"}\n                          {(\n                            (Number(fieldValue.gesamtbetrag) +\n                              Number(fieldValue.lieferkosten)) *\n                            Number(1.04) *\n                            Number(0.19)\n                          ).toFixed(2)}{\" \"}\n                          {fieldValue.waehrung}\n                        </p>\n                        <p className=\"ms-4\">\n                          <b>Prognostizierte Gesamtabgabe</b> (Zollbetrag +\n                          EUSt-Betrag) ={\" \"}\n                          <u>\n                            {(\n                              (Number(fieldValue.gesamtbetrag) +\n                                Number(fieldValue.lieferkosten)) *\n                                Number(0.04) +\n                              (Number(fieldValue.gesamtbetrag) +\n                                Number(fieldValue.lieferkosten)) *\n                                Number(1.04) *\n                                Number(0.19)\n                            ).toFixed(2)}{\" \"}\n                            {fieldValue.waehrung}\n                          </u>\n                        </p>\n                      </MDBTabsPane>\n                    </MDBTabsContent>\n                  </MDBCardText>\n                </MDBCol>\n                <MDBCol\n                  className=\"col-md-4\"\n                  style={{ border: \"3px solid #cccccc\", height: 500 }}\n                >\n                  <p className=\"mt-4 ms-3\">\n                    <b>Auftrags-ID: </b>\n                    {auftragMetadaten.transactionId}\n                  </p>\n                  <p className=\"ms-3\">\n                    <b>Dokumenten-ID: </b>\n                    {auftragMetadaten.documentId}\n                  </p>\n                  <p className=\"ms-3\">\n                    <b>Dokumententyp: </b>\n                    {auftragMetadaten.documentType}\n                  </p>\n                  <p className=\"ms-3\">\n                    <b>Hochgeladen am: </b>\n                    {auftragMetadaten.dateAdded}\n                  </p>\n                  <p className=\"ms-3\">\n                    <b>Hochgeladen von: </b>\n                    {auftragMetadaten.author}\n                  </p>\n\n                  <p className=\"ms-3\">\n                    <b>Freigabe: </b>\n                    {auftragMetadaten.freigabeStatus\n                      ? \"Für Zoll freigegeben\"\n                      : \"Nicht für Zoll freigegeben\"}\n                  </p>\n                  <p className=\"ms-3 mb-5\">\n                    <b>Status der Anmeldung: </b>\n                    {auftragMetadaten.statusAnmeldung == \"\" ? (\n                      <i>Es liegt keine Beschreibung vor.</i>\n                    ) : (\n                      auftragMetadaten.statusAnmeldung\n                    )}\n                  </p>\n                </MDBCol>\n              </MDBRow>\n            </MDBCardBody>\n          </MDBCard>\n        </>\n      )}\n    </>\n  );\n}\n","/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/pages/Login.jsx",["545","546","547","548","549","550","551","552","553","554","555","556","557"],"import React, { useState, useEffect } from \"react\";\nimport axiosInstance from \"../axiosApi\";\nimport useAuth from \"../hooks/useAuth\";\nimport {\n  MDBRow,\n  MDBCol,\n  MDBInput,\n  MDBBtn,\n  MDBTabs,\n  MDBTabsItem,\n  MDBTabsLink,\n  MDBTabsContent,\n  MDBTabsPane,\n} from \"mdb-react-ui-kit\";\n\nimport \"./css/NotFound.css\";\nimport UniLogo from \"../Uni_Logo.png\";\nimport Lucid from \"../LUCID.jpg\";\n\nimport { useNavigate, useLocation } from \"react-router-dom\";\n\nconst LOGIN_URL = \"/api/token/\";\n\nexport default function Login() {\n  // -- Login --\n  const { setAuth } = useAuth();\n\n  const navigate = useNavigate();\n  const location = useLocation();\n  const from = location.state?.from?.pathname || \"/\";\n\n  const [user, setUser] = useState(\"\");\n  const [pwd, setPwd] = useState(\"\");\n  const [errMsg, setErrMsg] = useState(\"\");\n  const [sucess, setSucess] = useState(false);\n\n  // --- Komponenten für Registrierung --//\n\n  const [eori_nr, setEoriNr] = useState(\"\");\n  const [street, setStreet] = useState(\"\");\n  const [city_code, setZipCode] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [name, setName] = useState(\"\");\n  const [city, setCity] = useState(\"\");\n  const [phone, setPhone] = useState(\"\");\n\n  const [country_code, setCountry] = useState(\"\");\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [publickey, setPubkey] = useState(\"\");\n\n  useEffect(() => {\n    setErrMsg(\"\");\n  }, [user, pwd]);\n\n  // Login\n  const handleLogin = async (e) => {\n    e.preventDefault();\n\n    try {\n      const response = await axiosInstance.post(\n        LOGIN_URL,\n        JSON.stringify({ username: user, password: pwd }),\n        {\n          headers: { \"Content-Type\": \"application/json\" },\n        }\n      );\n\n      const accessToken = response?.data?.access;\n      const roles = response?.data?.roles;\n      const company = response?.data?.company;\n\n      //Speichern der Daten für künftige Anfragen\n\n      localStorage.setItem(\"access_token\", accessToken);\n      localStorage.setItem(\"refresh_token\", response?.data?.refresh);\n      //speichern von Nutzernamen und Firma im lokalen Speicher\n      localStorage.setItem(\"username\", response?.data?.user);\n      localStorage.setItem(\"company\", company);\n      setAuth({ user, pwd, roles, company, accessToken });\n      setUser(\"\");\n      setPwd(\"\");\n      setSucess(true);\n      navigate(\"/\", { replace: true });\n      //navigate(from, { replace: true });\n    } catch (err) {\n      if (!err?.response) {\n        setErrMsg(\"Der Server antwortet nicht\");\n      } else if (err.response?.status === 400) {\n        setErrMsg(\"Bitte alle Felder befüllen\");\n      } else if (err.response?.status === 401) {\n        setErrMsg(\"Falsche Login-Daten\");\n      } else {\n        setErrMsg(\"Allgemeiner Fehler\");\n      }\n    }\n  };\n\n  //Funktion zum registrieren eines Mitarbeiters\n\n  const registerEmployee = (e) => {\n    // Check Formular Validierung\n    var forms = document.getElementById(\"registerEmployeeForm\");\n    if (forms.checkValidity() == false) {\n      console.log(\"Formular Eingabe inkorrekt.\");\n      return;\n    }\n\n    e.preventDefault();\n    try {\n      const response = axiosInstance.post(\"/registration/\", {\n        username: username,\n        password: password,\n        password2: password,\n        company_id: eori_nr,\n      });\n      setRegisterEmployeeCorrect(true);\n    } catch (err) {\n      console.log(err);\n      if (!err?.response) {\n        setErrMsg(\"Der Server antwortet nicht\");\n      } else if (err.response?.status === 400) {\n        setErrMsg(\"Bitte alle Felder befüllen\");\n      } else if (err.response?.status === 401) {\n        setErrMsg(\"Sie sind nicht berechtigt\");\n      } else {\n        setErrMsg(\"Allgemeiner Fehler\");\n      }\n    }\n  };\n\n  // Registrierung eines Unternehmens\n\n  function registerCompany(e) {\n    // Check Formular Validierung\n    var forms = document.getElementById(\"registerForm\");\n    if (forms.checkValidity() == false) {\n      console.log(\"Formular Eingabe inkorrekt.\");\n      return;\n    }\n\n    e.preventDefault();\n    const newCompany = {\n      eori_nr,\n      street,\n      city_code,\n      city,\n      email,\n      name,\n      country_code,\n      phone,\n      publickey,\n    };\n\n    //firma hinzufügen\n    axiosInstance\n      .post(\"/companies/\", newCompany)\n      .then((res) => {\n        console.log(res.data);\n        setRegisterCorrect(true);\n      })\n      .catch((error) => {\n        setErrMsg(error.message);\n        //this.setState({ errorMessage: error.message });\n        console.error(\"There was an error!\", error);\n      })\n      .then(registerEmployee(e));\n    //firma als partner hinterlegen\n  }\n\n  // Validierung\n  const [registerCorrect, setRegisterCorrect] = useState(false);\n  const [registerEmployeeCorrect, setRegisterEmployeeCorrect] = useState(false);\n\n  // -- Tab-Steuerung --\n  // State über aktiven Tab\n  const [fillActive, setFillActive] = useState(\"login\");\n\n  // Funktion zum wechseln des Tabs\n  function handleFillClick(value) {\n    if (value === fillActive) {\n      return;\n    }\n\n    setFillActive(value);\n  }\n\n  return (\n    <>\n      <div style={{ width: \"26rem\" }} className=\"text-middle\">\n        <img src={Lucid} style={{ width: \"6rem\" }} className=\"mb-5\" />\n        <img src={UniLogo} style={{ width: \"26rem\" }} className=\"mb-5\" />\n        {sucess ? (\n          <section>\n            <h1> Du bist eingeloggt</h1>\n            <br />\n            <p>\n              <a href=\"#\">Zur Startseite</a>\n            </p>\n          </section>\n        ) : (\n          <section>\n            <MDBTabs pills justify className=\"mb-3\">\n              <MDBTabsItem>\n                <MDBTabsLink\n                  onClick={() => handleFillClick(\"login\")}\n                  active={fillActive === \"login\"}\n                >\n                  Login\n                </MDBTabsLink>\n              </MDBTabsItem>\n              <MDBTabsItem>\n                <MDBTabsLink\n                  onClick={() => handleFillClick(\"register_company\")}\n                  active={\n                    fillActive === \"register_employee\" ||\n                    fillActive === \"register_company\"\n                  }\n                >\n                  Registrieren\n                </MDBTabsLink>\n              </MDBTabsItem>\n            </MDBTabs>\n\n            <MDBTabsContent>\n              <MDBTabsPane show={fillActive === \"login\"}>\n                <form onSubmit={handleLogin}>\n                  <br />\n                  <MDBInput\n                    className=\"mb-4\"\n                    type=\"username\"\n                    id=\"username\"\n                    name=\"username\"\n                    label=\"Nutzername\"\n                    onChange={(e) => setUser(e.target.value)}\n                  />\n                  <MDBInput\n                    className=\"mb-4\"\n                    type=\"password\"\n                    id=\"password\"\n                    name=\"password\"\n                    label=\"Passwort\"\n                    onChange={(e) => setPwd(e.target.value)}\n                  />\n\n                  <br />\n\n                  <MDBBtn type=\"submit\" className=\"mb-4\" block>\n                    Einloggen\n                  </MDBBtn>\n\n                  <div className=\"text-center\">\n                    <p>\n                      Noch nicht Mitglied?{\" \"}\n                      <a\n                        href=\"javascript:;\"\n                        onClick={() => handleFillClick(\"register_company\")}\n                      >\n                        Registrieren\n                      </a>\n                    </p>\n                  </div>\n                </form>\n                <p\n                  className={errMsg ? \"errmsg alert alert-danger\" : \"offscreen\"}\n                  aria-live=\"assertive\"\n                >\n                  {errMsg}\n                </p>\n              </MDBTabsPane>\n              <MDBTabsPane show={fillActive === \"register_company\"}>\n                <form id=\"registerForm\" onSubmit={(e) => e.preventDefault()}>\n                  <MDBInput\n                    className=\"mb-4\"\n                    id=\"name_firma\"\n                    label=\"Name des Unternehmens\"\n                    type=\"text\"\n                    required\n                    onChange={(e) => setName(e.target.value)}\n                  />\n                  <MDBInput\n                    className=\"mb-4\"\n                    id=\"eori\"\n                    type=\"number\"\n                    label=\"EORI-Nr.\"\n                    required\n                    onChange={(e) => setEoriNr(e.target.value)}\n                  />\n                  <MDBInput\n                    className=\"mb-4\"\n                    id=\"strasse\"\n                    label=\"Straße u. Nr.\"\n                    type=\"text\"\n                    required\n                    onChange={(e) => setStreet(e.target.value)}\n                  />\n                  <MDBRow>\n                    <MDBCol className=\"col-4\">\n                      <MDBInput\n                        className=\"mb-4\"\n                        type=\"number\"\n                        id=\"plz\"\n                        label=\"PLZ\"\n                        required\n                        onChange={(e) => setZipCode(e.target.value)}\n                      />\n                    </MDBCol>\n                    <MDBCol>\n                      <MDBInput\n                        className=\"mb-4\"\n                        id=\"stadt\"\n                        label=\"Stadt\"\n                        type=\"text\"\n                        required\n                        onChange={(e) => setCity(e.target.value)}\n                      />\n                    </MDBCol>\n                  </MDBRow>\n                  <MDBInput\n                    className=\"mb-5\"\n                    id=\"land\"\n                    label=\"Land\"\n                    type=\"text\"\n                    required\n                    onChange={(e) => setCountry(e.target.value)}\n                  />\n                  <MDBInput\n                    className=\"mb-4\"\n                    autocomplete=\"off\"\n                    id=\"email\"\n                    label=\"E-Mail Adresse\"\n                    type=\"email\"\n                    required\n                    onChange={(e) => setEmail(e.target.value)}\n                  />\n                  <MDBInput\n                    className=\"mb-5\"\n                    id=\"telefon\"\n                    label=\"Telefonnr.\"\n                    type=\"text\"\n                    required\n                    onChange={(e) => setPhone(e.target.value)}\n                  />\n                  <MDBInput\n                    className=\"mb-5\"\n                    id=\"publickey\"\n                    label=\"Blockchain Publickey\"\n                    type=\"number\"\n                    required\n                    onChange={(e) => setPubkey(e.target.value)}\n                  />\n\n                  <hr className=\"mb-5\" />\n                  <MDBInput\n                    className=\"mb-4\"\n                    id=\"mitarbeiter\"\n                    label=\"Name des Mitarbeiters\"\n                    type=\"text\"\n                    required\n                    onChange={(e) => setUsername(e.target.value)}\n                  />\n                  <MDBInput\n                    className=\"mb-4\"\n                    id=\"passwort\"\n                    type=\"password\"\n                    label=\"Passwort\"\n                    required\n                    onChange={(e) => setPassword(e.target.value)}\n                  />\n                  <MDBBtn\n                    type=\"submit\"\n                    onClick={registerCompany}\n                    className=\"mb-4\"\n                    block\n                  >\n                    Registrieren\n                  </MDBBtn>\n                  {registerCorrect && (\n                    <p\n                      className=\"errmsg alert alert-success\"\n                      aria-live=\"assertive\"\n                    >\n                      Registrierung erfolgreich. Sie können sich jetzt\n                      einloggen.\n                    </p>\n                  )}\n\n                  <div className=\"text-center\">\n                    <p>\n                      Unternehmen ist bereits im System?{\" \"}\n                      <a\n                        href=\"javascript:;\"\n                        onClick={() => handleFillClick(\"register_employee\")}\n                      >\n                        <br />\n                        Mitarbeiter registrieren\n                      </a>\n                    </p>\n                  </div>\n                </form>\n              </MDBTabsPane>\n              <MDBTabsPane show={fillActive === \"register_employee\"}>\n                <form\n                  id=\"registerEmployeeForm\"\n                  onSubmit={(e) => e.preventDefault()}\n                >\n                  <MDBInput\n                    className=\"mb-4\"\n                    id=\"eori\"\n                    type=\"number\"\n                    label=\"EORI-Nr. des Unternehmens\"\n                    required\n                    onChange={(e) => setEoriNr(e.target.value)}\n                  />\n                  <MDBInput\n                    className=\"mb-5\"\n                    id=\"name_firma\"\n                    label=\"Name des Mitarbeiters\"\n                    type=\"text\"\n                    required\n                    onChange={(e) => setUsername(e.target.value)}\n                  />\n\n                  <MDBInput\n                    className=\"mb-4\"\n                    id=\"passwort\"\n                    type=\"password\"\n                    label=\"Passwort\"\n                    required\n                    onChange={(e) => setPassword(e.target.value)}\n                  />\n                  <MDBBtn\n                    type=\"submit\"\n                    onClick={registerEmployee}\n                    className=\"mb-4\"\n                    block\n                  >\n                    Registrieren\n                  </MDBBtn>\n                  {registerEmployeeCorrect && (\n                    <p\n                      className=\"errmsg alert alert-success\"\n                      aria-live=\"assertive\"\n                    >\n                      Registrierung erfolgreich. Sie können sich jetzt\n                      einloggen.\n                    </p>\n                  )}\n                  <div className=\"text-center\">\n                    <p>\n                      Unternehmen ist noch nicht im System?{\" \"}\n                      <a\n                        href=\"javascript:;\"\n                        onClick={() => handleFillClick(\"register_company\")}\n                      >\n                        <br />\n                        Unternehmen registrieren\n                      </a>\n                    </p>\n                  </div>\n                </form>\n              </MDBTabsPane>\n            </MDBTabsContent>\n          </section>\n        )}\n      </div>\n    </>\n  );\n}\n","/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/components/Dashboard/NotifcationToast.jsx",["558","559","560","561"],"import { React, useState, useEffect } from \"react\";\n\nimport Toast from \"react-bootstrap/Toast\";\nimport axiosInstance from \"../../axiosApi\";\n\nexport default function NotificationToast(props) {\n  var timestamp = new Date(props.alert.timestamp);\n  const [notificationText, setNotificationText] = useState(\"\");\n  const [notificationObject, setNotificationObject] = useState(\"\");\n\n  const [showB, setShowB] = useState(true);\n\n  const toggleShowB = () => setShowB(!showB);\n\n  useEffect(() => {\n    if (props.alert?.target_content_type == \"10\") {\n      setNotificationText(props.alert?.description);\n      setNotificationObject(\"Partnerschaftsanfrage\");\n    } else if (props.alert?.target_content_type == \"11\") {\n      const text = props.alert?.description;\n      setNotificationText(text);\n      setNotificationObject(`Auftrags-ID ${props.alert.target_object_id}`);\n    } else {\n      const text = \"sonstige Benachrichtigung\";\n      setNotificationText(props.alert?.description);\n      setNotificationObject(\"Allgemeine Benachrichtigung\");\n    }\n  }, [alert]);\n\n  const markasread = () =>\n    axiosInstance\n      .patch(`/alerts/${props.alert?.id}/`, {\n        unread: false,\n      })\n      .then((res) => {\n        toggleShowB();\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n\n  return (\n    <Toast\n      className=\"mb-2\"\n      bg=\"light\"\n      style={{ width: \"100%\" }}\n      onClose={markasread}\n      show={showB}\n    >\n      <Toast.Header>\n        <strong className=\"me-auto\">{notificationObject}</strong>\n        <small>{timestamp.toLocaleString()}</small>\n      </Toast.Header>\n      <Toast.Body>{notificationText}</Toast.Body>\n    </Toast>\n  );\n}\n","/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/components/ZollUI/ZollTopNavigation.jsx",[],{"ruleId":"562","replacedBy":"563"},{"ruleId":"564","replacedBy":"565"},{"ruleId":"566","severity":1,"message":"567","line":1,"column":17,"nodeType":"568","messageId":"569","endLine":1,"endColumn":25},{"ruleId":"566","severity":1,"message":"570","line":15,"column":8,"nodeType":"568","messageId":"569","endLine":15,"endColumn":20},{"ruleId":"571","severity":1,"message":"572","line":46,"column":23,"nodeType":"573","messageId":"574","endLine":46,"endColumn":25},{"ruleId":"571","severity":1,"message":"572","line":59,"column":27,"nodeType":"573","messageId":"574","endLine":59,"endColumn":29},{"ruleId":"566","severity":1,"message":"575","line":23,"column":10,"nodeType":"568","messageId":"569","endLine":23,"endColumn":16},{"ruleId":"566","severity":1,"message":"576","line":23,"column":18,"nodeType":"568","messageId":"569","endLine":23,"endColumn":27},{"ruleId":"577","severity":1,"message":"578","line":39,"column":13,"nodeType":"579","endLine":62,"endColumn":4},{"ruleId":"577","severity":1,"message":"580","line":62,"column":6,"nodeType":"581","endLine":62,"endColumn":24,"suggestions":"582"},{"ruleId":"577","severity":1,"message":"583","line":69,"column":6,"nodeType":"581","endLine":69,"endColumn":8,"suggestions":"584"},{"ruleId":"577","severity":1,"message":"583","line":76,"column":6,"nodeType":"581","endLine":76,"endColumn":8,"suggestions":"585"},{"ruleId":"571","severity":1,"message":"572","line":282,"column":30,"nodeType":"573","messageId":"574","endLine":282,"endColumn":32},{"ruleId":"577","severity":1,"message":"586","line":109,"column":6,"nodeType":"581","endLine":109,"endColumn":8,"suggestions":"587"},{"ruleId":"571","severity":1,"message":"588","line":207,"column":42,"nodeType":"573","messageId":"574","endLine":207,"endColumn":44},{"ruleId":"566","severity":1,"message":"589","line":1,"column":17,"nodeType":"568","messageId":"569","endLine":1,"endColumn":26},{"ruleId":"571","severity":1,"message":"572","line":28,"column":21,"nodeType":"573","messageId":"574","endLine":28,"endColumn":23},{"ruleId":"571","severity":1,"message":"572","line":32,"column":21,"nodeType":"573","messageId":"574","endLine":32,"endColumn":23},{"ruleId":"571","severity":1,"message":"572","line":36,"column":21,"nodeType":"573","messageId":"574","endLine":36,"endColumn":23},{"ruleId":"571","severity":1,"message":"572","line":156,"column":30,"nodeType":"573","messageId":"574","endLine":156,"endColumn":32},{"ruleId":"566","severity":1,"message":"590","line":68,"column":10,"nodeType":"568","messageId":"569","endLine":68,"endColumn":21},{"ruleId":"566","severity":1,"message":"591","line":69,"column":10,"nodeType":"568","messageId":"569","endLine":69,"endColumn":19},{"ruleId":"577","severity":1,"message":"578","line":87,"column":13,"nodeType":"579","endLine":131,"endColumn":4},{"ruleId":"571","severity":1,"message":"572","line":91,"column":24,"nodeType":"573","messageId":"574","endLine":91,"endColumn":26},{"ruleId":"577","severity":1,"message":"592","line":131,"column":6,"nodeType":"581","endLine":131,"endColumn":19,"suggestions":"593"},{"ruleId":"571","severity":1,"message":"572","line":140,"column":33,"nodeType":"573","messageId":"574","endLine":140,"endColumn":35},{"ruleId":"571","severity":1,"message":"572","line":185,"column":26,"nodeType":"573","messageId":"574","endLine":185,"endColumn":28},{"ruleId":"571","severity":1,"message":"572","line":300,"column":43,"nodeType":"573","messageId":"574","endLine":300,"endColumn":45},{"ruleId":"571","severity":1,"message":"572","line":309,"column":41,"nodeType":"573","messageId":"574","endLine":309,"endColumn":43},{"ruleId":"571","severity":1,"message":"572","line":368,"column":28,"nodeType":"573","messageId":"574","endLine":368,"endColumn":30},{"ruleId":"571","severity":1,"message":"572","line":369,"column":36,"nodeType":"573","messageId":"574","endLine":369,"endColumn":38},{"ruleId":"571","severity":1,"message":"572","line":370,"column":34,"nodeType":"573","messageId":"574","endLine":370,"endColumn":36},{"ruleId":"571","severity":1,"message":"572","line":394,"column":30,"nodeType":"573","messageId":"574","endLine":394,"endColumn":32},{"ruleId":"577","severity":1,"message":"578","line":27,"column":13,"nodeType":"579","endLine":34,"endColumn":4},{"ruleId":"571","severity":1,"message":"572","line":220,"column":30,"nodeType":"573","messageId":"574","endLine":220,"endColumn":32},{"ruleId":"594","severity":1,"message":"595","line":15,"column":9,"nodeType":"596","endLine":15,"endColumn":71},{"ruleId":"594","severity":1,"message":"595","line":16,"column":9,"nodeType":"596","endLine":16,"endColumn":74},{"ruleId":"566","severity":1,"message":"597","line":1,"column":7,"nodeType":"568","messageId":"569","endLine":1,"endColumn":19},{"ruleId":"562","replacedBy":"598"},{"ruleId":"564","replacedBy":"599"},{"ruleId":"566","severity":1,"message":"600","line":25,"column":11,"nodeType":"568","messageId":"569","endLine":25,"endColumn":15},{"ruleId":"566","severity":1,"message":"601","line":26,"column":10,"nodeType":"568","messageId":"569","endLine":26,"endColumn":15},{"ruleId":"566","severity":1,"message":"602","line":28,"column":28,"nodeType":"568","messageId":"569","endLine":28,"endColumn":47},{"ruleId":"566","severity":1,"message":"603","line":29,"column":10,"nodeType":"568","messageId":"569","endLine":29,"endColumn":19},{"ruleId":"566","severity":1,"message":"604","line":29,"column":21,"nodeType":"568","messageId":"569","endLine":29,"endColumn":33},{"ruleId":"566","severity":1,"message":"605","line":33,"column":9,"nodeType":"568","messageId":"569","endLine":33,"endColumn":23},{"ruleId":"577","severity":1,"message":"606","line":43,"column":6,"nodeType":"581","endLine":43,"endColumn":24,"suggestions":"607"},{"ruleId":"608","severity":1,"message":"609","line":48,"column":16,"nodeType":"568","messageId":"610","endLine":48,"endColumn":20},{"ruleId":"571","severity":1,"message":"572","line":61,"column":24,"nodeType":"573","messageId":"574","endLine":61,"endColumn":26},{"ruleId":"571","severity":1,"message":"572","line":121,"column":27,"nodeType":"573","messageId":"574","endLine":121,"endColumn":29},{"ruleId":"611","severity":1,"message":"612","line":134,"column":35,"nodeType":"573","messageId":"613","endLine":134,"endColumn":36},{"ruleId":"571","severity":1,"message":"572","line":140,"column":36,"nodeType":"573","messageId":"574","endLine":140,"endColumn":38},{"ruleId":"571","severity":1,"message":"572","line":147,"column":28,"nodeType":"573","messageId":"574","endLine":147,"endColumn":30},{"ruleId":"571","severity":1,"message":"572","line":171,"column":26,"nodeType":"573","messageId":"574","endLine":171,"endColumn":28},{"ruleId":"566","severity":1,"message":"614","line":21,"column":10,"nodeType":"568","messageId":"569","endLine":21,"endColumn":25},{"ruleId":"566","severity":1,"message":"615","line":33,"column":11,"nodeType":"568","messageId":"569","endLine":33,"endColumn":29},{"ruleId":"571","severity":1,"message":"572","line":37,"column":42,"nodeType":"573","messageId":"574","endLine":37,"endColumn":44},{"ruleId":"577","severity":1,"message":"616","line":46,"column":6,"nodeType":"581","endLine":46,"endColumn":8,"suggestions":"617"},{"ruleId":"571","severity":1,"message":"572","line":99,"column":47,"nodeType":"573","messageId":"574","endLine":99,"endColumn":49},{"ruleId":"571","severity":1,"message":"572","line":105,"column":37,"nodeType":"573","messageId":"574","endLine":105,"endColumn":39},{"ruleId":"571","severity":1,"message":"572","line":109,"column":39,"nodeType":"573","messageId":"574","endLine":109,"endColumn":41},{"ruleId":"571","severity":1,"message":"572","line":110,"column":32,"nodeType":"573","messageId":"574","endLine":110,"endColumn":34},{"ruleId":"571","severity":1,"message":"572","line":114,"column":34,"nodeType":"573","messageId":"574","endLine":114,"endColumn":36},{"ruleId":"571","severity":1,"message":"572","line":118,"column":34,"nodeType":"573","messageId":"574","endLine":118,"endColumn":36},{"ruleId":"571","severity":1,"message":"572","line":125,"column":36,"nodeType":"573","messageId":"574","endLine":125,"endColumn":38},{"ruleId":"571","severity":1,"message":"572","line":127,"column":40,"nodeType":"573","messageId":"574","endLine":127,"endColumn":42},{"ruleId":"571","severity":1,"message":"572","line":128,"column":50,"nodeType":"573","messageId":"574","endLine":128,"endColumn":52},{"ruleId":"562","replacedBy":"618"},{"ruleId":"564","replacedBy":"619"},{"ruleId":"566","severity":1,"message":"589","line":1,"column":27,"nodeType":"568","messageId":"569","endLine":1,"endColumn":36},{"ruleId":"566","severity":1,"message":"620","line":1,"column":38,"nodeType":"568","messageId":"569","endLine":1,"endColumn":52},{"ruleId":"566","severity":1,"message":"621","line":11,"column":10,"nodeType":"568","messageId":"569","endLine":11,"endColumn":14},{"ruleId":"566","severity":1,"message":"622","line":11,"column":32,"nodeType":"568","messageId":"569","endLine":11,"endColumn":51},{"ruleId":"566","severity":1,"message":"623","line":14,"column":8,"nodeType":"568","messageId":"569","endLine":14,"endColumn":16},{"ruleId":"566","severity":1,"message":"624","line":19,"column":5,"nodeType":"568","messageId":"569","endLine":19,"endColumn":11},{"ruleId":"571","severity":1,"message":"572","line":71,"column":31,"nodeType":"573","messageId":"574","endLine":71,"endColumn":33},{"ruleId":"611","severity":1,"message":"612","line":126,"column":52,"nodeType":"573","messageId":"613","endLine":126,"endColumn":53},{"ruleId":"566","severity":1,"message":"625","line":2,"column":30,"nodeType":"568","messageId":"569","endLine":2,"endColumn":47},{"ruleId":"566","severity":1,"message":"626","line":27,"column":10,"nodeType":"568","messageId":"569","endLine":27,"endColumn":19},{"ruleId":"566","severity":1,"message":"627","line":27,"column":21,"nodeType":"568","messageId":"569","endLine":27,"endColumn":33},{"ruleId":"566","severity":1,"message":"628","line":39,"column":10,"nodeType":"568","messageId":"569","endLine":39,"endColumn":25},{"ruleId":"566","severity":1,"message":"600","line":40,"column":11,"nodeType":"568","messageId":"569","endLine":40,"endColumn":15},{"ruleId":"566","severity":1,"message":"629","line":42,"column":7,"nodeType":"568","messageId":"569","endLine":42,"endColumn":20},{"ruleId":"571","severity":1,"message":"572","line":151,"column":23,"nodeType":"573","messageId":"574","endLine":151,"endColumn":25},{"ruleId":"566","severity":1,"message":"630","line":154,"column":13,"nodeType":"568","messageId":"569","endLine":154,"endColumn":15},{"ruleId":"566","severity":1,"message":"630","line":157,"column":13,"nodeType":"568","messageId":"569","endLine":157,"endColumn":15},{"ruleId":"571","severity":1,"message":"572","line":182,"column":33,"nodeType":"573","messageId":"574","endLine":182,"endColumn":35},{"ruleId":"571","severity":1,"message":"572","line":217,"column":23,"nodeType":"573","messageId":"574","endLine":217,"endColumn":25},{"ruleId":"577","severity":1,"message":"631","line":220,"column":6,"nodeType":"581","endLine":220,"endColumn":8,"suggestions":"632"},{"ruleId":"571","severity":1,"message":"572","line":260,"column":36,"nodeType":"573","messageId":"574","endLine":260,"endColumn":38},{"ruleId":"571","severity":1,"message":"572","line":295,"column":39,"nodeType":"573","messageId":"574","endLine":295,"endColumn":41},{"ruleId":"571","severity":1,"message":"572","line":311,"column":65,"nodeType":"573","messageId":"574","endLine":311,"endColumn":67},{"ruleId":"571","severity":1,"message":"572","line":315,"column":39,"nodeType":"573","messageId":"574","endLine":315,"endColumn":41},{"ruleId":"571","severity":1,"message":"572","line":349,"column":34,"nodeType":"573","messageId":"574","endLine":349,"endColumn":36},{"ruleId":"571","severity":1,"message":"572","line":385,"column":32,"nodeType":"573","messageId":"574","endLine":385,"endColumn":34},{"ruleId":"571","severity":1,"message":"572","line":385,"column":58,"nodeType":"573","messageId":"574","endLine":385,"endColumn":60},{"ruleId":"571","severity":1,"message":"572","line":389,"column":32,"nodeType":"573","messageId":"574","endLine":389,"endColumn":34},{"ruleId":"571","severity":1,"message":"572","line":389,"column":58,"nodeType":"573","messageId":"574","endLine":389,"endColumn":60},{"ruleId":"566","severity":1,"message":"633","line":9,"column":10,"nodeType":"568","messageId":"569","endLine":9,"endColumn":26},{"ruleId":"566","severity":1,"message":"634","line":9,"column":28,"nodeType":"568","messageId":"569","endLine":9,"endColumn":47},{"ruleId":"566","severity":1,"message":"635","line":11,"column":24,"nodeType":"568","messageId":"569","endLine":11,"endColumn":39},{"ruleId":"577","severity":1,"message":"636","line":23,"column":6,"nodeType":"581","endLine":23,"endColumn":20,"suggestions":"637"},{"ruleId":"571","severity":1,"message":"572","line":29,"column":31,"nodeType":"573","messageId":"574","endLine":29,"endColumn":33},{"ruleId":"571","severity":1,"message":"572","line":46,"column":60,"nodeType":"573","messageId":"574","endLine":46,"endColumn":62},{"ruleId":"571","severity":1,"message":"572","line":48,"column":24,"nodeType":"573","messageId":"574","endLine":48,"endColumn":26},{"ruleId":"571","severity":1,"message":"572","line":101,"column":20,"nodeType":"573","messageId":"574","endLine":101,"endColumn":22},{"ruleId":"571","severity":1,"message":"588","line":127,"column":26,"nodeType":"573","messageId":"574","endLine":127,"endColumn":28},{"ruleId":"571","severity":1,"message":"588","line":147,"column":26,"nodeType":"573","messageId":"574","endLine":147,"endColumn":28},{"ruleId":"571","severity":1,"message":"572","line":147,"column":63,"nodeType":"573","messageId":"574","endLine":147,"endColumn":65},{"ruleId":"562","replacedBy":"638"},{"ruleId":"564","replacedBy":"639"},{"ruleId":"566","severity":1,"message":"640","line":1,"column":17,"nodeType":"568","messageId":"569","endLine":1,"endColumn":26},{"ruleId":"577","severity":1,"message":"641","line":53,"column":3,"nodeType":"568","endLine":53,"endColumn":12,"suggestions":"642"},{"ruleId":"571","severity":1,"message":"572","line":54,"column":22,"nodeType":"573","messageId":"574","endLine":54,"endColumn":24},{"ruleId":"571","severity":1,"message":"572","line":66,"column":38,"nodeType":"573","messageId":"574","endLine":66,"endColumn":40},{"ruleId":"571","severity":1,"message":"572","line":70,"column":33,"nodeType":"573","messageId":"574","endLine":70,"endColumn":35},{"ruleId":"577","severity":1,"message":"643","line":78,"column":6,"nodeType":"581","endLine":78,"endColumn":27,"suggestions":"644"},{"ruleId":"571","severity":1,"message":"572","line":91,"column":40,"nodeType":"573","messageId":"574","endLine":91,"endColumn":42},{"ruleId":"577","severity":1,"message":"643","line":100,"column":6,"nodeType":"581","endLine":100,"endColumn":29,"suggestions":"645"},{"ruleId":"594","severity":1,"message":"595","line":215,"column":17,"nodeType":"596","endLine":218,"endColumn":19},{"ruleId":"571","severity":1,"message":"572","line":252,"column":33,"nodeType":"573","messageId":"574","endLine":252,"endColumn":35},{"ruleId":"571","severity":1,"message":"572","line":257,"column":63,"nodeType":"573","messageId":"574","endLine":257,"endColumn":65},{"ruleId":"571","severity":1,"message":"572","line":261,"column":39,"nodeType":"573","messageId":"574","endLine":261,"endColumn":41},{"ruleId":"571","severity":1,"message":"572","line":262,"column":32,"nodeType":"573","messageId":"574","endLine":262,"endColumn":34},{"ruleId":"571","severity":1,"message":"572","line":267,"column":34,"nodeType":"573","messageId":"574","endLine":267,"endColumn":36},{"ruleId":"571","severity":1,"message":"572","line":271,"column":34,"nodeType":"573","messageId":"574","endLine":271,"endColumn":36},{"ruleId":"577","severity":1,"message":"636","line":32,"column":6,"nodeType":"581","endLine":32,"endColumn":8,"suggestions":"646"},{"ruleId":"571","severity":1,"message":"572","line":127,"column":24,"nodeType":"573","messageId":"574","endLine":127,"endColumn":26},{"ruleId":"571","severity":1,"message":"572","line":127,"column":45,"nodeType":"573","messageId":"574","endLine":127,"endColumn":47},{"ruleId":"577","severity":1,"message":"647","line":38,"column":8,"nodeType":"581","endLine":38,"endColumn":10,"suggestions":"648"},{"ruleId":"566","severity":1,"message":"649","line":14,"column":17,"nodeType":"568","messageId":"569","endLine":14,"endColumn":24},{"ruleId":"577","severity":1,"message":"650","line":37,"column":6,"nodeType":"581","endLine":37,"endColumn":8,"suggestions":"651"},{"ruleId":"566","severity":1,"message":"600","line":54,"column":11,"nodeType":"568","messageId":"569","endLine":54,"endColumn":15},{"ruleId":"571","severity":1,"message":"572","line":91,"column":55,"nodeType":"573","messageId":"574","endLine":91,"endColumn":57},{"ruleId":"571","severity":1,"message":"572","line":94,"column":49,"nodeType":"573","messageId":"574","endLine":94,"endColumn":51},{"ruleId":"571","severity":1,"message":"572","line":97,"column":52,"nodeType":"573","messageId":"574","endLine":97,"endColumn":54},{"ruleId":"577","severity":1,"message":"578","line":281,"column":13,"nodeType":"579","endLine":341,"endColumn":4},{"ruleId":"577","severity":1,"message":"583","line":341,"column":6,"nodeType":"581","endLine":341,"endColumn":21,"suggestions":"652"},{"ruleId":"577","severity":1,"message":"578","line":344,"column":13,"nodeType":"579","endLine":362,"endColumn":4},{"ruleId":"653","severity":1,"message":"654","line":354,"column":13,"nodeType":"655","messageId":"574","endLine":354,"endColumn":25},{"ruleId":"577","severity":1,"message":"583","line":362,"column":6,"nodeType":"581","endLine":362,"endColumn":19,"suggestions":"656"},{"ruleId":"657","severity":1,"message":"658","line":529,"column":27,"nodeType":"659","messageId":"660","endLine":529,"endColumn":50},{"ruleId":"657","severity":1,"message":"658","line":553,"column":27,"nodeType":"659","messageId":"660","endLine":553,"endColumn":50},{"ruleId":"657","severity":1,"message":"658","line":580,"column":27,"nodeType":"659","messageId":"660","endLine":580,"endColumn":50},{"ruleId":"657","severity":1,"message":"658","line":612,"column":27,"nodeType":"659","messageId":"660","endLine":612,"endColumn":50},{"ruleId":"657","severity":1,"message":"658","line":630,"column":27,"nodeType":"659","messageId":"660","endLine":630,"endColumn":50},{"ruleId":"577","severity":1,"message":"583","line":53,"column":6,"nodeType":"581","endLine":53,"endColumn":8,"suggestions":"661"},{"ruleId":"566","severity":1,"message":"589","line":1,"column":17,"nodeType":"568","messageId":"569","endLine":1,"endColumn":26},{"ruleId":"566","severity":1,"message":"567","line":1,"column":28,"nodeType":"568","messageId":"569","endLine":1,"endColumn":36},{"ruleId":"566","severity":1,"message":"662","line":1,"column":8,"nodeType":"568","messageId":"569","endLine":1,"endColumn":21},{"ruleId":"571","severity":1,"message":"572","line":17,"column":34,"nodeType":"573","messageId":"574","endLine":17,"endColumn":36},{"ruleId":"577","severity":1,"message":"578","line":27,"column":13,"nodeType":"579","endLine":51,"endColumn":4},{"ruleId":"577","severity":1,"message":"583","line":51,"column":6,"nodeType":"581","endLine":51,"endColumn":37,"suggestions":"663"},{"ruleId":"571","severity":1,"message":"572","line":86,"column":36,"nodeType":"573","messageId":"574","endLine":86,"endColumn":38},{"ruleId":"571","severity":1,"message":"572","line":15,"column":31,"nodeType":"573","messageId":"574","endLine":15,"endColumn":33},{"ruleId":"577","severity":1,"message":"664","line":18,"column":6,"nodeType":"581","endLine":18,"endColumn":25,"suggestions":"665"},{"ruleId":"566","severity":1,"message":"666","line":9,"column":18,"nodeType":"568","messageId":"569","endLine":9,"endColumn":35},{"ruleId":"571","severity":1,"message":"572","line":19,"column":31,"nodeType":"573","messageId":"574","endLine":19,"endColumn":33},{"ruleId":"577","severity":1,"message":"664","line":22,"column":6,"nodeType":"581","endLine":22,"endColumn":24,"suggestions":"667"},{"ruleId":"566","severity":1,"message":"666","line":10,"column":18,"nodeType":"568","messageId":"569","endLine":10,"endColumn":35},{"ruleId":"571","severity":1,"message":"572","line":20,"column":31,"nodeType":"573","messageId":"574","endLine":20,"endColumn":33},{"ruleId":"577","severity":1,"message":"664","line":23,"column":6,"nodeType":"581","endLine":23,"endColumn":24,"suggestions":"668"},{"ruleId":"562","replacedBy":"669"},{"ruleId":"564","replacedBy":"670"},{"ruleId":"566","severity":1,"message":"671","line":16,"column":17,"nodeType":"568","messageId":"569","endLine":16,"endColumn":25},{"ruleId":"566","severity":1,"message":"672","line":43,"column":10,"nodeType":"568","messageId":"569","endLine":43,"endColumn":14},{"ruleId":"577","severity":1,"message":"578","line":52,"column":13,"nodeType":"579","endLine":72,"endColumn":4},{"ruleId":"577","severity":1,"message":"673","line":72,"column":6,"nodeType":"581","endLine":72,"endColumn":14,"suggestions":"674"},{"ruleId":"571","severity":1,"message":"572","line":86,"column":33,"nodeType":"573","messageId":"574","endLine":86,"endColumn":35},{"ruleId":"571","severity":1,"message":"572","line":92,"column":21,"nodeType":"573","messageId":"574","endLine":92,"endColumn":23},{"ruleId":"571","severity":1,"message":"572","line":95,"column":21,"nodeType":"573","messageId":"574","endLine":95,"endColumn":23},{"ruleId":"571","severity":1,"message":"572","line":293,"column":30,"nodeType":"573","messageId":"574","endLine":293,"endColumn":32},{"ruleId":"566","severity":1,"message":"675","line":15,"column":18,"nodeType":"568","messageId":"569","endLine":15,"endColumn":27},{"ruleId":"577","severity":1,"message":"578","line":23,"column":13,"nodeType":"579","endLine":33,"endColumn":4},{"ruleId":"577","severity":1,"message":"676","line":33,"column":6,"nodeType":"581","endLine":33,"endColumn":14,"suggestions":"677"},{"ruleId":"566","severity":1,"message":"589","line":1,"column":17,"nodeType":"568","messageId":"569","endLine":1,"endColumn":26},{"ruleId":"566","severity":1,"message":"567","line":1,"column":28,"nodeType":"568","messageId":"569","endLine":1,"endColumn":36},{"ruleId":"566","severity":1,"message":"567","line":1,"column":17,"nodeType":"568","messageId":"569","endLine":1,"endColumn":25},{"ruleId":"566","severity":1,"message":"589","line":1,"column":27,"nodeType":"568","messageId":"569","endLine":1,"endColumn":36},{"ruleId":"571","severity":1,"message":"572","line":52,"column":30,"nodeType":"573","messageId":"574","endLine":52,"endColumn":32},{"ruleId":"571","severity":1,"message":"572","line":53,"column":26,"nodeType":"573","messageId":"574","endLine":53,"endColumn":28},{"ruleId":"571","severity":1,"message":"572","line":55,"column":30,"nodeType":"573","messageId":"574","endLine":55,"endColumn":32},{"ruleId":"571","severity":1,"message":"572","line":56,"column":27,"nodeType":"573","messageId":"574","endLine":56,"endColumn":29},{"ruleId":"571","severity":1,"message":"572","line":57,"column":27,"nodeType":"573","messageId":"574","endLine":57,"endColumn":29},{"ruleId":"571","severity":1,"message":"572","line":58,"column":27,"nodeType":"573","messageId":"574","endLine":58,"endColumn":29},{"ruleId":"571","severity":1,"message":"572","line":59,"column":22,"nodeType":"573","messageId":"574","endLine":59,"endColumn":24},{"ruleId":"571","severity":1,"message":"572","line":60,"column":26,"nodeType":"573","messageId":"574","endLine":60,"endColumn":28},{"ruleId":"571","severity":1,"message":"572","line":61,"column":30,"nodeType":"573","messageId":"574","endLine":61,"endColumn":32},{"ruleId":"571","severity":1,"message":"572","line":62,"column":26,"nodeType":"573","messageId":"574","endLine":62,"endColumn":28},{"ruleId":"571","severity":1,"message":"572","line":63,"column":27,"nodeType":"573","messageId":"574","endLine":63,"endColumn":29},{"ruleId":"571","severity":1,"message":"572","line":64,"column":27,"nodeType":"573","messageId":"574","endLine":64,"endColumn":29},{"ruleId":"571","severity":1,"message":"572","line":65,"column":23,"nodeType":"573","messageId":"574","endLine":65,"endColumn":25},{"ruleId":"571","severity":1,"message":"572","line":66,"column":33,"nodeType":"573","messageId":"574","endLine":66,"endColumn":35},{"ruleId":"571","severity":1,"message":"572","line":71,"column":30,"nodeType":"573","messageId":"574","endLine":71,"endColumn":32},{"ruleId":"571","severity":1,"message":"572","line":235,"column":27,"nodeType":"573","messageId":"574","endLine":235,"endColumn":29},{"ruleId":"571","severity":1,"message":"572","line":235,"column":59,"nodeType":"573","messageId":"574","endLine":235,"endColumn":61},{"ruleId":"571","severity":1,"message":"572","line":241,"column":27,"nodeType":"573","messageId":"574","endLine":241,"endColumn":29},{"ruleId":"571","severity":1,"message":"572","line":241,"column":56,"nodeType":"573","messageId":"574","endLine":241,"endColumn":58},{"ruleId":"571","severity":1,"message":"572","line":247,"column":27,"nodeType":"573","messageId":"574","endLine":247,"endColumn":29},{"ruleId":"571","severity":1,"message":"572","line":247,"column":58,"nodeType":"573","messageId":"574","endLine":247,"endColumn":60},{"ruleId":"571","severity":1,"message":"572","line":253,"column":31,"nodeType":"573","messageId":"574","endLine":253,"endColumn":33},{"ruleId":"571","severity":1,"message":"572","line":258,"column":31,"nodeType":"573","messageId":"574","endLine":258,"endColumn":33},{"ruleId":"571","severity":1,"message":"572","line":282,"column":27,"nodeType":"573","messageId":"574","endLine":282,"endColumn":29},{"ruleId":"566","severity":1,"message":"678","line":5,"column":8,"nodeType":"568","messageId":"569","endLine":5,"endColumn":22},{"ruleId":"566","severity":1,"message":"679","line":6,"column":8,"nodeType":"568","messageId":"569","endLine":6,"endColumn":26},{"ruleId":"566","severity":1,"message":"680","line":10,"column":10,"nodeType":"568","messageId":"569","endLine":10,"endColumn":21},{"ruleId":"566","severity":1,"message":"681","line":10,"column":23,"nodeType":"568","messageId":"569","endLine":10,"endColumn":37},{"ruleId":"566","severity":1,"message":"682","line":29,"column":11,"nodeType":"568","messageId":"569","endLine":29,"endColumn":17},{"ruleId":"566","severity":1,"message":"683","line":30,"column":22,"nodeType":"568","messageId":"569","endLine":30,"endColumn":37},{"ruleId":"577","severity":1,"message":"684","line":34,"column":6,"nodeType":"581","endLine":34,"endColumn":8,"suggestions":"685"},{"ruleId":"577","severity":1,"message":"578","line":38,"column":13,"nodeType":"579","endLine":44,"endColumn":4},{"ruleId":"577","severity":1,"message":"686","line":44,"column":6,"nodeType":"581","endLine":44,"endColumn":19,"suggestions":"687"},{"ruleId":"566","severity":1,"message":"688","line":22,"column":7,"nodeType":"568","messageId":"569","endLine":22,"endColumn":10},{"ruleId":"566","severity":1,"message":"689","line":29,"column":28,"nodeType":"568","messageId":"569","endLine":29,"endColumn":47},{"ruleId":"566","severity":1,"message":"690","line":39,"column":11,"nodeType":"568","messageId":"569","endLine":39,"endColumn":24},{"ruleId":"571","severity":1,"message":"572","line":43,"column":19,"nodeType":"573","messageId":"574","endLine":43,"endColumn":21},{"ruleId":"571","severity":1,"message":"572","line":198,"column":47,"nodeType":"573","messageId":"574","endLine":198,"endColumn":49},{"ruleId":"566","severity":1,"message":"567","line":1,"column":17,"nodeType":"568","messageId":"569","endLine":1,"endColumn":25},{"ruleId":"566","severity":1,"message":"589","line":1,"column":27,"nodeType":"568","messageId":"569","endLine":1,"endColumn":36},{"ruleId":"571","severity":1,"message":"572","line":27,"column":41,"nodeType":"573","messageId":"574","endLine":27,"endColumn":43},{"ruleId":"571","severity":1,"message":"572","line":28,"column":29,"nodeType":"573","messageId":"574","endLine":28,"endColumn":31},{"ruleId":"571","severity":1,"message":"572","line":31,"column":33,"nodeType":"573","messageId":"574","endLine":31,"endColumn":35},{"ruleId":"577","severity":1,"message":"691","line":44,"column":6,"nodeType":"581","endLine":44,"endColumn":8,"suggestions":"692"},{"ruleId":"566","severity":1,"message":"690","line":19,"column":11,"nodeType":"568","messageId":"569","endLine":19,"endColumn":24},{"ruleId":"571","severity":1,"message":"572","line":22,"column":19,"nodeType":"573","messageId":"574","endLine":22,"endColumn":21},{"ruleId":"566","severity":1,"message":"693","line":27,"column":28,"nodeType":"568","messageId":"569","endLine":27,"endColumn":47},{"ruleId":"566","severity":1,"message":"694","line":36,"column":22,"nodeType":"568","messageId":"569","endLine":36,"endColumn":35},{"ruleId":"571","severity":1,"message":"572","line":152,"column":47,"nodeType":"573","messageId":"574","endLine":152,"endColumn":49},{"ruleId":"566","severity":1,"message":"695","line":12,"column":3,"nodeType":"568","messageId":"569","endLine":12,"endColumn":9},{"ruleId":"566","severity":1,"message":"696","line":17,"column":3,"nodeType":"568","messageId":"569","endLine":17,"endColumn":10},{"ruleId":"571","severity":1,"message":"572","line":42,"column":19,"nodeType":"573","messageId":"574","endLine":42,"endColumn":21},{"ruleId":"577","severity":1,"message":"578","line":48,"column":13,"nodeType":"579","endLine":68,"endColumn":4},{"ruleId":"571","severity":1,"message":"572","line":50,"column":23,"nodeType":"573","messageId":"574","endLine":50,"endColumn":25},{"ruleId":"571","severity":1,"message":"588","line":56,"column":23,"nodeType":"573","messageId":"574","endLine":56,"endColumn":25},{"ruleId":"577","severity":1,"message":"697","line":68,"column":6,"nodeType":"581","endLine":68,"endColumn":8,"suggestions":"698"},{"ruleId":"577","severity":1,"message":"578","line":72,"column":13,"nodeType":"579","endLine":127,"endColumn":4},{"ruleId":"571","severity":1,"message":"572","line":497,"column":55,"nodeType":"573","messageId":"574","endLine":497,"endColumn":57},{"ruleId":"566","severity":1,"message":"699","line":30,"column":9,"nodeType":"568","messageId":"569","endLine":30,"endColumn":13},{"ruleId":"571","severity":1,"message":"572","line":104,"column":31,"nodeType":"573","messageId":"574","endLine":104,"endColumn":33},{"ruleId":"566","severity":1,"message":"700","line":111,"column":13,"nodeType":"568","messageId":"569","endLine":111,"endColumn":21},{"ruleId":"571","severity":1,"message":"572","line":137,"column":31,"nodeType":"573","messageId":"574","endLine":137,"endColumn":33},{"ruleId":"594","severity":1,"message":"595","line":191,"column":9,"nodeType":"596","endLine":191,"endColumn":71},{"ruleId":"594","severity":1,"message":"595","line":192,"column":9,"nodeType":"596","endLine":192,"endColumn":74},{"ruleId":"701","severity":1,"message":"702","line":198,"column":15,"nodeType":"596","endLine":198,"endColumn":27},{"ruleId":"701","severity":1,"message":"702","line":255,"column":23,"nodeType":"596","endLine":258,"endColumn":24},{"ruleId":"703","severity":1,"message":"704","line":256,"column":30,"nodeType":"705","messageId":"706","endLine":256,"endColumn":44},{"ruleId":"701","severity":1,"message":"702","line":391,"column":23,"nodeType":"596","endLine":394,"endColumn":24},{"ruleId":"703","severity":1,"message":"704","line":392,"column":30,"nodeType":"705","messageId":"706","endLine":392,"endColumn":44},{"ruleId":"701","severity":1,"message":"702","line":452,"column":23,"nodeType":"596","endLine":455,"endColumn":24},{"ruleId":"703","severity":1,"message":"704","line":453,"column":30,"nodeType":"705","messageId":"706","endLine":453,"endColumn":44},{"ruleId":"571","severity":1,"message":"572","line":16,"column":42,"nodeType":"573","messageId":"574","endLine":16,"endColumn":44},{"ruleId":"571","severity":1,"message":"572","line":19,"column":49,"nodeType":"573","messageId":"574","endLine":19,"endColumn":51},{"ruleId":"566","severity":1,"message":"707","line":24,"column":13,"nodeType":"568","messageId":"569","endLine":24,"endColumn":17},{"ruleId":"577","severity":1,"message":"708","line":28,"column":6,"nodeType":"581","endLine":28,"endColumn":13,"suggestions":"709"},"no-native-reassign",["710"],"no-negated-in-lhs",["711"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'PreviewOther' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'loaded' is assigned a value but never used.","'setLoaded' is assigned a value but never used.","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook useEffect has missing dependencies: 'axiosInstance' and 'partnershipID'. Either include them or remove the dependency array.","ArrayExpression",["712"],"React Hook useEffect has a missing dependency: 'axiosInstance'. Either include it or remove the dependency array.",["713"],["714"],"React Hook useEffect has a missing dependency: 'getDashboardData'. Either include it or remove the dependency array.",["715"],"Expected '!==' and instead saw '!='.","'useEffect' is defined but never used.","'invoiceData' is assigned a value but never used.","'isInvoice' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'auth.eori_nr', 'axiosInstance', 'transactionData', and 'transactionId'. Either include them or remove the dependency array.",["716"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'AuthServices' is defined but never used.",["710"],["711"],"'auth' is assigned a value but never used.","'datei' is assigned a value but never used.","'setShowConfirmation' is assigned a value but never used.","'isLoading' is assigned a value but never used.","'setIsLoading' is assigned a value but never used.","'author_company' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'axiosInstance' and 'props.file'. Either include them or remove the dependency array.",["717"],"no-use-before-define","'name' was used before it was defined.","usedBeforeDefined","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","'declarationData' is assigned a value but never used.","'anmeldungVorhanden' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'axiosInstance' and 'props.id'. Either include them or remove the dependency array.",["718"],["710"],["711"],"'isValidElement' is defined but never used.","'init' is defined but never used.","'createZollanmeldung' is defined but never used.","'LZString' is defined but never used.","'crypto' is assigned a value but never used.","'getDokumentenhash' is defined but never used.","'issueDate' is assigned a value but never used.","'setIssueDate' is assigned a value but never used.","'newDocumentData' is assigned a value but never used.","'newDocumentID' is assigned a value but never used.","'tx' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props?.isZoll'. Either include it or remove the dependency array.",["719"],"'requestedCompany' is assigned a value but never used.","'setrequestedCompany' is assigned a value but never used.","'setTestRerender' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'axiosPrivate'. Either include it or remove the dependency array.",["720"],["710"],["711"],"'Component' is defined but never used.","React Hook useEffect contains a call to 'setIsImporteur'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [auth.eori_nr, props.importeur] as a second argument to the useEffect Hook.",["721"],"React Hook useEffect has a missing dependency: 'props.id'. Either include it or remove the dependency array.",["722"],["723"],["724"],"React Hook useEffect has missing dependencies: 'auth?.role' and 'dataUpdate'. Either include them or remove the dependency array.",["725"],"'setAuth' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'auth?.accessToken', 'dataUpdate', and 'refresh'. Either include them or remove the dependency array.",["726"],["727"],"no-dupe-keys","Duplicate key 'gesamtbetrag'.","ObjectExpression",["728"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","noDuplicateProps",["729"],"'axiosInstance' is defined but never used.",["730"],"React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["731"],"'SelectChangeEvent' is defined but never used.",["732"],["733"],["710"],["711"],"'setEmail' is assigned a value but never used.","'open' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'axiosInstance' and 'declarationID'. Either include them or remove the dependency array.",["734"],"'setreload' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'auth.eori_nr' and 'axiosInstance'. Either include them or remove the dependency array.",["735"],"'SideNavigation' is defined but never used.","'ZollSideNavigation' is defined but never used.","'expandedNav' is assigned a value but never used.","'setExpandedNav' is assigned a value but never used.","'search' is assigned a value but never used.","'setSearchParams' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'suchbegriff'. Either include it or remove the dependency array.",["736"],"React Hook useEffect has a missing dependency: 'handleSearch'. Either include it or remove the dependency array.",["737"],"'url' is assigned a value but never used.","'setDocumentMetadata' is assigned a value but never used.","'transactionId' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'axiosInstance' and 'documentID'. Either include them or remove the dependency array.",["738"],"'setAuftragMetadaten' is assigned a value but never used.","'setFieldValue' is assigned a value but never used.","'MDBBtn' is defined but never used.","'MDBIcon' is defined but never used.","React Hook useEffect has missing dependencies: 'declarationID' and 'transactionId'. Either include them or remove the dependency array.",["739"],"'from' is assigned a value but never used.","'response' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","no-script-url","Script URL is a form of eval.","Literal","unexpectedScriptURL","'text' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'props.alert?.description', 'props.alert?.target_content_type', and 'props.alert.target_object_id'. Either include them or remove the dependency array. Outer scope values like 'alert' aren't valid dependencies because mutating them doesn't re-render the component.",["740"],"no-global-assign","no-unsafe-negation",{"desc":"741","fix":"742"},{"desc":"743","fix":"744"},{"desc":"743","fix":"745"},{"desc":"746","fix":"747"},{"desc":"748","fix":"749"},{"desc":"750","fix":"751"},{"desc":"752","fix":"753"},{"desc":"754","fix":"755"},{"desc":"756","fix":"757"},{"desc":"758","fix":"759"},{"desc":"760","fix":"761"},{"desc":"762","fix":"763"},{"desc":"764","fix":"765"},{"desc":"766","fix":"767"},{"desc":"768","fix":"769"},{"desc":"770","fix":"771"},{"desc":"772","fix":"773"},{"desc":"743","fix":"774"},{"desc":"775","fix":"776"},{"desc":"777","fix":"778"},{"desc":"779","fix":"780"},{"desc":"779","fix":"781"},{"desc":"782","fix":"783"},{"desc":"784","fix":"785"},{"desc":"786","fix":"787"},{"desc":"788","fix":"789"},{"desc":"790","fix":"791"},{"desc":"792","fix":"793"},{"desc":"794","fix":"795"},"Update the dependencies array to be: [reload, location, partnershipID, axiosInstance]",{"range":"796","text":"797"},"Update the dependencies array to be: [axiosInstance]",{"range":"798","text":"799"},{"range":"800","text":"799"},"Update the dependencies array to be: [getDashboardData]",{"range":"801","text":"802"},"Update the dependencies array to be: [auth.eori_nr, axiosInstance, newDocument, transactionData, transactionId]",{"range":"803","text":"804"},"Update the dependencies array to be: [ShowConfirmation, axiosInstance, props.file]",{"range":"805","text":"806"},"Update the dependencies array to be: [axiosInstance, props.id]",{"range":"807","text":"808"},"Update the dependencies array to be: [props?.isZoll]",{"range":"809","text":"810"},"Update the dependencies array to be: [axiosPrivate, testRerender]",{"range":"811","text":"812"},"Add dependencies array: [auth.eori_nr, props.importeur]",{"range":"813","text":"814"},"Update the dependencies array to be: [props.documentsData, props.id]",{"range":"815","text":"816"},"Update the dependencies array to be: [props.declarationData, props.id]",{"range":"817","text":"818"},"Update the dependencies array to be: [axiosPrivate]",{"range":"819","text":"820"},"Update the dependencies array to be: [auth?.role, dataUpdate]",{"range":"821","text":"822"},"Update the dependencies array to be: [auth?.accessToken, dataUpdate, refresh]",{"range":"823","text":"824"},"Update the dependencies array to be: [axiosInstance, transactionId]",{"range":"825","text":"826"},"Update the dependencies array to be: [axiosInstance, usedInvoice]",{"range":"827","text":"828"},{"range":"829","text":"799"},"Update the dependencies array to be: [userCompanyEORI, props.reload, axiosInstance]",{"range":"830","text":"831"},"Update the dependencies array to be: [props, props.usedInvoice]",{"range":"832","text":"833"},"Update the dependencies array to be: [props, props.fieldValue]",{"range":"834","text":"835"},{"range":"836","text":"835"},"Update the dependencies array to be: [axiosInstance, declarationID, reload]",{"range":"837","text":"838"},"Update the dependencies array to be: [auth.eori_nr, axiosInstance, reload]",{"range":"839","text":"840"},"Update the dependencies array to be: [suchbegriff]",{"range":"841","text":"842"},"Update the dependencies array to be: [handleSearch, suchbegriff]",{"range":"843","text":"844"},"Update the dependencies array to be: [axiosInstance, documentID]",{"range":"845","text":"846"},"Update the dependencies array to be: [declarationID, transactionId]",{"range":"847","text":"848"},"Update the dependencies array to be: [props.alert?.description, props.alert?.target_content_type, props.alert.target_object_id]",{"range":"849","text":"850"},[2221,2239],"[reload, location, partnershipID, axiosInstance]",[2385,2387],"[axiosInstance]",[2543,2545],[3332,3334],"[getDashboardData]",[4503,4516],"[auth.eori_nr, axiosInstance, newDocument, transactionData, transactionId]",[1258,1276],"[ShowConfirmation, axiosInstance, props.file]",[1304,1306],"[axiosInstance, props.id]",[7059,7061],"[props?.isZoll]",[902,916],"[axiosPrivate, testRerender]",[1312,1312],", [auth.eori_nr, props.importeur]",[1972,1993],"[props.documentsData, props.id]",[2750,2773],"[props.declarationData, props.id]",[1048,1050],"[axiosPrivate]",[1165,1167],"[auth?.role, dataUpdate]",[1144,1146],"[auth?.accessToken, dataUpdate, refresh]",[10049,10064],"[axiosInstance, transactionId]",[10792,10805],"[axiosInstance, usedInvoice]",[1442,1444],[1678,1709],"[userCompanyEORI, props.reload, axiosInstance]",[535,554],"[props, props.usedInvoice]",[747,765],"[props, props.fieldValue]",[820,838],[2461,2469],"[axiosInstance, declarationID, reload]",[934,942],"[auth.eori_nr, axiosInstance, reload]",[1042,1044],"[suchbegriff]",[1244,1257],"[handleSearch, suchbegriff]",[1624,1626],"[axiosInstance, documentID]",[1882,1884],"[declarationID, transactionId]",[1045,1052],"[props.alert?.description, props.alert?.target_content_type, props.alert.target_object_id]"]