{"ast":null,"code":"var _jsxFileName = \"/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/components/Documents/DocumentCard.jsx\",\n    _s = $RefreshSig$();\n\nimport { React, useState, useEffect } from \"react\";\nimport { MDBCard, MDBCardBody, MDBCardTitle, MDBCardText, MDBCardHeader, MDBCardFooter, MDBBtn } from \"mdb-react-ui-kit\";\nimport useAxiosPrivate from \"../../hooks/useAxiosPrivate\";\nimport CardModal from \"./CardModal\"; //Hook für Contextabruf\n\nimport useAuth from \"../../hooks/useAuth\";\nimport { Link } from \"react-router-dom\";\nimport { getDokumentenHash } from \"../../Web3Client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction DocumentCard(props) {\n  _s();\n\n  const axiosInstance = useAxiosPrivate(); //Context mit Nutzerdaten abrufen\n\n  const {\n    auth\n  } = useAuth();\n  const [datei, setDatei] = useState([]);\n  const [fileLink, setFileLink] = useState(\"\");\n  const [ShowConfirmation, setShowConfirmation] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isVerified, setisVerified] = useState(false);\n  const author_company = props.author_company;\n  useEffect(() => {\n    //Abruf des Link zur Datei\n    //console.log(auth.pubkey);\n    if (props.file != null) axiosInstance.get(\"file/\" + props.file).then(res => {\n      setDatei(res.data);\n      setFileLink(res.data.file);\n      /*     console.log(author_company + auth.company)\n      console.log(props.confirmed) */\n\n      setIsLoading(true); // if (props.confirmed == true) {\n      //   setShowConfirmation(false);\n      //   console.log(\"bereits bestätigt, confirm auf True\");\n      // } else if (author_company == auth.company) {\n      //   //console.log(\"Firmen sind ungleich- Confirm auf False\")\n      // } else {\n      //   setShowConfirmation(true);\n      //   //console.log(\"Confirm auf True\")\n      // }\n    }, []);\n  }, [ShowConfirmation]); //Debugging Session\n\n  /*   useEffect(() => {\n    console.log(props.blockchain_rid);\n   }, [props.blockchain_rid]); */\n\n  useEffect(() => {\n    console.log(fileLink);\n  }, [fileLink]);\n\n  async function getFileFromUrl(url) {\n    let defaultType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"image/jpeg\";\n    const response = await fetch(url);\n    const data = await response.blob();\n    var name = name;\n    return new File([data], name, {\n      type: data.type || defaultType\n    });\n  }\n\n  async function verifyDocument(id) {\n    console.log(\"Dokument wird mit Blockchain abgeglichen.\"); //\n\n    const file = await getFileFromUrl(fileLink);\n    console.log(file);\n    console.log(\"hash ist da\");\n    proofFilehash(id, file, function (hashwert) {\n      console.log(\"Der Hashwert des Dokuments auf dem Server ist:\" + hashwert);\n      console.log(props.blockchain_did); //Hier wird blockchain hash abgerufen, Then funktioniert aber TX ist undefiniert\n\n      getDokumentenHash(props.blockchain_did).then(tx => {\n        //Rückgabe testen\n        console.log(\"hier sollte der Hashwert aus der Blockchain stehen:\" + tx); //Abgleich durchführen\n\n        if (hashwert == tx) {\n          console.log(\"abgleich erfolgreich\");\n          return true;\n        } else {\n          console.log(\"Abgleich fehlgeschlagen\");\n          return false;\n        }\n      }).catch(err => {\n        console.log(\"Fehlgeschlagen. Fehlermeldung: \" + err);\n      });\n    });\n  }\n  /*   //Test der GetDokumentenash Methode\n  useEffect(() => {\n    console.log(props.blockchain_did)\n    getDokumentenHash(props.blockchain_did)\n  },[])  */\n\n\n  async function proofFilehash(_DokumentID, _file, callback) {\n    //Download der Datei\n    var crypto = require(\"crypto\");\n\n    var hashwert = \"\";\n    const fileReader = new FileReader();\n    fileReader.readAsText(_file);\n\n    fileReader.onload = function (e) {\n      hashwert = crypto.createHash(\"sha512\").update(e.target.result).digest(\"hex\");\n      callback(hashwert);\n    };\n  } // State für \"Dokument anzeigen\" Modal\n\n\n  const [showDocumentModal, setShowDocumentModal] = useState(false); // Funktion für Manipulation von Modal (als props weitergereicht)\n\n  function toggleShowDocumentModal() {\n    setShowDocumentModal(!showDocumentModal);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(MDBCard, {\n      className: \"h-100\",\n      style: {\n        minHeight: \"300px\",\n        width: \"300px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(MDBCardBody, {\n        children: [/*#__PURE__*/_jsxDEV(MDBCardTitle, {\n          children: props.type + \" \" + \"(\" + props.documentDate + \")\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MDBCardText, {\n          className: \"my-4\",\n          children: props.description == \"\" ? /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 40\n          }, this) : props.description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MDBBtn, {\n          outline: true,\n          className: \"me-2\",\n          onClick: verifyDocument,\n          children: \"Verifizieren\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Link, {\n          style: {\n            display: \"block\",\n            margin: \"1rem 0\"\n          },\n          to: \"document/\" + props.id.toString(),\n          params: {\n            title: \"Hello\"\n          },\n          children: /*#__PURE__*/_jsxDEV(MDBBtn, {\n            outline: true,\n            onClick: toggleShowDocumentModal,\n            children: \"Anzeigen\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 13\n          }, this)\n        }, props.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MDBCardFooter, {\n        className: \"text-muted\",\n        children: [\"Hochgeladen am: \", props.uploadDate, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 11\n        }, this), \"von \", props.author_company, \" (\", props.author, \")\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CardModal, {\n      basicModal: showDocumentModal,\n      setBasicModal: setShowDocumentModal,\n      toggleShow: toggleShowDocumentModal,\n      title: props.title,\n      description: props.description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(DocumentCard, \"yTIiuttlR1XWiIie+5qs5mgAF+g=\", false, function () {\n  return [useAxiosPrivate, useAuth];\n});\n\n_c = DocumentCard;\nexport default DocumentCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"DocumentCard\");","map":{"version":3,"sources":["/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/components/Documents/DocumentCard.jsx"],"names":["React","useState","useEffect","MDBCard","MDBCardBody","MDBCardTitle","MDBCardText","MDBCardHeader","MDBCardFooter","MDBBtn","useAxiosPrivate","CardModal","useAuth","Link","getDokumentenHash","DocumentCard","props","axiosInstance","auth","datei","setDatei","fileLink","setFileLink","ShowConfirmation","setShowConfirmation","isLoading","setIsLoading","isVerified","setisVerified","author_company","file","get","then","res","data","console","log","getFileFromUrl","url","defaultType","response","fetch","blob","name","File","type","verifyDocument","id","proofFilehash","hashwert","blockchain_did","tx","catch","err","_DokumentID","_file","callback","crypto","require","fileReader","FileReader","readAsText","onload","e","createHash","update","target","result","digest","showDocumentModal","setShowDocumentModal","toggleShowDocumentModal","minHeight","width","documentDate","description","display","margin","toString","title","uploadDate","author"],"mappings":"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","sourcesContent":["import { React, useState, useEffect } from \"react\";\nimport {\n  MDBCard,\n  MDBCardBody,\n  MDBCardTitle,\n  MDBCardText,\n  MDBCardHeader,\n  MDBCardFooter,\n  MDBBtn,\n} from \"mdb-react-ui-kit\";\nimport useAxiosPrivate from \"../../hooks/useAxiosPrivate\";\nimport CardModal from \"./CardModal\";\n//Hook für Contextabruf\nimport useAuth from \"../../hooks/useAuth\";\nimport { Link } from \"react-router-dom\";\nimport { getDokumentenHash } from \"../../Web3Client\";\n\nfunction DocumentCard(props) {\n  const axiosInstance = useAxiosPrivate();\n  //Context mit Nutzerdaten abrufen\n  const { auth } = useAuth();\n  const [datei, setDatei] = useState([]);\n  const [fileLink, setFileLink] = useState(\"\");\n  const [ShowConfirmation, setShowConfirmation] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n\n  const [isVerified, setisVerified] = useState(false);\n\n  const author_company = props.author_company;\n\n  useEffect(() => {\n    //Abruf des Link zur Datei\n    //console.log(auth.pubkey);\n\n    if (props.file != null)\n      axiosInstance.get(\"file/\" + props.file).then((res) => {\n        setDatei(res.data);\n        setFileLink(res.data.file);\n        /*     console.log(author_company + auth.company)\n      console.log(props.confirmed) */\n        setIsLoading(true);\n        // if (props.confirmed == true) {\n        //   setShowConfirmation(false);\n        //   console.log(\"bereits bestätigt, confirm auf True\");\n        // } else if (author_company == auth.company) {\n        //   //console.log(\"Firmen sind ungleich- Confirm auf False\")\n        // } else {\n        //   setShowConfirmation(true);\n        //   //console.log(\"Confirm auf True\")\n        // }\n      }, []);\n  }, [ShowConfirmation]);\n\n  //Debugging Session\n  /*   useEffect(() => {\n    console.log(props.blockchain_rid);\n\n  }, [props.blockchain_rid]); */\n\n  useEffect(() => {\n    console.log(fileLink);\n  }, [fileLink]);\n\n  async function getFileFromUrl(url, defaultType = \"image/jpeg\") {\n    const response = await fetch(url);\n    const data = await response.blob();\n    var name = name;\n    return new File([data], name, {\n      type: data.type || defaultType,\n    });\n  }\n\n  async function verifyDocument(id) {\n    console.log(\"Dokument wird mit Blockchain abgeglichen.\");\n\n    //\n    const file = await getFileFromUrl(fileLink);\n    console.log(file);\n    console.log(\"hash ist da\");\n    proofFilehash(id, file, function (hashwert) {\n      console.log(\"Der Hashwert des Dokuments auf dem Server ist:\" + hashwert);\n      console.log(props.blockchain_did);\n      //Hier wird blockchain hash abgerufen, Then funktioniert aber TX ist undefiniert\n      getDokumentenHash(props.blockchain_did)\n        .then((tx) => {\n          //Rückgabe testen\n          console.log(\n            \"hier sollte der Hashwert aus der Blockchain stehen:\" + tx\n          );\n          //Abgleich durchführen\n          if (hashwert == tx) {\n            console.log(\"abgleich erfolgreich\");\n            return true;\n          } else {\n            console.log(\"Abgleich fehlgeschlagen\");\n            return false;\n          }\n        })\n        .catch((err) => {\n          console.log(\"Fehlgeschlagen. Fehlermeldung: \" + err);\n        });\n    });\n  }\n\n  /*   //Test der GetDokumentenash Methode\n  useEffect(() => {\n    console.log(props.blockchain_did)\n    getDokumentenHash(props.blockchain_did)\n  },[])  */\n\n  async function proofFilehash(_DokumentID, _file, callback) {\n    //Download der Datei\n    var crypto = require(\"crypto\");\n    var hashwert = \"\";\n    const fileReader = new FileReader();\n    fileReader.readAsText(_file);\n    fileReader.onload = function (e) {\n      hashwert = crypto\n        .createHash(\"sha512\")\n        .update(e.target.result)\n        .digest(\"hex\");\n      callback(hashwert);\n    };\n  }\n\n  // State für \"Dokument anzeigen\" Modal\n  const [showDocumentModal, setShowDocumentModal] = useState(false);\n  // Funktion für Manipulation von Modal (als props weitergereicht)\n  function toggleShowDocumentModal() {\n    setShowDocumentModal(!showDocumentModal);\n  }\n\n  return (\n    <>\n      <MDBCard className=\"h-100\" style={{ minHeight: \"300px\", width: \"300px\" }}>\n        <MDBCardBody>\n          <MDBCardTitle>\n            {props.type + \" \" + \"(\" + props.documentDate + \")\"}\n          </MDBCardTitle>\n          <MDBCardText className=\"my-4\">\n            {props.description == \"\" ? <br /> : props.description}\n          </MDBCardText>\n\n          {/* {props.confirmed ? (\n              <span> Bestätigt</span>\n            ) : (\n              <span> warten auf bestätigung</span>\n            )}\n          </MDBCardText>\n          <MDBBtn outline onClick={toggleShowDocumentModal}>\n            Anzeigen\n          </MDBBtn>\n          {ShowConfirmation ? (\n            <MDBBtn outline onClick={confirmDocument}>\n              Freigeben\n            </MDBBtn>\n          ) : (\n            <br />\n          )} */}\n\n          <MDBBtn outline className=\"me-2\" onClick={verifyDocument}>\n            Verifizieren\n          </MDBBtn>\n          <Link\n            style={{ display: \"block\", margin: \"1rem 0\" }}\n            to={\"document/\" + props.id.toString()}\n            key={props.id}\n            params={{ title: \"Hello\" }}\n          >\n            <MDBBtn outline onClick={toggleShowDocumentModal}>\n              Anzeigen\n            </MDBBtn>\n          </Link>\n        </MDBCardBody>\n        <MDBCardFooter className=\"text-muted\">\n          Hochgeladen am: {props.uploadDate}\n          <br />\n          von {props.author_company} ({props.author})\n        </MDBCardFooter>\n      </MDBCard>\n      <CardModal\n        basicModal={showDocumentModal}\n        setBasicModal={setShowDocumentModal}\n        toggleShow={toggleShowDocumentModal}\n        title={props.title}\n        description={props.description}\n      />\n    </>\n  );\n}\n\nexport default DocumentCard;\n"]},"metadata":{},"sourceType":"module"}