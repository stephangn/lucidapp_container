{"ast":null,"code":"var _jsxFileName = \"/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/components/Documents/DocumentCard.jsx\",\n    _s = $RefreshSig$();\n\nimport { React, useState, useEffect } from \"react\";\nimport { MDBCard, MDBCardBody, MDBCardTitle, MDBCardText, MDBCardHeader, MDBCardFooter, MDBBtn } from \"mdb-react-ui-kit\";\nimport useAxiosPrivate from \"../../hooks/useAxiosPrivate\";\nimport CardModal from \"./CardModal\"; //Hook f체r Contextabruf\n\nimport useAuth from \"../../hooks/useAuth\";\nimport { Link } from \"react-router-dom\";\nimport { uploadDokumentHash, getDokumentenhash } from \"../../Web3Client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction DocumentCard(props) {\n  _s();\n\n  const axiosInstance = useAxiosPrivate(); //Context mit Nutzerdaten abrufen\n\n  const {\n    auth\n  } = useAuth();\n  const [datei, setDatei] = useState([]);\n  const [fileLink, setFileLink] = useState(\"\");\n  const [ShowConfirmation, setShowConfirmation] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isVerified, setisVerified] = useState(false);\n  const author_company = props.author_company;\n  useEffect(() => {\n    //Abruf des Link zur Datei\n    //console.log(auth.pubkey);\n    if (props.file != null) axiosInstance.get(\"file/\" + props.file).then(res => {\n      setDatei(res.data);\n      setFileLink(res.data.file);\n      /*     console.log(author_company + auth.company)\n      console.log(props.confirmed) */\n\n      setIsLoading(true);\n\n      if (props.confirmed == true) {\n        setShowConfirmation(false);\n        console.log(\"bereits best채tigt, confirm auf True\");\n      } else if (author_company == auth.company) {//console.log(\"Firmen sind ungleich- Confirm auf False\")\n      } else {\n        setShowConfirmation(true); //console.log(\"Confirm auf True\")\n      }\n    }, []);\n  }, [ShowConfirmation]); //Debugging Session\n\n  /*   useEffect(() => {\n      console.log(props.blockchain_rid);\n  \n    }, [props.blockchain_rid]); */\n\n  useEffect(() => {\n    console.log(fileLink);\n  }, [fileLink]);\n\n  async function getFileFromUrl(url) {\n    let defaultType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'image/jpeg';\n    const response = await fetch(url);\n    const data = await response.blob();\n    var name = name;\n    return new File([data], name, {\n      type: data.type || defaultType\n    });\n  }\n\n  async function verifyDocument(id) {\n    console.log(\"Dokument wird mit Blockchain abgeglichen.\");\n    const file = await getFileFromUrl(fileLink);\n    console.log(file);\n    console.log(\"hash ist da\");\n    console.log(hash);\n\n    try {\n      const hash = await proofFilehash(props.file, file);\n    } finally {\n      console.log(hash);\n    }\n  }\n\n  async function proofFilehash(_DokumentID, _file, callback) {\n    //Download der Datei \n    var crypto = require('crypto');\n\n    var hashwert = \"\";\n    const fileReader = new FileReader();\n    fileReader.readAsText(_file);\n\n    fileReader.onload = function (e) {\n      hashwert = crypto.createHash('sha512').update(e.target.result).digest('hex');\n    };\n    /*     getDokumentenhash(_DokumentID)\n        .then((tx) => {\n          if(hashwert===tx){\n            return true;\n          }else{\n            return false;\n          }\n        })\n        .catch((err) => {\n          console.log(\"Fehlgeschlagen. Fehlermeldung: \" + err);\n      }); */\n\n  } // State f체r \"Dokument anzeigen\" Modal\n\n\n  const [showDocumentModal, setShowDocumentModal] = useState(false); // Funktion f체r Manipulation von Modal (als props weitergereicht)\n\n  function toggleShowDocumentModal() {\n    setShowDocumentModal(!showDocumentModal);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(MDBCard, {\n      className: \"h-100\",\n      style: {\n        minHeight: \"300px\",\n        width: \"300px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(MDBCardBody, {\n        children: [/*#__PURE__*/_jsxDEV(MDBCardTitle, {\n          children: props.type + \" \" + \"(\" + props.documentDate + \")\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MDBCardText, {\n          className: \"my-4\",\n          children: props.description == \"\" ? /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 40\n          }, this) : props.description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MDBBtn, {\n          outline: true,\n          className: \"me-2\",\n          onClick: verifyDocument,\n          children: \"Verifizieren\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MDBBtn, {\n          outline: true,\n          onClick: toggleShowDocumentModal,\n          children: \"Anzeigen\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MDBCardFooter, {\n        className: \"text-muted\",\n        children: [\"Hochgeladen am: \", props.uploadDate, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 11\n        }, this), \"von \", props.author_company, \" (\", props.author, \")\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CardModal, {\n      basicModal: showDocumentModal,\n      setBasicModal: setShowDocumentModal,\n      toggleShow: toggleShowDocumentModal,\n      title: props.title,\n      description: props.description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(DocumentCard, \"cEOrYiNn/LnPzPtJx92rBRxFd9o=\", false, function () {\n  return [useAxiosPrivate, useAuth];\n});\n\n_c = DocumentCard;\nexport default DocumentCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"DocumentCard\");","map":{"version":3,"sources":["/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/components/Documents/DocumentCard.jsx"],"names":["React","useState","useEffect","MDBCard","MDBCardBody","MDBCardTitle","MDBCardText","MDBCardHeader","MDBCardFooter","MDBBtn","useAxiosPrivate","CardModal","useAuth","Link","uploadDokumentHash","getDokumentenhash","DocumentCard","props","axiosInstance","auth","datei","setDatei","fileLink","setFileLink","ShowConfirmation","setShowConfirmation","isLoading","setIsLoading","isVerified","setisVerified","author_company","file","get","then","res","data","confirmed","console","log","company","getFileFromUrl","url","defaultType","response","fetch","blob","name","File","type","verifyDocument","id","hash","proofFilehash","_DokumentID","_file","callback","crypto","require","hashwert","fileReader","FileReader","readAsText","onload","e","createHash","update","target","result","digest","showDocumentModal","setShowDocumentModal","toggleShowDocumentModal","minHeight","width","documentDate","description","uploadDate","author","title"],"mappings":"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","sourcesContent":["import { React, useState, useEffect } from \"react\";\nimport {\n  MDBCard,\n  MDBCardBody,\n  MDBCardTitle,\n  MDBCardText,\n  MDBCardHeader,\n  MDBCardFooter,\n  MDBBtn,\n} from \"mdb-react-ui-kit\";\nimport useAxiosPrivate from \"../../hooks/useAxiosPrivate\";\nimport CardModal from \"./CardModal\";\n//Hook f체r Contextabruf\nimport useAuth from \"../../hooks/useAuth\";\nimport { Link } from \"react-router-dom\";\nimport { uploadDokumentHash, getDokumentenhash } from \"../../Web3Client\";\n\n\nfunction DocumentCard(props) {\n  const axiosInstance = useAxiosPrivate();\n  //Context mit Nutzerdaten abrufen\n  const { auth } = useAuth();\n  const [datei, setDatei] = useState([]);\n  const [fileLink,setFileLink]= useState(\"\")\n  const [ShowConfirmation, setShowConfirmation] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n\n  const [isVerified, setisVerified] = useState(false)\n\n  const author_company = props.author_company;\n\n  useEffect(() => {\n\n\n    //Abruf des Link zur Datei\n    //console.log(auth.pubkey);\n\n    if (props.file!=null)\n      axiosInstance.get(\"file/\" + props.file).then((res) => {\n\n        setDatei(res.data);\n        setFileLink(res.data.file)\n        /*     console.log(author_company + auth.company)\n      console.log(props.confirmed) */\n        setIsLoading(true);\n        if (props.confirmed == true) {\n          setShowConfirmation(false);\n          console.log(\"bereits best채tigt, confirm auf True\");\n        } else if (author_company == auth.company) {\n          //console.log(\"Firmen sind ungleich- Confirm auf False\")\n        } else {\n          setShowConfirmation(true);\n          //console.log(\"Confirm auf True\")\n        }\n    }, []);\n  }, [ShowConfirmation]);\n\n\n  //Debugging Session\n/*   useEffect(() => {\n    console.log(props.blockchain_rid);\n\n  }, [props.blockchain_rid]); */\n\n    useEffect(() => {\n      console.log(fileLink);\n    }, [fileLink]);\n\n\n\n  async function getFileFromUrl(url, defaultType = 'image/jpeg'){\n    const response = await fetch(url);\n    const data = await response.blob();\n    var name = name\n    return new File([data], name, {\n      type: data.type || defaultType,\n    });\n  }\n\n\n  async function verifyDocument(id) {\n    console.log(\"Dokument wird mit Blockchain abgeglichen.\");\n    const file = await getFileFromUrl(fileLink);\n    console.log(file)\n    console.log(\"hash ist da\");\n    console.log(hash)\n    try {\n      const hash = await proofFilehash(props.file, file)\n    }\n    finally {\n      console.log(hash)\n    }\n    \n  }\n\n  async function proofFilehash(_DokumentID, _file, callback){\n\n    //Download der Datei \n    var crypto = require('crypto');\n    var hashwert =\"\";\n    const fileReader = new FileReader();\n    fileReader.readAsText(_file);\n    fileReader.onload = (function (e)  {\n   \n        hashwert = crypto.createHash('sha512').update(e.target.result).digest('hex');\n    });\n    \n\n\n/*     getDokumentenhash(_DokumentID)\n    .then((tx) => {\n      if(hashwert===tx){\n        return true;\n      }else{\n        return false;\n      }\n    })\n    .catch((err) => {\n      console.log(\"Fehlgeschlagen. Fehlermeldung: \" + err);\n  }); */\n  }\n\n  // State f체r \"Dokument anzeigen\" Modal\n  const [showDocumentModal, setShowDocumentModal] = useState(false);\n  // Funktion f체r Manipulation von Modal (als props weitergereicht)\n  function toggleShowDocumentModal() {\n    setShowDocumentModal(!showDocumentModal);\n  }\n\n  return (\n    <>\n      <MDBCard className=\"h-100\" style={{ minHeight: \"300px\", width: \"300px\" }}>\n        <MDBCardBody>\n          <MDBCardTitle>\n            {props.type + \" \" + \"(\" + props.documentDate + \")\"}\n          </MDBCardTitle>\n          <MDBCardText className=\"my-4\">\n            {props.description == \"\" ? <br /> : props.description}\n          </MDBCardText>\n\n          {/* {props.confirmed ? (\n              <span> Best채tigt</span>\n            ) : (\n              <span> warten auf best채tigung</span>\n            )}\n          </MDBCardText>\n          <MDBBtn outline onClick={toggleShowDocumentModal}>\n            Anzeigen\n          </MDBBtn>\n          {ShowConfirmation ? (\n            <MDBBtn outline onClick={confirmDocument}>\n              Freigeben\n            </MDBBtn>\n          ) : (\n            <br />\n          )} */}\n\n          <MDBBtn outline className=\"me-2\" onClick={verifyDocument}>\n            Verifizieren\n          </MDBBtn>\n          <MDBBtn outline onClick={toggleShowDocumentModal}>\n            Anzeigen\n          </MDBBtn>\n        </MDBCardBody>\n        <MDBCardFooter className=\"text-muted\">\n          Hochgeladen am: {props.uploadDate}\n          <br />\n          von {props.author_company} ({props.author})\n        </MDBCardFooter>\n      </MDBCard>\n      <CardModal\n        basicModal={showDocumentModal}\n        setBasicModal={setShowDocumentModal}\n        toggleShow={toggleShowDocumentModal}\n        title={props.title}\n        description={props.description}\n      />\n    </>\n  );\n}\n\nexport default DocumentCard;\n"]},"metadata":{},"sourceType":"module"}