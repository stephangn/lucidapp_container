{"ast":null,"code":"var _jsxFileName = \"/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/components/Documents/InvoiceForm.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { MDBContainer, MDBRow, MDBCol, MDBInput, MDBBtn, MDBBadge } from \"mdb-react-ui-kit\";\nimport { init, createRechnung, createZollanmeldung } from \"../../Web3Client\";\nimport { useParams } from \"react-router-dom\";\nimport \"json2csv\";\nimport LZString from \"lz-string\";\nimport useAxiosPrivate from \"../../hooks/useAxiosPrivate\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar crypto = require(\"crypto\");\n\nvar blockchaintx = \"\";\n\nfunction InvoiceForm(props) {\n  _s();\n\n  // Das hier spuckt tausende Logs aus und mindert die Performance:\n  // useEffect() Hook nutzen?\n  const axiosInstance = useAxiosPrivate();\n  const [invoiceFields, setInvoiceFields] = useState({\n    type: \"Rechnung\",\n    description: \"\",\n    blockchainID: blockchaintx,\n    issue_date: \"\",\n    invoice_text: \"\",\n    currency: \"\",\n    transaction: \"\",\n    invoiceItem: [],\n    priceTotal: \"\",\n    transport_costs: \"\"\n  });\n  const [invoiceItemFields, setInvoiceItemFields] = useState([{\n    product: \"\",\n    amount: \"\",\n    unit: \"\",\n    price: \"\"\n  }]);\n  const {\n    transactionId\n  } = useParams(); //Debugging\n\n  useEffect(() => {\n    var _props$transactionDat;\n\n    console.log(props.transactionData);\n    console.log((_props$transactionDat = props.transactionData) === null || _props$transactionDat === void 0 ? void 0 : _props$transactionDat.partnership.partner.blockchain_id);\n  }, []);\n\n  function handleItemChange(index, event) {\n    const values = [...invoiceItemFields];\n    values[index][event.target.name] = event.target.value;\n    setInvoiceItemFields(values);\n    console.log(invoiceItemFields);\n    invoiceFields.invoiceItem = invoiceItemFields;\n    console.log(invoiceFields);\n    setInvoiceFields({ ...invoiceFields,\n      transaction: transactionId\n    });\n  }\n\n  const handleSubmit = e => {\n    var _props$transactionDat2;\n\n    e.preventDefault();\n    let total = calculatePriceTotal(); //Blockchain Transaktion\n\n    console.log(invoiceFields);\n\n    const {\n      Parser\n    } = require(\"json2csv\");\n\n    const parser = new Parser(invoiceItemFields); //convert to csv to save  Gas\n\n    const csv = parser.parse(invoiceItemFields); //compress invoiceItemFields-CSV-String to save Gas\n\n    const compressedcsv = LZString.compress(csv);\n    createRechnung(total, (_props$transactionDat2 = props.transactionData) === null || _props$transactionDat2 === void 0 ? void 0 : _props$transactionDat2.partnership.partner.blockchain_id, invoiceFields.currency, invoiceFields.issue_date, compressedcsv, invoiceFields.transport_costs).then(tx => {\n      console.log(\"Transaktion erfolgreich: \" + tx);\n      blockchaintx = tx; //Ãœbermittel und anlegen der Rechnung\n\n      axiosInstance.post(\"/invoice/\", {\n        blockchain_id: tx,\n        currency: invoiceFields.currency,\n        description: invoiceFields.description,\n        invoiceItem: invoiceFields.invoiceItem,\n        invoice_text: invoiceFields.invoice_text,\n        issue_date: invoiceFields.issue_date,\n        priceTotal: invoiceFields.priceTotal,\n        transaction: invoiceFields.transaction,\n        transport_costs: invoiceFields.transport_costs,\n        type: invoiceFields.type\n      }).then(res => {\n        console.log(res.data);\n      }).catch(error => {\n        console.error(\"There was an error!\", error);\n      });\n    }).catch(err => {\n      console.log(\"Transaktion fehlgeschlagen: \" + \"  \" + err);\n    });\n  };\n\n  function handleAddFields(event) {\n    event.preventDefault();\n    setInvoiceItemFields([...invoiceItemFields, {\n      product: \"\",\n      amount: \"\",\n      unit: \"\",\n      price: \"\"\n    }]);\n  }\n\n  function handleRemoveFields(event, index) {\n    event.preventDefault();\n    const values = [...invoiceItemFields]; // values.splice(index, 1);\n\n    values.splice(values.findIndex(value => value.index === index), 1);\n    setInvoiceItemFields(values);\n  }\n\n  function calculatePriceTotal() {\n    const items = invoiceItemFields;\n    let total = 0;\n\n    for (let i = 0; i < items.length; i++) {\n      total += items[i].amount * items[i].price;\n    }\n\n    setInvoiceFields({ ...items,\n      priceTotal: total\n    });\n    return total;\n  }\n\n  return /*#__PURE__*/_jsxDEV(MDBContainer, {\n    children: [/*#__PURE__*/_jsxDEV(MDBRow, {\n      children: [/*#__PURE__*/_jsxDEV(MDBCol, {\n        children: /*#__PURE__*/_jsxDEV(MDBInput, {\n          className: \"mb-4\",\n          name: \"issue_date\",\n          id: \"issue_date\",\n          label: \"Rechnungsdatum\",\n          type: \"date\",\n          onChange: e => setInvoiceFields({ ...invoiceFields,\n            issue_date: e.target.value\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MDBCol, {\n        children: /*#__PURE__*/_jsxDEV(MDBInput, {\n          className: \"mb-4\",\n          name: \"currency\",\n          id: \"currency\",\n          label: \"W\\xE4hrung\",\n          type: \"text\",\n          onChange: e => setInvoiceFields({ ...invoiceFields,\n            currency: e.target.value\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MDBCol, {\n        children: /*#__PURE__*/_jsxDEV(MDBInput, {\n          className: \"mb-4\",\n          name: \"transport_costs\",\n          id: \"transport_costs\",\n          label: \"Lieferkosten\",\n          type: \"number\",\n          onChange: e => setInvoiceFields({ ...invoiceFields,\n            transport_costs: e.target.value\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MDBInput, {\n      wrapperClass: \"mb-4\",\n      textarea: true,\n      name: \"description\",\n      id: \"description\",\n      rows: 3,\n      label: \"Beschreibung (optional)\",\n      onChange: e => setInvoiceFields({ ...invoiceFields,\n        description: e.target.value\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [invoiceItemFields.map((inputField, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h6\", {\n          children: [\"Rechnungsposten \", index + 1]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(MDBInput, {\n          className: \"mb-4\",\n          name: \"product\",\n          label: \"Produktname\",\n          type: \"text\",\n          value: inputField.product,\n          onChange: event => handleItemChange(index, event)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(MDBRow, {\n          children: [/*#__PURE__*/_jsxDEV(MDBCol, {\n            children: /*#__PURE__*/_jsxDEV(MDBInput, {\n              className: \"mb-4\",\n              name: \"amount\",\n              label: \"Anzahl\",\n              type: \"number\",\n              value: inputField.amount,\n              onChange: event => handleItemChange(index, event)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 217,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(MDBCol, {\n            children: /*#__PURE__*/_jsxDEV(MDBInput, {\n              className: \"mb-4\",\n              name: \"unit\",\n              label: \"Einheit\",\n              type: \"text\",\n              value: inputField.unit,\n              onChange: event => handleItemChange(index, event)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 227,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 226,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(MDBCol, {\n            children: /*#__PURE__*/_jsxDEV(MDBInput, {\n              className: \"mb-4\",\n              name: \"price\",\n              label: \"Preis pro Enheit\",\n              type: \"number\",\n              value: inputField.price,\n              onChange: event => handleItemChange(index, event)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 237,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 236,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(MDBCol, {\n            children: /*#__PURE__*/_jsxDEV(MDBBadge, {\n              className: \"mt-2 me-4 float-end\",\n              color: \"primary\",\n              children: [\"Betrag : \", inputField.amount * inputField.price, \" \", invoiceFields.invoiceCurrency]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 247,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 246,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MDBBtn, {\n        className: \"me-3 mb-3\",\n        color: \"success\",\n        onClick: handleAddFields,\n        children: \"Rechnungsposten hinzuf\\xFCgen\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 9\n      }, this), invoiceItemFields.length > 1 && /*#__PURE__*/_jsxDEV(MDBBtn, {\n        className: \"me-3 mb-3\",\n        color: \"danger\",\n        onClick: handleRemoveFields,\n        children: \"Rechnungsposten entfernen\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(MDBBtn, {\n        className: \"float-end\",\n        color: \"primary\",\n        onClick: handleSubmit,\n        children: \"Abschicken\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 151,\n    columnNumber: 5\n  }, this);\n}\n\n_s(InvoiceForm, \"qoXIc9BE0k6L1tBECTFj8S8c4RE=\", false, function () {\n  return [useAxiosPrivate, useParams];\n});\n\n_c = InvoiceForm;\nexport default InvoiceForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"InvoiceForm\");","map":{"version":3,"sources":["/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/components/Documents/InvoiceForm.jsx"],"names":["React","useState","useEffect","MDBContainer","MDBRow","MDBCol","MDBInput","MDBBtn","MDBBadge","init","createRechnung","createZollanmeldung","useParams","LZString","useAxiosPrivate","crypto","require","blockchaintx","InvoiceForm","props","axiosInstance","invoiceFields","setInvoiceFields","type","description","blockchainID","issue_date","invoice_text","currency","transaction","invoiceItem","priceTotal","transport_costs","invoiceItemFields","setInvoiceItemFields","product","amount","unit","price","transactionId","console","log","transactionData","partnership","partner","blockchain_id","handleItemChange","index","event","values","target","name","value","handleSubmit","e","preventDefault","total","calculatePriceTotal","Parser","parser","csv","parse","compressedcsv","compress","then","tx","post","res","data","catch","error","err","handleAddFields","handleRemoveFields","splice","findIndex","items","i","length","map","inputField","invoiceCurrency"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport {\n  MDBContainer,\n  MDBRow,\n  MDBCol,\n  MDBInput,\n  MDBBtn,\n  MDBBadge,\n} from \"mdb-react-ui-kit\";\nimport { init, createRechnung, createZollanmeldung } from \"../../Web3Client\";\nimport { useParams } from \"react-router-dom\";\nimport {} from \"json2csv\";\nimport LZString from \"lz-string\";\nimport useAxiosPrivate from \"../../hooks/useAxiosPrivate\";\n\nvar crypto = require(\"crypto\");\nvar blockchaintx = \"\";\nfunction InvoiceForm(props) {\n  // Das hier spuckt tausende Logs aus und mindert die Performance:\n  // useEffect() Hook nutzen?\n  const axiosInstance = useAxiosPrivate();\n\n  const [invoiceFields, setInvoiceFields] = useState({\n    type: \"Rechnung\",\n    description: \"\",\n    blockchainID: blockchaintx,\n    issue_date: \"\",\n    invoice_text: \"\",\n    currency: \"\",\n    transaction: \"\",\n    invoiceItem: [],\n    priceTotal: \"\",\n    transport_costs:\"\",\n  });\n\n  const [invoiceItemFields, setInvoiceItemFields] = useState([\n    {\n      product: \"\",\n      amount: \"\",\n      unit: \"\",\n      price: \"\",\n    },\n  ]);\n  const { transactionId } = useParams();\n\n  //Debugging\n  useEffect(() => {\n    console.log(props.transactionData)\n    console.log(props.transactionData?.partnership.partner.blockchain_id)\n\n  }, [])\n  \n\n  function handleItemChange(index, event) {\n    const values = [...invoiceItemFields];\n    values[index][event.target.name] = event.target.value;\n    setInvoiceItemFields(values);\n    console.log(invoiceItemFields);\n    invoiceFields.invoiceItem = invoiceItemFields;\n    console.log(invoiceFields);\n    setInvoiceFields({ ...invoiceFields, transaction: transactionId });\n  }\n\n  const handleSubmit = (e) => {\n\n    e.preventDefault();\n    let total = calculatePriceTotal();\n    //Blockchain Transaktion\n    console.log(invoiceFields);\n    const { Parser } = require(\"json2csv\");\n    const parser = new Parser(invoiceItemFields);\n    //convert to csv to save  Gas\n    const csv = parser.parse(invoiceItemFields);\n    //compress invoiceItemFields-CSV-String to save Gas\n    const compressedcsv = LZString.compress(csv);\n    createRechnung(\n      total,\n      props.transactionData?.partnership.partner.blockchain_id,\n      invoiceFields.currency,\n      invoiceFields.issue_date,\n      compressedcsv,\n      invoiceFields.transport_costs\n    )\n      .then((tx) => {\n        console.log(\"Transaktion erfolgreich: \" + tx);\n        blockchaintx = tx;\n            //Ãœbermittel und anlegen der Rechnung\n          axiosInstance\n          .post(\"/invoice/\", \n            {blockchain_id: tx,\n            currency: invoiceFields.currency,\n            description: invoiceFields.description,\n            invoiceItem: invoiceFields.invoiceItem,\n            invoice_text: invoiceFields.invoice_text,\n            issue_date: invoiceFields.issue_date,\n            priceTotal: invoiceFields.priceTotal,\n            transaction: invoiceFields.transaction,\n            transport_costs: invoiceFields.transport_costs,\n            type: invoiceFields.type\n            }\n           )\n          .then((res) => {\n          console.log(res.data);\n          })\n        .catch((error) => {\n         console.error(\"There was an error!\", error);\n       });\n     })\n    .catch((err) => {\n      console.log(\"Transaktion fehlgeschlagen: \" + \"  \" + err);\n    });\n  };\n\n  function handleAddFields(event) {\n    event.preventDefault();\n    setInvoiceItemFields([\n      ...invoiceItemFields,\n      {\n        product: \"\",\n        amount: \"\",\n        unit: \"\",\n        price: \"\",\n      },\n    ]);\n  }\n\n  function handleRemoveFields(event, index) {\n    event.preventDefault();\n    const values = [...invoiceItemFields];\n    // values.splice(index, 1);\n    values.splice(\n      values.findIndex((value) => value.index === index),\n      1\n    );\n    setInvoiceItemFields(values);\n  }\n\n  function calculatePriceTotal() {\n    const items = invoiceItemFields;\n    let total = 0;\n\n    for (let i = 0; i < items.length; i++) {\n      total += items[i].amount * items[i].price;\n    }\n    setInvoiceFields({ ...items, priceTotal: total });\n\n    return total;\n  }\n\n  return (\n    <MDBContainer>\n      <MDBRow>\n        <MDBCol>\n          <MDBInput\n            className=\"mb-4\"\n            name=\"issue_date\"\n            id=\"issue_date\"\n            label=\"Rechnungsdatum\"\n            type=\"date\"\n            onChange={(e) =>\n              setInvoiceFields({ ...invoiceFields, issue_date: e.target.value })\n            }\n          />\n        </MDBCol>\n        <MDBCol>\n          <MDBInput\n            className=\"mb-4\"\n            name=\"currency\"\n            id=\"currency\"\n            label=\"WÃ¤hrung\"\n            type=\"text\"\n            onChange={(e) =>\n              setInvoiceFields({ ...invoiceFields, currency: e.target.value })\n            }\n          />\n        </MDBCol>\n        <MDBCol>\n          <MDBInput\n            className=\"mb-4\"\n            name=\"transport_costs\"\n            id=\"transport_costs\"\n            label=\"Lieferkosten\"\n            type=\"number\"\n            onChange={(e) =>\n              setInvoiceFields({ ...invoiceFields, transport_costs: e.target.value })\n            }\n          />\n        </MDBCol>\n      </MDBRow>\n      <MDBInput\n        wrapperClass=\"mb-4\"\n        textarea\n        name=\"description\"\n        id=\"description\"\n        rows={3}\n        label=\"Beschreibung (optional)\"\n        onChange={(e) =>\n          setInvoiceFields({ ...invoiceFields, description: e.target.value })\n        }\n      />\n      <hr />\n\n      <form>\n        {invoiceItemFields.map((inputField, index) => (\n          <div key={index}>\n            <h6>Rechnungsposten {index + 1}</h6>\n            <MDBInput\n              className=\"mb-4\"\n              name=\"product\"\n              label=\"Produktname\"\n              type=\"text\"\n              value={inputField.product}\n              onChange={(event) => handleItemChange(index, event)}\n            />\n            <MDBRow>\n              <MDBCol>\n                <MDBInput\n                  className=\"mb-4\"\n                  name=\"amount\"\n                  label=\"Anzahl\"\n                  type=\"number\"\n                  value={inputField.amount}\n                  onChange={(event) => handleItemChange(index, event)}\n                />\n              </MDBCol>\n              <MDBCol>\n                <MDBInput\n                  className=\"mb-4\"\n                  name=\"unit\"\n                  label=\"Einheit\"\n                  type=\"text\"\n                  value={inputField.unit}\n                  onChange={(event) => handleItemChange(index, event)}\n                />\n              </MDBCol>\n              <MDBCol>\n                <MDBInput\n                  className=\"mb-4\"\n                  name=\"price\"\n                  label=\"Preis pro Enheit\"\n                  type=\"number\"\n                  value={inputField.price}\n                  onChange={(event) => handleItemChange(index, event)}\n                />\n              </MDBCol>\n              <MDBCol>\n                <MDBBadge className=\"mt-2 me-4 float-end\" color=\"primary\">\n                  Betrag : {inputField.amount * inputField.price}{\" \"}\n                  {invoiceFields.invoiceCurrency}\n                </MDBBadge>\n              </MDBCol>\n            </MDBRow>\n          </div>\n        ))}\n        <br />\n\n        <MDBBtn className=\"me-3 mb-3\" color=\"success\" onClick={handleAddFields}>\n          Rechnungsposten hinzufÃ¼gen\n        </MDBBtn>\n        {invoiceItemFields.length > 1 && (\n          <MDBBtn\n            className=\"me-3 mb-3\"\n            color=\"danger\"\n            onClick={handleRemoveFields}\n          >\n            Rechnungsposten entfernen\n          </MDBBtn>\n        )}\n\n        <MDBBtn className=\"float-end\" color=\"primary\" onClick={handleSubmit}>\n          Abschicken\n        </MDBBtn>\n      </form>\n    </MDBContainer>\n  );\n}\n\nexport default InvoiceForm;\n"]},"metadata":{},"sourceType":"module"}