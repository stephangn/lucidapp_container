{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport axiosInstance from \"../axiosApi\";\nimport { useEffect } from \"react\";\nimport useRefreshToken from \"./useRefreshToken\";\nimport useAuth from \"./useAuth\";\n\nconst useAxiosPrivate = () => {\n  _s();\n\n  const refresh = useRefreshToken();\n  const {\n    auth\n  } = useAuth();\n  useEffect(() => {\n    //console.log(auth);\n    //Wenn kein Token vorhanden ist wird neuer Token erzeugt und gespeichert\n    const requestIntercept = axiosInstance.interceptors.request.use(config => {\n      console.log(config.headers);\n      console.log(!config.headers['Authorization']);\n\n      if (!config.headers['Authorization']) {\n        console.log(\"Alternativer Header wird erzeugt\");\n        config.headers['Authorization'] = `Bearer ${auth === null || auth === void 0 ? void 0 : auth.accessToken}`;\n      }\n\n      return config;\n    }, error => Promise.reject(error));\n    const responseIntercept = axiosInstance.interceptors.response.use( //Antwort weiterleiten wenn alles okay \n    response => response, //fehler abfangen und vorherige Anfrage einlesen\n    async error => {\n      var _error$response;\n\n      console.log(\"Fehler in der Anfrage\");\n      const prevRequest = error === null || error === void 0 ? void 0 : error.config;\n\n      if ((error === null || error === void 0 ? void 0 : (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401 && !(prevRequest !== null && prevRequest !== void 0 && prevRequest.sent)) {\n        prevRequest.sent = true;\n        const newAccessToken = await refresh();\n        prevRequest.headers['Authorization'] = `Bearer ${newAccessToken}`;\n        return axiosInstance(prevRequest);\n      }\n\n      return Promise.reject(error);\n    }); //console.log('interceptors ausgef端hrt')\n    //Cleanup -> um schleifen zu vermeiden \n\n    return () => {\n      axiosInstance.interceptors.request.eject(requestIntercept);\n      axiosInstance.interceptors.response.eject(responseIntercept);\n    };\n  }, [auth, refresh]); //zur端ckgeben des Axios Call mit Interceptor\n\n  return axiosInstance;\n};\n\n_s(useAxiosPrivate, \"cOmbDhC1G7Ca93jGC+edHF4xR3w=\", false, function () {\n  return [useRefreshToken, useAuth];\n});\n\nexport default useAxiosPrivate;","map":{"version":3,"sources":["/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/hooks/useAxiosPrivate.js"],"names":["axiosInstance","useEffect","useRefreshToken","useAuth","useAxiosPrivate","refresh","auth","requestIntercept","interceptors","request","use","config","console","log","headers","accessToken","error","Promise","reject","responseIntercept","response","prevRequest","status","sent","newAccessToken","eject"],"mappings":";;AAAA,OAAOA,aAAP,MAA0B,aAA1B;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAOC,OAAP,MAAoB,WAApB;;AAEA,MAAMC,eAAe,GAAG,MAAM;AAAA;;AAC1B,QAAMC,OAAO,GAAGH,eAAe,EAA/B;AACA,QAAM;AAAEI,IAAAA;AAAF,MAAWH,OAAO,EAAxB;AAGAF,EAAAA,SAAS,CAAC,MAAM;AACZ;AAEA;AACA,UAAMM,gBAAgB,GAAGP,aAAa,CAACQ,YAAd,CAA2BC,OAA3B,CAAmCC,GAAnC,CACrBC,MAAM,IAAI;AACNC,MAAAA,OAAO,CAACC,GAAR,CAAYF,MAAM,CAACG,OAAnB;AACAF,MAAAA,OAAO,CAACC,GAAR,CAAY,CAACF,MAAM,CAACG,OAAP,CAAe,eAAf,CAAb;;AACA,UAAI,CAACH,MAAM,CAACG,OAAP,CAAe,eAAf,CAAL,EAAsC;AAClCF,QAAAA,OAAO,CAACC,GAAR,CAAY,kCAAZ;AACAF,QAAAA,MAAM,CAACG,OAAP,CAAe,eAAf,IAAmC,UAASR,IAAV,aAAUA,IAAV,uBAAUA,IAAI,CAAES,WAAY,EAA9D;AACH;;AACD,aAAOJ,MAAP;AACH,KAToB,EASjBK,KAAD,IAAWC,OAAO,CAACC,MAAR,CAAeF,KAAf,CATO,CAAzB;AAWA,UAAMG,iBAAiB,GAAGnB,aAAa,CAACQ,YAAd,CAA2BY,QAA3B,CAAoCV,GAApC,EACtB;AACAU,IAAAA,QAAQ,IAAIA,QAFU,EAGtB;AACA,UAAOJ,KAAP,IAAiB;AAAA;;AACbJ,MAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACA,YAAMQ,WAAW,GAAGL,KAAH,aAAGA,KAAH,uBAAGA,KAAK,CAAEL,MAA3B;;AACA,UAAI,CAAAK,KAAK,SAAL,IAAAA,KAAK,WAAL,+BAAAA,KAAK,CAAEI,QAAP,oEAAiBE,MAAjB,MAA4B,GAA5B,IAAmC,EAACD,WAAD,aAACA,WAAD,eAACA,WAAW,CAAEE,IAAd,CAAvC,EAA2D;AACvDF,QAAAA,WAAW,CAACE,IAAZ,GAAmB,IAAnB;AACA,cAAMC,cAAc,GAAG,MAAMnB,OAAO,EAApC;AACAgB,QAAAA,WAAW,CAACP,OAAZ,CAAoB,eAApB,IAAwC,UAASU,cAAe,EAAhE;AACA,eAAOxB,aAAa,CAACqB,WAAD,CAApB;AACH;;AACD,aAAOJ,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACH,KAdqB,CAA1B,CAfY,CAgCZ;AACA;;AACA,WAAM,MAAM;AACRhB,MAAAA,aAAa,CAACQ,YAAd,CAA2BC,OAA3B,CAAmCgB,KAAnC,CAAyClB,gBAAzC;AACAP,MAAAA,aAAa,CAACQ,YAAd,CAA2BY,QAA3B,CAAoCK,KAApC,CAA0CN,iBAA1C;AAEH,KAJD;AAKH,GAvCQ,EAuCN,CAACb,IAAD,EAAMD,OAAN,CAvCM,CAAT,CAL0B,CA6C1B;;AACA,SAAOL,aAAP;AAEH,CAhDD;;GAAMI,e;UACcF,e,EACCC,O;;;AAgDrB,eAAeC,eAAf","sourcesContent":["import axiosInstance from \"../axiosApi\";\nimport { useEffect } from \"react\";\nimport useRefreshToken from \"./useRefreshToken\";\nimport useAuth from \"./useAuth\";\n\nconst useAxiosPrivate = () => {\n    const refresh = useRefreshToken();\n    const { auth } = useAuth();\n\n\n    useEffect(() => {\n        //console.log(auth);\n\n        //Wenn kein Token vorhanden ist wird neuer Token erzeugt und gespeichert\n        const requestIntercept = axiosInstance.interceptors.request.use(\n            config => {\n                console.log(config.headers);\n                console.log(!config.headers['Authorization'])\n                if (!config.headers['Authorization']) {\n                    console.log(\"Alternativer Header wird erzeugt\");\n                    config.headers['Authorization'] = `Bearer ${auth?.accessToken}`;\n                }\n                return config;\n            }, (error) => Promise.reject(error)\n        ); \n        const responseIntercept = axiosInstance.interceptors.response.use(\n            //Antwort weiterleiten wenn alles okay \n            response => response,\n            //fehler abfangen und vorherige Anfrage einlesen\n            async (error) => {\n                console.log(\"Fehler in der Anfrage\")\n                const prevRequest = error?.config;\n                if (error?.response?.status === 401 && !prevRequest?.sent) {\n                    prevRequest.sent = true;\n                    const newAccessToken = await refresh();\n                    prevRequest.headers['Authorization'] = `Bearer ${newAccessToken}`;\n                    return axiosInstance(prevRequest); \n                }\n                return Promise.reject(error);\n            }\n            \n        );\n        //console.log('interceptors ausgef端hrt')\n        //Cleanup -> um schleifen zu vermeiden \n        return() => {\n            axiosInstance.interceptors.request.eject(requestIntercept)\n            axiosInstance.interceptors.response.eject(responseIntercept)\n\n        }\n    }, [auth,refresh])\n    //zur端ckgeben des Axios Call mit Interceptor\n    return axiosInstance\n\n}\n\nexport default useAxiosPrivate"]},"metadata":{},"sourceType":"module"}