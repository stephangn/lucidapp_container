{"ast":null,"code":"import _asyncToGenerator from\"/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _regeneratorRuntime from\"/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/node_modules/@babel/runtime/regenerator/index.js\";import Web3 from'web3';import Zollsystem from'./smartcontracts/zollsystem.json';var selectedAccount;var zollsystemcontract;var isinit;//initialize the web3 provider\nexport var init=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var provider,web3,networkId;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0://get provider (metamask)\nprovider=window.ethereum;if(typeof provider!=='undefined'){provider.request({method:'eth_requestAccounts'}).then(function(accounts){selectedAccount=accounts[0];//returns the Pub Key of selected account in MetaMask\nconsole.log(\"Selected account is \".concat(selectedAccount));}).catch(function(err){console.log(err);return;});window.ethereum.on('accountsChanged',function(accounts){selectedAccount=accounts[0];console.log(\"Selected account changed to \".concat(selectedAccount));});}//creates new web3-object based on provider\nweb3=new Web3(provider);_context.next=5;return web3.eth.net.getId();case 5:networkId=_context.sent;//read the deployed contract to web3 contract-object \nzollsystemcontract=new web3.eth.Contract(Zollsystem.abi,//returned by \"truffle migrate\"\nZollsystem.networks[networkId].address);//server/node IP\nisinit=true;case 8:case\"end\":return _context.stop();}}},_callee);}));return function init(){return _ref.apply(this,arguments);};}();//returns the rechnungID\nexport function createRechnung(_x,_x2,_x3,_x4,_x5,_x6){return _createRechnung.apply(this,arguments);}function _createRechnung(){_createRechnung=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(_gesamtbetrag,_importeur,_waehrung,_datum,_rechnungsposten,_lieferkosten){return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:if(isinit){_context2.next=3;break;}_context2.next=3;return init();case 3:_context2.next=5;return zollsystemcontract.methods.createRechnung(_gesamtbetrag,_importeur,_waehrung,_datum,_rechnungsposten,_lieferkosten).send({from:selectedAccount});case 5:_context2.next=7;return zollsystemcontract.methods.createRechnung(_gesamtbetrag,_importeur,_waehrung,_datum,_rechnungsposten,_lieferkosten).call({from:selectedAccount});case 7:return _context2.abrupt(\"return\",_context2.sent);case 8:case\"end\":return _context2.stop();}}},_callee2);}));return _createRechnung.apply(this,arguments);}export function uploadDokumentHash(_x7,_x8){return _uploadDokumentHash.apply(this,arguments);}//returns zollanmeldungID\nfunction _uploadDokumentHash(){_uploadDokumentHash=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(_transaktionsID,_hash){return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:if(isinit){_context3.next=3;break;}_context3.next=3;return init();case 3:_context3.next=5;return zollsystemcontract.methods.createDokument(_transaktionsID,_hash).send({from:selectedAccount});case 5:_context3.next=7;return zollsystemcontract.methods.createDokument(_transaktionsID,_hash).call({from:selectedAccount});case 7:return _context3.abrupt(\"return\",_context3.sent);case 8:case\"end\":return _context3.stop();}}},_callee3);}));return _uploadDokumentHash.apply(this,arguments);}export function createZollanmeldung(_x9,_x10,_x11,_x12){return _createZollanmeldung.apply(this,arguments);}//returns Zollanmeldung and Rechnung\nfunction _createZollanmeldung(){_createZollanmeldung=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(_zoll,_rechnungID,_zollwert,_incoterms){return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:if(isinit){_context4.next=3;break;}_context4.next=3;return init();case 3:_context4.next=5;return zollsystemcontract.methods.createZollanmeldung(_zoll,_rechnungID,_zollwert,_incoterms).send({from:selectedAccount});case 5:_context4.next=7;return zollsystemcontract.methods.createZollanmeldung(_zoll,_rechnungID,_zollwert,_incoterms).call({from:selectedAccount});case 7:return _context4.abrupt(\"return\",_context4.sent);case 8:case\"end\":return _context4.stop();}}},_callee4);}));return _createZollanmeldung.apply(this,arguments);}export function getZollanmeldung(_x13){return _getZollanmeldung.apply(this,arguments);}//returns Dokumentenhash\nfunction _getZollanmeldung(){_getZollanmeldung=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(_zollanmeldungID){return _regeneratorRuntime.wrap(function _callee5$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:if(isinit){_context5.next=3;break;}_context5.next=3;return init();case 3:_context5.next=5;return zollsystemcontract.methods.getZollanmeldung(_zollanmeldungID).send({from:selectedAccount});case 5:_context5.next=7;return zollsystemcontract.methods.getZollanmeldung(_zollanmeldungID).call({from:selectedAccount});case 7:return _context5.abrupt(\"return\",_context5.sent);case 8:case\"end\":return _context5.stop();}}},_callee5);}));return _getZollanmeldung.apply(this,arguments);}export function getDokumentenHash(_x14){return _getDokumentenHash.apply(this,arguments);}function _getDokumentenHash(){_getDokumentenHash=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(_transaktionsID){return _regeneratorRuntime.wrap(function _callee6$(_context6){while(1){switch(_context6.prev=_context6.next){case 0:if(isinit){_context6.next=3;break;}_context6.next=3;return init();case 3:_context6.next=5;return zollsystemcontract.methods.getDokumentenHash(_transaktionsID).send({from:selectedAccount});case 5:_context6.next=7;return zollsystemcontract.methods.getDokumentenHash(_transaktionsID).call({from:selectedAccount});case 7:return _context6.abrupt(\"return\",_context6.sent);case 8:case\"end\":return _context6.stop();}}},_callee6);}));return _getDokumentenHash.apply(this,arguments);}","map":{"version":3,"sources":["/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/Web3Client.js"],"names":["Web3","Zollsystem","selectedAccount","zollsystemcontract","isinit","init","provider","window","ethereum","request","method","then","accounts","console","log","catch","err","on","web3","eth","net","getId","networkId","Contract","abi","networks","address","createRechnung","_gesamtbetrag","_importeur","_waehrung","_datum","_rechnungsposten","_lieferkosten","methods","send","from","call","uploadDokumentHash","_transaktionsID","_hash","createDokument","createZollanmeldung","_zoll","_rechnungID","_zollwert","_incoterms","getZollanmeldung","_zollanmeldungID","getDokumentenHash"],"mappings":"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","sourcesContent":["import Web3 from 'web3';\nimport Zollsystem from './smartcontracts/zollsystem.json';\n\nlet selectedAccount;\n\nlet zollsystemcontract;\n\nlet isinit;\n\n//initialize the web3 provider\nexport const init = async () => {\n    //get provider (metamask)\n    let provider = window.ethereum;\n\n    if (typeof provider !== 'undefined'){\n      provider\n      .request({ method: 'eth_requestAccounts' })\n      .then((accounts) => {\n          selectedAccount = accounts[0];\n          //returns the Pub Key of selected account in MetaMask\n        console.log(`Selected account is ${selectedAccount}`);\n      })\n      .catch((err) => {\n        console.log(err);\n        return;\n      });\n      window.ethereum.on('accountsChanged', function (accounts) {\n        selectedAccount = accounts[0];\n        console.log(`Selected account changed to ${selectedAccount}`);\n      });\n    }\n    //creates new web3-object based on provider\n    const web3 = new Web3(provider);\n    const networkId = await web3.eth.net.getId();\n\n    //read the deployed contract to web3 contract-object \n    zollsystemcontract = new web3.eth.Contract(\n        Zollsystem.abi, //returned by \"truffle migrate\"\n        Zollsystem.networks[networkId].address); //server/node IP\n    isinit=true;\n}; \n\n//returns the rechnungID\nexport async function createRechnung(_gesamtbetrag, _importeur, _waehrung, _datum, _rechnungsposten, _lieferkosten){\n    if (!isinit) {\n        await init();\n    }\n    await zollsystemcontract.methods.createRechnung(_gesamtbetrag, _importeur, _waehrung, _datum, _rechnungsposten, _lieferkosten).send({from: selectedAccount});\n    return await zollsystemcontract.methods.createRechnung(_gesamtbetrag, _importeur, _waehrung, _datum, _rechnungsposten, _lieferkosten).call({from: selectedAccount});\n}\n\nexport async function uploadDokumentHash(_transaktionsID, _hash){\n  if (!isinit) {\n      await init();\n  }\n  await zollsystemcontract.methods.createDokument(_transaktionsID, _hash).send({from: selectedAccount});\n  return await zollsystemcontract.methods.createDokument(_transaktionsID, _hash).call({from: selectedAccount});\n}\n\n\n//returns zollanmeldungID\n export async function createZollanmeldung(_zoll, _rechnungID, _zollwert, _incoterms){\n     if (!isinit) {\n         await init();\n     }\n     await zollsystemcontract.methods.createZollanmeldung(_zoll, _rechnungID, _zollwert, _incoterms).send({from: selectedAccount});\n     return await zollsystemcontract.methods.createZollanmeldung(_zoll, _rechnungID, _zollwert, _incoterms).call({from: selectedAccount});\n }\n\n //returns Zollanmeldung and Rechnung\n export async function getZollanmeldung(_zollanmeldungID){\n  if (!isinit) {\n      await init();\n  }\n  await zollsystemcontract.methods.getZollanmeldung(_zollanmeldungID).send({from: selectedAccount});\n  return await zollsystemcontract.methods.getZollanmeldung(_zollanmeldungID).call({from: selectedAccount});\n}\n\n//returns Dokumentenhash\nexport async function getDokumentenHash(_transaktionsID){\n  if (!isinit) {\n      await init();\n  }\n  await zollsystemcontract.methods.getDokumentenHash(_transaktionsID).send({from: selectedAccount});\n  return await zollsystemcontract.methods.getDokumentenHash(_transaktionsID).call({from: selectedAccount});\n}"]},"metadata":{},"sourceType":"module"}