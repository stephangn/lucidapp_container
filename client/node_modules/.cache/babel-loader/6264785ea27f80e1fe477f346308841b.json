{"ast":null,"code":"var _jsxFileName = \"/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/components/Documents/InvoiceForm.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { MDBContainer, MDBRow, MDBCol, MDBInput, MDBBtn, MDBBadge } from \"mdb-react-ui-kit\";\nimport { init, createRechnung } from \"../../Web3Client\";\nimport { useParams } from \"react-router-dom\";\nimport 'json2csv';\nimport LZString from 'lz-string';\nimport useAxiosPrivate from \"../../hooks/useAxiosPrivate\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar crypto = require('crypto');\n\nvar blockchaintx = \"\";\n\nfunction InvoiceForm() {\n  _s();\n\n  const axiosInstance = useAxiosPrivate();\n  const [invoiceFields, setInvoiceFields] = useState({\n    type: \"Rechnung\",\n    description: \"\",\n    blockchainID: blockchaintx,\n    issue_date: \"\",\n    invoice_text: \"\",\n    currency: \"\",\n    transaction: \"\",\n    invoiceItem: []\n  });\n  const [invoiceItemFields, setInvoiceItemFields] = useState([{\n    \"product\": \"\",\n    \"amount\": \"\",\n    \"unit\": \"\",\n    \"price\": \"\"\n  }]);\n\n  function handleItemChange(index, event) {\n    const values = [...invoiceItemFields];\n    values[index][event.target.name] = event.target.value;\n    setInvoiceItemFields(values);\n    console.log(invoiceItemFields);\n    invoiceFields.invoiceItem = invoiceItemFields;\n    console.log(invoiceFields);\n  }\n\n  const {\n    transactionId\n  } = useParams();\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    console.log(transactionId);\n    setInvoiceFields({ ...invoiceFields,\n      transaction: transactionId\n    }); //Blockchain Transaktion\n\n    console.log(invoiceFields);\n\n    const {\n      Parser\n    } = require('json2csv');\n\n    const parser = new Parser(invoiceItemFields); //convert to csv to save  Gas\n\n    const csv = parser.parse(invoiceItemFields); //compress invoiceItemFields-CSV-String to save Gas\n\n    const compressedcsv = LZString.compress(csv);\n    createRechnung(\"2 Mark 50!\", \"0xbd4f99F9133149b9e29E0E2d9733aeBb41e1cB9f\", invoiceFields.invoiceCurrency, invoiceFields.invoiceDate, compressedcsv).then(tx => {\n      console.log(\"Transaktion erfolgreich: \" + tx);\n      blockchaintx = tx;\n    }).catch(err => {\n      console.log(\"Transaktion fehlgeschlagen: \" + \"  \" + err + crypto.createHash('sha256').update(JSON.stringify(invoiceItemFields)).digest('hex'));\n    }); //Ãœbermittel und anlegen der Rechnung\n\n    axiosInstance.post('/invoice/', JSON.stringify(invoiceFields)).then(res => {\n      console.log(res.data);\n    }).catch(error => {\n      console.error('There was an error!', error);\n    });\n  };\n\n  function handleAddFields() {\n    setInvoiceItemFields([...invoiceItemFields, {\n      \"product\": \"\",\n      \"amount\": \"\",\n      \"unit\": \"\",\n      \"price\": \"\"\n    }]);\n  }\n\n  function handleRemoveFields(index) {\n    const values = [...invoiceItemFields]; // values.splice(index, 1);\n\n    values.splice(values.findIndex(value => value.index === index), 1);\n    setInvoiceItemFields(values);\n  }\n\n  return /*#__PURE__*/_jsxDEV(MDBContainer, {\n    children: [/*#__PURE__*/_jsxDEV(MDBRow, {\n      children: [/*#__PURE__*/_jsxDEV(MDBCol, {\n        children: /*#__PURE__*/_jsxDEV(MDBInput, {\n          className: \"mb-4\",\n          name: \"issue_date\",\n          id: \"issue_date\",\n          label: \"Rechnungsdatum\",\n          type: \"date\",\n          onChange: e => setInvoiceFields({ ...invoiceFields,\n            issue_date: e.target.value\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MDBCol, {\n        children: /*#__PURE__*/_jsxDEV(MDBInput, {\n          className: \"mb-4\",\n          name: \"currency\",\n          id: \"currency\",\n          label: \"W\\xE4hrung\",\n          type: \"text\",\n          onChange: e => setInvoiceFields({ ...invoiceFields,\n            currency: e.target.value\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MDBInput, {\n      wrapperClass: \"mb-4\",\n      textarea: true,\n      name: \"description\",\n      id: \"description\",\n      rows: 3,\n      label: \"Beschreibung (optional)\",\n      onChange: e => setInvoiceFields({ ...invoiceFields,\n        description: e.target.value\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [invoiceItemFields.map((inputField, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h6\", {\n          children: [\"Rechnungsposten \", index + 1]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(MDBInput, {\n          className: \"mb-4\",\n          name: \"product\",\n          label: \"Produktname\",\n          type: \"text\",\n          value: inputField.product,\n          onChange: event => handleItemChange(index, event)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(MDBRow, {\n          children: [/*#__PURE__*/_jsxDEV(MDBCol, {\n            children: /*#__PURE__*/_jsxDEV(MDBInput, {\n              className: \"mb-4\",\n              name: \"amount\",\n              label: \"Anzahl\",\n              type: \"number\",\n              value: inputField.amount,\n              onChange: event => handleItemChange(index, event)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 162,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(MDBCol, {\n            children: /*#__PURE__*/_jsxDEV(MDBInput, {\n              className: \"mb-4\",\n              name: \"unit\",\n              label: \"Einheit\",\n              type: \"text\",\n              value: inputField.unit,\n              onChange: event => handleItemChange(index, event)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 172,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(MDBCol, {\n            children: /*#__PURE__*/_jsxDEV(MDBInput, {\n              className: \"mb-4\",\n              name: \"price\",\n              label: \"Preis pro Enheit\",\n              type: \"number\",\n              value: inputField.price,\n              onChange: event => handleItemChange(index, event)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 182,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(MDBCol, {\n            children: /*#__PURE__*/_jsxDEV(MDBBadge, {\n              className: \"mt-2 me-4 float-end\",\n              color: \"primary\",\n              children: [\"Betrag :\", \" \", inputField.amount * inputField.price, \" \", invoiceFields.invoiceCurrency]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 192,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MDBBtn, {\n        className: \"me-3 mb-3\",\n        color: \"success\",\n        onClick: handleAddFields,\n        children: \"Rechnungsposten hinzuf\\xFCgen\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 9\n      }, this), invoiceItemFields.length > 1 && /*#__PURE__*/_jsxDEV(MDBBtn, {\n        className: \"me-3 mb-3\",\n        color: \"danger\",\n        onClick: handleRemoveFields,\n        children: \"Rechnungsposten entfernen\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(MDBBtn, {\n        className: \"float-end\",\n        color: \"primary\",\n        onClick: handleSubmit,\n        children: \"Abschicken\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 5\n  }, this);\n}\n\n_s(InvoiceForm, \"IOIwHPO5fjB6pQf9SsZvGkbgbHY=\", false, function () {\n  return [useAxiosPrivate, useParams];\n});\n\n_c = InvoiceForm;\nexport default InvoiceForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"InvoiceForm\");","map":{"version":3,"sources":["/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/components/Documents/InvoiceForm.jsx"],"names":["React","useState","MDBContainer","MDBRow","MDBCol","MDBInput","MDBBtn","MDBBadge","init","createRechnung","useParams","LZString","useAxiosPrivate","crypto","require","blockchaintx","InvoiceForm","axiosInstance","invoiceFields","setInvoiceFields","type","description","blockchainID","issue_date","invoice_text","currency","transaction","invoiceItem","invoiceItemFields","setInvoiceItemFields","handleItemChange","index","event","values","target","name","value","console","log","transactionId","handleSubmit","e","preventDefault","Parser","parser","csv","parse","compressedcsv","compress","invoiceCurrency","invoiceDate","then","tx","catch","err","createHash","update","JSON","stringify","digest","post","res","data","error","handleAddFields","handleRemoveFields","splice","findIndex","map","inputField","product","amount","unit","price","length"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SACEC,YADF,EAEEC,MAFF,EAGEC,MAHF,EAIEC,QAJF,EAKEC,MALF,EAMEC,QANF,QAOO,kBAPP;AAQA,SAASC,IAAT,EAAeC,cAAf,QAAqC,kBAArC;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,OAAiB,UAAjB;AACA,OAAOC,QAAP,MAA2B,WAA3B;AACA,OAAOC,eAAP,MAA4B,6BAA5B;;;AAGA,IAAIC,MAAM,GAAGC,OAAO,CAAE,QAAF,CAApB;;AACA,IAAIC,YAAY,GAAC,EAAjB;;AACA,SAASC,WAAT,GAAuB;AAAA;;AAErB,QAAMC,aAAa,GAAGL,eAAe,EAArC;AAEA,QAAM,CAACM,aAAD,EAAgBC,gBAAhB,IAAoClB,QAAQ,CAAC;AACjDmB,IAAAA,IAAI,EAAC,UAD4C;AAEjDC,IAAAA,WAAW,EAAC,EAFqC;AAGjDC,IAAAA,YAAY,EAAEP,YAHmC;AAIjDQ,IAAAA,UAAU,EAAC,EAJsC;AAKjDC,IAAAA,YAAY,EAAC,EALoC;AAMjDC,IAAAA,QAAQ,EAAC,EANwC;AAOjDC,IAAAA,WAAW,EAAC,EAPqC;AAQjDC,IAAAA,WAAW,EAAE;AARoC,GAAD,CAAlD;AAaA,QAAM,CAACC,iBAAD,EAAoBC,oBAApB,IAA4C5B,QAAQ,CAAC,CACzD;AACE,eAAW,EADb;AAEE,cAAU,EAFZ;AAGE,YAAQ,EAHV;AAIE,aAAS;AAJX,GADyD,CAAD,CAA1D;;AASA,WAAS6B,gBAAT,CAA0BC,KAA1B,EAAiCC,KAAjC,EAAwC;AACtC,UAAMC,MAAM,GAAG,CAAC,GAAGL,iBAAJ,CAAf;AACAK,IAAAA,MAAM,CAACF,KAAD,CAAN,CAAcC,KAAK,CAACE,MAAN,CAAaC,IAA3B,IAAmCH,KAAK,CAACE,MAAN,CAAaE,KAAhD;AACAP,IAAAA,oBAAoB,CAACI,MAAD,CAApB;AACAI,IAAAA,OAAO,CAACC,GAAR,CAAYV,iBAAZ;AACAV,IAAAA,aAAa,CAACS,WAAd,GAA4BC,iBAA5B;AACAS,IAAAA,OAAO,CAACC,GAAR,CAAYpB,aAAZ;AACD;;AAED,QAAM;AAAEqB,IAAAA;AAAF,MAAoB7B,SAAS,EAAnC;;AAEA,QAAO8B,YAAY,GAAIC,CAAD,IAAO;AAC3BA,IAAAA,CAAC,CAACC,cAAF;AAGAL,IAAAA,OAAO,CAACC,GAAR,CAAYC,aAAZ;AACApB,IAAAA,gBAAgB,CAAC,EAAC,GAAGD,aAAJ;AAAmBQ,MAAAA,WAAW,EAAEa;AAAhC,KAAD,CAAhB,CAL2B,CAM3B;;AACAF,IAAAA,OAAO,CAACC,GAAR,CAAYpB,aAAZ;;AACA,UAAM;AAAEyB,MAAAA;AAAF,QAAa7B,OAAO,CAAC,UAAD,CAA1B;;AACA,UAAM8B,MAAM,GAAG,IAAID,MAAJ,CAAWf,iBAAX,CAAf,CAT2B,CAU3B;;AACA,UAAMiB,GAAG,GAAGD,MAAM,CAACE,KAAP,CAAalB,iBAAb,CAAZ,CAX2B,CAY3B;;AACA,UAAMmB,aAAa,GAAGpC,QAAQ,CAACqC,QAAT,CAAkBH,GAAlB,CAAtB;AACApC,IAAAA,cAAc,CAAC,YAAD,EAAe,4CAAf,EAA6DS,aAAa,CAAC+B,eAA3E,EAA4F/B,aAAa,CAACgC,WAA1G,EAAuHH,aAAvH,CAAd,CACGI,IADH,CACSC,EAAD,IAAQ;AACZf,MAAAA,OAAO,CAACC,GAAR,CAAY,8BAA8Bc,EAA1C;AACArC,MAAAA,YAAY,GAACqC,EAAb;AACD,KAJH,EAKGC,KALH,CAKUC,GAAD,IAAS;AACdjB,MAAAA,OAAO,CAACC,GAAR,CAAY,iCAAgC,IAAhC,GAAuCgB,GAAvC,GAA4CzC,MAAM,CAAC0C,UAAP,CAAkB,QAAlB,EAA4BC,MAA5B,CAAmCC,IAAI,CAACC,SAAL,CAAe9B,iBAAf,CAAnC,EAAsE+B,MAAtE,CAA6E,KAA7E,CAAxD;AACD,KAPH,EAd2B,CAuB3B;;AACA1C,IAAAA,aAAa,CACV2C,IADH,CACQ,WADR,EACsBH,IAAI,CAACC,SAAL,CAAexC,aAAf,CADtB,EAGGiC,IAHH,CAGSU,GAAD,IAAS;AACbxB,MAAAA,OAAO,CAACC,GAAR,CAAYuB,GAAG,CAACC,IAAhB;AACD,KALH,EAMGT,KANH,CAMSU,KAAK,IAAI;AACZ1B,MAAAA,OAAO,CAAC0B,KAAR,CAAc,qBAAd,EAAqCA,KAArC;AACH,KARH;AASD,GAjCD;;AAmCA,WAASC,eAAT,GAA2B;AACzBnC,IAAAA,oBAAoB,CAAC,CACnB,GAAGD,iBADgB,EAEnB;AACE,iBAAW,EADb;AAEE,gBAAU,EAFZ;AAGE,cAAQ,EAHV;AAIE,eAAS;AAJX,KAFmB,CAAD,CAApB;AASD;;AAED,WAASqC,kBAAT,CAA4BlC,KAA5B,EAAmC;AACjC,UAAME,MAAM,GAAG,CAAC,GAAGL,iBAAJ,CAAf,CADiC,CAEjC;;AACAK,IAAAA,MAAM,CAACiC,MAAP,CACEjC,MAAM,CAACkC,SAAP,CAAkB/B,KAAD,IAAWA,KAAK,CAACL,KAAN,KAAgBA,KAA5C,CADF,EAEE,CAFF;AAIAF,IAAAA,oBAAoB,CAACI,MAAD,CAApB;AACD;;AAED,sBACE,QAAC,YAAD;AAAA,4BACE,QAAC,MAAD;AAAA,8BACE,QAAC,MAAD;AAAA,+BACE,QAAC,QAAD;AACE,UAAA,SAAS,EAAC,MADZ;AAEE,UAAA,IAAI,EAAC,YAFP;AAGE,UAAA,EAAE,EAAC,YAHL;AAIE,UAAA,KAAK,EAAC,gBAJR;AAKE,UAAA,IAAI,EAAC,MALP;AAME,UAAA,QAAQ,EAAGQ,CAAD,IAAOtB,gBAAgB,CAAC,EAAC,GAAGD,aAAJ;AAAmBK,YAAAA,UAAU,EAAEkB,CAAC,CAACP,MAAF,CAASE;AAAxC,WAAD;AANnC;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADF,eAWE,QAAC,MAAD;AAAA,+BACE,QAAC,QAAD;AACE,UAAA,SAAS,EAAC,MADZ;AAEE,UAAA,IAAI,EAAC,UAFP;AAGE,UAAA,EAAE,EAAC,UAHL;AAIE,UAAA,KAAK,EAAC,YAJR;AAKE,UAAA,IAAI,EAAC,MALP;AAME,UAAA,QAAQ,EAAGK,CAAD,IAAOtB,gBAAgB,CAAC,EAAC,GAAGD,aAAJ;AAAmBO,YAAAA,QAAQ,EAAEgB,CAAC,CAACP,MAAF,CAASE;AAAtC,WAAD;AANnC;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAXF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAuBE,QAAC,QAAD;AACE,MAAA,YAAY,EAAC,MADf;AAEE,MAAA,QAAQ,MAFV;AAGE,MAAA,IAAI,EAAC,aAHP;AAIE,MAAA,EAAE,EAAC,aAJL;AAKE,MAAA,IAAI,EAAE,CALR;AAME,MAAA,KAAK,EAAC,yBANR;AAOE,MAAA,QAAQ,EAAGK,CAAD,IAAOtB,gBAAgB,CAAC,EAAC,GAAGD,aAAJ;AAAmBG,QAAAA,WAAW,EAAEoB,CAAC,CAACP,MAAF,CAASE;AAAzC,OAAD;AAPnC;AAAA;AAAA;AAAA;AAAA,YAvBF,eAgCE;AAAA;AAAA;AAAA;AAAA,YAhCF,eAkCE;AAAA,iBACGR,iBAAiB,CAACwC,GAAlB,CAAsB,CAACC,UAAD,EAAatC,KAAb,kBACrB;AAAA,gCACE;AAAA,yCAAqBA,KAAK,GAAG,CAA7B;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE,QAAC,QAAD;AACE,UAAA,SAAS,EAAC,MADZ;AAEE,UAAA,IAAI,EAAC,SAFP;AAGE,UAAA,KAAK,EAAC,aAHR;AAIE,UAAA,IAAI,EAAC,MAJP;AAKE,UAAA,KAAK,EAAEsC,UAAU,CAACC,OALpB;AAME,UAAA,QAAQ,EAAGtC,KAAD,IAAWF,gBAAgB,CAACC,KAAD,EAAQC,KAAR;AANvC;AAAA;AAAA;AAAA;AAAA,gBAFF,eAUE,QAAC,MAAD;AAAA,kCACE,QAAC,MAAD;AAAA,mCACE,QAAC,QAAD;AACE,cAAA,SAAS,EAAC,MADZ;AAEE,cAAA,IAAI,EAAC,QAFP;AAGE,cAAA,KAAK,EAAC,QAHR;AAIE,cAAA,IAAI,EAAC,QAJP;AAKE,cAAA,KAAK,EAAEqC,UAAU,CAACE,MALpB;AAME,cAAA,QAAQ,EAAGvC,KAAD,IAAWF,gBAAgB,CAACC,KAAD,EAAQC,KAAR;AANvC;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,kBADF,eAWE,QAAC,MAAD;AAAA,mCACE,QAAC,QAAD;AACE,cAAA,SAAS,EAAC,MADZ;AAEE,cAAA,IAAI,EAAC,MAFP;AAGE,cAAA,KAAK,EAAC,SAHR;AAIE,cAAA,IAAI,EAAC,MAJP;AAKE,cAAA,KAAK,EAAEqC,UAAU,CAACG,IALpB;AAME,cAAA,QAAQ,EAAGxC,KAAD,IAAWF,gBAAgB,CAACC,KAAD,EAAQC,KAAR;AANvC;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,kBAXF,eAqBE,QAAC,MAAD;AAAA,mCACE,QAAC,QAAD;AACE,cAAA,SAAS,EAAC,MADZ;AAEE,cAAA,IAAI,EAAC,OAFP;AAGE,cAAA,KAAK,EAAC,kBAHR;AAIE,cAAA,IAAI,EAAC,QAJP;AAKE,cAAA,KAAK,EAAEqC,UAAU,CAACI,KALpB;AAME,cAAA,QAAQ,EAAGzC,KAAD,IAAWF,gBAAgB,CAACC,KAAD,EAAQC,KAAR;AANvC;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,kBArBF,eA+BE,QAAC,MAAD;AAAA,mCACE,QAAC,QAAD;AAAU,cAAA,SAAS,EAAC,qBAApB;AAA0C,cAAA,KAAK,EAAC,SAAhD;AAAA,qCACW,GADX,EAEGqC,UAAU,CAACE,MAAX,GAAoBF,UAAU,CAACI,KAFlC,EAEyC,GAFzC,EAGGvD,aAAa,CAAC+B,eAHjB;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,kBA/BF;AAAA;AAAA;AAAA;AAAA;AAAA,gBAVF;AAAA,SAAUlB,KAAV;AAAA;AAAA;AAAA;AAAA,cADD,CADH,eAqDE;AAAA;AAAA;AAAA;AAAA,cArDF,eAuDE,QAAC,MAAD;AAAQ,QAAA,SAAS,EAAC,WAAlB;AAA8B,QAAA,KAAK,EAAC,SAApC;AAA8C,QAAA,OAAO,EAAEiC,eAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAvDF,EA0DGpC,iBAAiB,CAAC8C,MAAlB,GAA2B,CAA3B,iBACC,QAAC,MAAD;AACE,QAAA,SAAS,EAAC,WADZ;AAEE,QAAA,KAAK,EAAC,QAFR;AAGE,QAAA,OAAO,EAAET,kBAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cA3DJ,eAoEE,QAAC,MAAD;AAAQ,QAAA,SAAS,EAAC,WAAlB;AAA8B,QAAA,KAAK,EAAC,SAApC;AAA8C,QAAA,OAAO,EAAEzB,YAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cApEF;AAAA;AAAA;AAAA;AAAA;AAAA,YAlCF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA6GD;;GA3MQxB,W;UAEeJ,e,EAiCIF,S;;;KAnCnBM,W;AA6MT,eAAeA,WAAf","sourcesContent":["import React, { useState } from \"react\";\nimport {\n  MDBContainer,\n  MDBRow,\n  MDBCol,\n  MDBInput,\n  MDBBtn,\n  MDBBadge,\n} from \"mdb-react-ui-kit\";\nimport { init, createRechnung } from \"../../Web3Client\";\nimport { useParams } from \"react-router-dom\";\nimport {  } from 'json2csv'\nimport LZString, {  } from 'lz-string'\nimport useAxiosPrivate from \"../../hooks/useAxiosPrivate\";\n\n\nvar crypto = require ('crypto');\nvar blockchaintx=\"\";\nfunction InvoiceForm() {\n\n  const axiosInstance = useAxiosPrivate();\n\n  const [invoiceFields, setInvoiceFields] = useState({\n    type:\"Rechnung\",\n    description:\"\",\n    blockchainID: blockchaintx,\n    issue_date:\"\",\n    invoice_text:\"\",\n    currency:\"\",\n    transaction:\"\",\n    invoiceItem: [      \n    ],\n  });\n\n\n  const [invoiceItemFields, setInvoiceItemFields] = useState([\n    {\n      \"product\": \"\",\n      \"amount\": \"\",\n      \"unit\": \"\",\n      \"price\": \"\",\n    },\n  ]);\n\n  function handleItemChange(index, event) {\n    const values = [...invoiceItemFields];\n    values[index][event.target.name] = event.target.value;\n    setInvoiceItemFields(values);\n    console.log(invoiceItemFields);\n    invoiceFields.invoiceItem = invoiceItemFields\n    console.log(invoiceFields)\n  }\n\n  const { transactionId } = useParams();\n\n  const  handleSubmit = (e) => {\n    e.preventDefault();\n\n\n    console.log(transactionId)\n    setInvoiceFields({...invoiceFields, transaction: transactionId})\n    //Blockchain Transaktion\n    console.log(invoiceFields)\n    const { Parser } = require('json2csv');\n    const parser = new Parser(invoiceItemFields);\n    //convert to csv to save  Gas\n    const csv = parser.parse(invoiceItemFields);\n    //compress invoiceItemFields-CSV-String to save Gas\n    const compressedcsv = LZString.compress(csv);\n    createRechnung(\"2 Mark 50!\", \"0xbd4f99F9133149b9e29E0E2d9733aeBb41e1cB9f\", invoiceFields.invoiceCurrency, invoiceFields.invoiceDate, compressedcsv)\n      .then((tx) => {\n        console.log(\"Transaktion erfolgreich: \" + tx);\n        blockchaintx=tx;\n      })\n      .catch((err) => {\n        console.log(\"Transaktion fehlgeschlagen: \"+ \"  \" + err +crypto.createHash('sha256').update(JSON.stringify(invoiceItemFields)).digest('hex'));\n      });\n\n    //Ãœbermittel und anlegen der Rechnung\n    axiosInstance\n      .post('/invoice/',  JSON.stringify(invoiceFields)\n      )\n      .then((res) => {\n        console.log(res.data)\n      })\n      .catch(error => {\n          console.error('There was an error!', error);\n      });\n  }\n\n  function handleAddFields() {\n    setInvoiceItemFields([\n      ...invoiceItemFields,\n      {\n        \"product\": \"\",\n        \"amount\": \"\",\n        \"unit\": \"\",\n        \"price\": \"\",\n      },\n    ]);\n  }\n\n  function handleRemoveFields(index) {\n    const values = [...invoiceItemFields];\n    // values.splice(index, 1);\n    values.splice(\n      values.findIndex((value) => value.index === index),\n      1\n    );\n    setInvoiceItemFields(values);\n  }\n\n  return (\n    <MDBContainer>\n      <MDBRow>\n        <MDBCol>\n          <MDBInput\n            className=\"mb-4\"\n            name=\"issue_date\"\n            id=\"issue_date\"\n            label=\"Rechnungsdatum\"\n            type=\"date\"\n            onChange={(e) => setInvoiceFields({...invoiceFields, issue_date: e.target.value})}\n          />\n        </MDBCol>\n        <MDBCol>\n          <MDBInput\n            className=\"mb-4\"\n            name=\"currency\"\n            id=\"currency\"\n            label=\"WÃ¤hrung\"\n            type=\"text\"\n            onChange={(e) => setInvoiceFields({...invoiceFields, currency: e.target.value})}\n          />\n        </MDBCol>\n      </MDBRow>\n      <MDBInput\n        wrapperClass=\"mb-4\"\n        textarea\n        name=\"description\"\n        id=\"description\"\n        rows={3}\n        label=\"Beschreibung (optional)\"\n        onChange={(e) => setInvoiceFields({...invoiceFields, description: e.target.value})}\n        />\n      <hr />\n\n      <form >\n        {invoiceItemFields.map((inputField, index) => (\n          <div key={index}>\n            <h6>Rechnungsposten {index + 1}</h6>\n            <MDBInput\n              className=\"mb-4\"\n              name=\"product\"\n              label=\"Produktname\"\n              type=\"text\"\n              value={inputField.product}\n              onChange={(event) => handleItemChange(index, event)}\n            />\n            <MDBRow>\n              <MDBCol>\n                <MDBInput\n                  className=\"mb-4\"\n                  name=\"amount\"\n                  label=\"Anzahl\"\n                  type=\"number\"\n                  value={inputField.amount}\n                  onChange={(event) => handleItemChange(index, event)}\n                />\n              </MDBCol>\n              <MDBCol>\n                <MDBInput\n                  className=\"mb-4\"\n                  name=\"unit\"\n                  label=\"Einheit\"\n                  type=\"text\"\n                  value={inputField.unit}\n                  onChange={(event) => handleItemChange(index, event)}\n                />\n              </MDBCol>\n              <MDBCol>\n                <MDBInput\n                  className=\"mb-4\"\n                  name=\"price\"\n                  label=\"Preis pro Enheit\"\n                  type=\"number\"\n                  value={inputField.price}\n                  onChange={(event) => handleItemChange(index, event)}\n                />\n              </MDBCol>\n              <MDBCol>\n                <MDBBadge className=\"mt-2 me-4 float-end\" color=\"primary\">\n                  Betrag :{\" \"}\n                  {inputField.amount * inputField.price}{\" \"}\n                  {invoiceFields.invoiceCurrency}\n                </MDBBadge>\n              </MDBCol>\n            </MDBRow>\n          </div>\n        ))}\n        <br />\n\n        <MDBBtn className=\"me-3 mb-3\" color=\"success\" onClick={handleAddFields}>\n          Rechnungsposten hinzufÃ¼gen\n        </MDBBtn>\n        {invoiceItemFields.length > 1 && (\n          <MDBBtn\n            className=\"me-3 mb-3\"\n            color=\"danger\"\n            onClick={handleRemoveFields}\n          >\n            Rechnungsposten entfernen\n          </MDBBtn>\n        )}\n\n        <MDBBtn className=\"float-end\" color=\"primary\" onClick={handleSubmit}>\n          Abschicken\n        </MDBBtn>\n      </form>\n    </MDBContainer>\n  );\n}\n\nexport default InvoiceForm;"]},"metadata":{},"sourceType":"module"}