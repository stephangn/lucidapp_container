{"ast":null,"code":"var _jsxFileName = \"/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/components/Documents/DocumentCard.jsx\",\n    _s = $RefreshSig$();\n\nimport { React, useState, useEffect } from \"react\";\nimport { MDBCard, MDBCardBody, MDBCardTitle, MDBCardText, MDBCardHeader, MDBCardFooter, MDBBtn } from \"mdb-react-ui-kit\";\nimport useAxiosPrivate from \"../../hooks/useAxiosPrivate\";\nimport CardModal from \"./CardModal\"; //Hook für Contextabruf \n\nimport useAuth from \"../../hooks/useAuth\";\nimport { confirmRechnung, createDokument, getDokumentenhash } from \"../../Web3Client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction DocumentCard(props) {\n  _s();\n\n  const axiosInstance = useAxiosPrivate(); //Context mit Nutzerdaten abrufen \n\n  const {\n    auth\n  } = useAuth();\n  const [datei, setDatei] = useState([]);\n  let fileLink = null;\n  const [ShowConfirmation, setShowConfirmation] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const author_company = props.author_company;\n  useEffect(() => {\n    //Abruf des Link zur Datei\n    console.log(auth.pubkey);\n    axiosInstance.get(\"file/3\").then(res => {\n      setDatei(res.data);\n      fileLink = res.data.file;\n      /*     console.log(author_company + auth.company)\n          console.log(props.confirmed) */\n\n      setIsLoading(true);\n\n      if (props.confirmed == true) {\n        setShowConfirmation(false);\n        console.log(\"bereits bestätigt, confirm auf True\");\n      } else if (author_company == auth.company) {//console.log(\"Firmen sind ungleich- Confirm auf False\")\n      } else {\n        setShowConfirmation(true); //console.log(\"Confirm auf True\")\n      }\n    }, []);\n  }, [ShowConfirmation]);\n  useEffect(() => {}, []);\n\n  const confirmDocument = e => {\n    //blockchain Transaktion\n    confirmRechnung(0).then(tx => {\n      console.log(\"Rechnung mit der RechnungID \" + tx + \" wurde bestätigt\");\n    }).catch(err => {\n      console.log(\"Rechnungsbestätigung fehlgeschlagen. Fehlermeldung: \" + err);\n    });\n    axiosInstance.patch(`invoice/${props.id}/`, {\n      confirmed: true\n    }); //Hier Blockchain Transaktion einfügen\n\n    setShowConfirmation(false);\n  }; // State für \"Dokument anzeigen\" Modal\n\n\n  const [showDocumentModal, setShowDocumentModal] = useState(false); // Funktion für Manipulation von Modal (als props weitergereicht)\n\n  function toggleShowDocumentModal() {\n    setShowDocumentModal(!showDocumentModal);\n  }\n\n  function createDokumentHash(_transaktionID, _titel, _file, _zoll) {\n    var crypto = require('crypto');\n\n    var hashwert = crypto.createHash('sha512').update(JSON.stringify(_file)).digest('hex');\n    var back = false;\n    createDokument(_transaktionID, _titel, hashwert, _zoll).then(tx => {\n      console.log(\"Dokument \" + _titel + \" wurde hochgeladen. DokumentenID: \" + tx);\n      back = true;\n    }).catch(err => {\n      console.log(\"Hashgenerierung fehlgeschlagen. Fehlermeldung: \" + err);\n    });\n    return back;\n  }\n\n  function proofFilehash(_DokumentID, _file) {\n    var crypto = require('crypto');\n\n    var hashwert = crypto.createHash('sha512').update(JSON.stringify(_file)).digest('hex');\n    getDokumentenhash(_DokumentID).then(tx => {\n      if (hashwert === tx) {\n        return true;\n      } else {\n        return false;\n      }\n    }).catch(err => {\n      console.log(\"Fehlgeschlagen. Fehlermeldung: \" + err);\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(MDBCard, {\n      className: \"h-100\",\n      style: {\n        maxWidth: \"22rem\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(MDBCardHeader, {\n        children: [\"Hochgeladen von: \", props.author, \" - \", props.author_company]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MDBCardBody, {\n        children: [/*#__PURE__*/_jsxDEV(MDBCardTitle, {\n          children: props.type + \" \" + \"(\" + props.documentDate + \")\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MDBCardText, {\n          children: [props.description, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 13\n          }, this), props.confirmed ? /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \" Best\\xE4tigt\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 32\n          }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \" warten auf best\\xE4tigung\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 57\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MDBBtn, {\n          outline: true,\n          onClick: toggleShowDocumentModal,\n          children: \"Anzeigen\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 11\n        }, this), ShowConfirmation ? /*#__PURE__*/_jsxDEV(MDBBtn, {\n          outline: true,\n          onClick: confirmDocument,\n          children: \"Freigeben\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 27\n        }, this) : /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(MDBBtn, {\n          outline: true,\n          onClick: toggleShowDocumentModal,\n          children: \"L\\xF6schen\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MDBCardFooter, {\n        className: \"text-muted\",\n        children: [\"Hochgeladen am: Test: \", props.uploadDate]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CardModal, {\n      basicModal: showDocumentModal,\n      setBasicModal: setShowDocumentModal,\n      toggleShow: toggleShowDocumentModal,\n      title: props.title,\n      description: props.description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(DocumentCard, \"0TPQa3AeFIXDDYYeEjDU1YiCHTU=\", false, function () {\n  return [useAxiosPrivate, useAuth];\n});\n\n_c = DocumentCard;\nexport default DocumentCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"DocumentCard\");","map":{"version":3,"sources":["/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/components/Documents/DocumentCard.jsx"],"names":["React","useState","useEffect","MDBCard","MDBCardBody","MDBCardTitle","MDBCardText","MDBCardHeader","MDBCardFooter","MDBBtn","useAxiosPrivate","CardModal","useAuth","confirmRechnung","createDokument","getDokumentenhash","DocumentCard","props","axiosInstance","auth","datei","setDatei","fileLink","ShowConfirmation","setShowConfirmation","isLoading","setIsLoading","author_company","console","log","pubkey","get","then","res","data","file","confirmed","company","confirmDocument","e","tx","catch","err","patch","id","showDocumentModal","setShowDocumentModal","toggleShowDocumentModal","createDokumentHash","_transaktionID","_titel","_file","_zoll","crypto","require","hashwert","createHash","update","JSON","stringify","digest","back","proofFilehash","_DokumentID","maxWidth","author","type","documentDate","description","uploadDate","title"],"mappings":"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","sourcesContent":["import { React, useState, useEffect } from \"react\";\nimport {\n  MDBCard,\n  MDBCardBody,\n  MDBCardTitle,\n  MDBCardText,\n  MDBCardHeader,\n  MDBCardFooter,\n  MDBBtn,\n} from \"mdb-react-ui-kit\";\nimport useAxiosPrivate from \"../../hooks/useAxiosPrivate\";\nimport CardModal from \"./CardModal\";\n//Hook für Contextabruf \nimport useAuth from \"../../hooks/useAuth\";\nimport { confirmRechnung, createDokument, getDokumentenhash } from \"../../Web3Client\";\n\nfunction DocumentCard(props) {\n\n  const axiosInstance = useAxiosPrivate();\n  //Context mit Nutzerdaten abrufen \n  const { auth } = useAuth();\n  const [datei, setDatei] = useState([]);\n  let fileLink = null;\n  const [ShowConfirmation, setShowConfirmation] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n\n  const author_company = props.author_company;\n\n  useEffect(() => {\n    //Abruf des Link zur Datei\n    console.log(auth.pubkey)\n    axiosInstance.get(\"file/3\").then((res) => {\n      setDatei(res.data);\n      fileLink = res.data.file;\n/*     console.log(author_company + auth.company)\n    console.log(props.confirmed) */\n    setIsLoading(true)\n    if (props.confirmed == true) {\n      setShowConfirmation(false);\n      console.log(\"bereits bestätigt, confirm auf True\")\n    } else if (author_company == auth.company) {\n        //console.log(\"Firmen sind ungleich- Confirm auf False\")\n    } else {\n        setShowConfirmation(true);\n        //console.log(\"Confirm auf True\")\n    }\n    },[]);\n\n    \n  }, [ShowConfirmation]);\n\n  useEffect(() => {\n\n    \n\n  }, []);\n\n  const confirmDocument = (e) => {\n    //blockchain Transaktion\n    confirmRechnung(0)\n      .then((tx) => {\n        console.log(\"Rechnung mit der RechnungID \" + tx + \" wurde bestätigt\");\n      })\n      .catch((err) => {\n        console.log(\"Rechnungsbestätigung fehlgeschlagen. Fehlermeldung: \" + err);\n    });\n    axiosInstance.patch(`invoice/${props.id}/`, {\n      confirmed: true, \n    })\n    //Hier Blockchain Transaktion einfügen\n    setShowConfirmation(false); \n  }\n\n  // State für \"Dokument anzeigen\" Modal\n  const [showDocumentModal, setShowDocumentModal] = useState(false);\n  // Funktion für Manipulation von Modal (als props weitergereicht)\n  function toggleShowDocumentModal() {\n    setShowDocumentModal(!showDocumentModal);\n  }\n\n  function createDokumentHash(_transaktionID, _titel, _file, _zoll){\n    var crypto = require('crypto');\n    var hashwert = crypto.createHash('sha512').update(JSON.stringify(_file)).digest('hex');\n    var back = false;\n    createDokument(_transaktionID, _titel, hashwert, _zoll)\n    .then((tx) => {\n      console.log(\"Dokument \" + _titel + \" wurde hochgeladen. DokumentenID: \" + tx);\n      back=true;\n    })\n    .catch((err) => {\n      console.log(\"Hashgenerierung fehlgeschlagen. Fehlermeldung: \" + err);\n  });\n  return back;\n}\n\nfunction proofFilehash(_DokumentID, _file){\n  var crypto = require('crypto');\n  var hashwert = crypto.createHash('sha512').update(JSON.stringify(_file)).digest('hex');\n  getDokumentenhash(_DokumentID)\n  .then((tx) => {\n    if(hashwert===tx){\n      return true;\n    }else{\n      return false;\n    }\n  })\n  .catch((err) => {\n    console.log(\"Fehlgeschlagen. Fehlermeldung: \" + err);\n});\n}\n\n\n  \n  return (\n    <>\n      <MDBCard className=\"h-100\" style={{ maxWidth: \"22rem\" }}>\n        <MDBCardHeader>Hochgeladen von: {props.author} - {props.author_company}</MDBCardHeader>\n        <MDBCardBody>\n          <MDBCardTitle>\n            {props.type + \" \" + \"(\" + props.documentDate + \")\"}\n          </MDBCardTitle>     \n          <MDBCardText>{props.description}\n            <br/>\n            {props.confirmed ? <span> Bestätigt</span>: <span> warten auf bestätigung</span>}\n\n          </MDBCardText>\n          <MDBBtn outline onClick={toggleShowDocumentModal}>\n            Anzeigen\n          </MDBBtn>\n      {ShowConfirmation ? <MDBBtn outline onClick={confirmDocument}>\n            Freigeben\n          </MDBBtn>\n          : <br/>\n      }\n\n          <MDBBtn outline onClick={toggleShowDocumentModal}>\n            Löschen\n          </MDBBtn>\n        </MDBCardBody>\n        <MDBCardFooter className=\"text-muted\">\n          Hochgeladen am: Test: {props.uploadDate}\n        </MDBCardFooter>\n      </MDBCard>\n      <CardModal\n        basicModal={showDocumentModal}\n        setBasicModal={setShowDocumentModal}\n        toggleShow={toggleShowDocumentModal}\n        title={props.title}\n        description={props.description}\n      />\n    </>\n  );\n}\n\nexport default DocumentCard;\n"]},"metadata":{},"sourceType":"module"}