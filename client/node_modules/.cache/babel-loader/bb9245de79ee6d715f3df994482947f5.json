{"ast":null,"code":"import Web3 from 'web3';\nimport Zollsystem from './smartcontracts/zollsystem.json';\nlet selectedAccount;\nlet zollsystemcontract;\nlet isinit;\nexport const init = async () => {\n  let provider = window.ethereum;\n\n  if (typeof provider !== 'undefined') {\n    provider.request({\n      method: 'eth_requestAccounts'\n    }).then(accounts => {\n      selectedAccount = accounts[0];\n      console.log(`Selected account is ${selectedAccount}`);\n    }).catch(err => {\n      console.log(err);\n      return;\n    });\n    window.ethereum.on('accountsChanged', function (accounts) {\n      selectedAccount = accounts[0];\n      console.log(`Selected account changed to ${selectedAccount}`);\n    });\n  }\n\n  const web3 = new Web3(provider);\n  const networkId = await web3.eth.net.getId();\n  zollsystemcontract = new web3.eth.Contract(Zollsystem.abi, Zollsystem.networks[networkId].address);\n  isinit = true;\n}; //returns the rechnungID\n\nexport async function createRechnung(_gesamtbetrag, _importeur, _waehrung, _datum, _rechnungsposten, _lieferkosten) {\n  if (!isinit) {\n    await init();\n  }\n\n  await zollsystemcontract.methods.createRechnung(_gesamtbetrag, _importeur, _waehrung, _datum, _rechnungsposten, _lieferkosten).send({\n    from: selectedAccount\n  });\n  return await zollsystemcontract.methods.createRechnung(_gesamtbetrag, _importeur, _waehrung, _datum, _rechnungsposten, _lieferkosten).call({\n    from: selectedAccount\n  });\n}\nexport async function createDokument(_transaktionsID, _hash) {\n  if (!isinit) {\n    await init();\n  }\n\n  await zollsystemcontract.methods.createDokument(_transaktionsID, _hash).send({\n    from: selectedAccount\n  });\n  return await zollsystemcontract.methods.createDokument(transaktionsID, _hash).call({\n    from: selectedAccount\n  });\n}\nexport async function confirmRechnung(_rechnungID) {\n  if (!isinit) {\n    await init();\n  }\n\n  await zollsystemcontract.methods.confirmRechnung(_rechnungID).send({\n    from: selectedAccount\n  });\n  return await zollsystemcontract.methods.confirmRechnung(_rechnungID).call({\n    from: selectedAccount\n  });\n} //returns zollanmeldungID\n\nexport async function createZollanmeldung(_zoll, _rechnungID, _zollwert, _incoterms) {\n  if (!isinit) {\n    await init();\n  }\n\n  await zollsystemcontract.methods.createZollanmeldung(_zoll, _rechnungID, _zollwert, _incoterms).send({\n    from: selectedAccount\n  });\n  return await zollsystemcontract.methods.createZollanmeldung(_zoll, _rechnungID, _zollwert, _incoterms).call({\n    from: selectedAccount\n  });\n}\nexport async function confirmZollanmeldung(_zollanmeldungID) {\n  if (!isinit) {\n    await init();\n  }\n\n  await zollsystemcontract.methods.confirmZollanmeldung(_zollanmeldungID).send({\n    from: selectedAccount\n  });\n  return await zollsystemcontract.methods.confirmZollanmeldung(_zollanmeldungID).call({\n    from: selectedAccount\n  });\n}\nexport async function getDokumentenhash(_transaktionsID) {\n  if (!isinit) {\n    await init();\n  }\n\n  await zollsystemcontract.methods.getDokumentenhash(_transaktionsID).send({\n    from: selectedAccount\n  });\n  return await zollsystemcontract.methods.getDokumentenhash(_transaktionsID).call({\n    from: selectedAccount\n  });\n}","map":{"version":3,"sources":["/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/Web3Client.js"],"names":["Web3","Zollsystem","selectedAccount","zollsystemcontract","isinit","init","provider","window","ethereum","request","method","then","accounts","console","log","catch","err","on","web3","networkId","eth","net","getId","Contract","abi","networks","address","createRechnung","_gesamtbetrag","_importeur","_waehrung","_datum","_rechnungsposten","_lieferkosten","methods","send","from","call","createDokument","_transaktionsID","_hash","transaktionsID","confirmRechnung","_rechnungID","createZollanmeldung","_zoll","_zollwert","_incoterms","confirmZollanmeldung","_zollanmeldungID","getDokumentenhash"],"mappings":"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","sourcesContent":["import Web3 from 'web3';\nimport Zollsystem from './smartcontracts/zollsystem.json';\n\nlet selectedAccount;\n\nlet zollsystemcontract;\n\nlet isinit;\n\nexport const init = async () => {\n    let provider = window.ethereum;\n\n    if (typeof provider !== 'undefined'){\n      provider\n      .request({ method: 'eth_requestAccounts' })\n      .then((accounts) => {\n          selectedAccount = accounts[0];\n        console.log(`Selected account is ${selectedAccount}`);\n      })\n      .catch((err) => {\n        console.log(err);\n        return;\n      });\n      window.ethereum.on('accountsChanged', function (accounts) {\n        selectedAccount = accounts[0];\n        console.log(`Selected account changed to ${selectedAccount}`);\n      });\n    }\n    const web3 = new Web3(provider);\n    const networkId = await web3.eth.net.getId();\n\n    zollsystemcontract = new web3.eth.Contract(\n        Zollsystem.abi, \n        Zollsystem.networks[networkId].address);\n    isinit=true;\n}; \n\n//returns the rechnungID\nexport async function createRechnung(_gesamtbetrag, _importeur, _waehrung, _datum, _rechnungsposten, _lieferkosten){\n    if (!isinit) {\n        await init();\n    }\n    await zollsystemcontract.methods.createRechnung(_gesamtbetrag, _importeur, _waehrung, _datum, _rechnungsposten, _lieferkosten).send({from: selectedAccount});\n    return await zollsystemcontract.methods.createRechnung(_gesamtbetrag, _importeur, _waehrung, _datum, _rechnungsposten, _lieferkosten).call({from: selectedAccount});\n}\n\nexport async function createDokument(_transaktionsID, _hash){\n  if (!isinit) {\n      await init();\n  }\n  await zollsystemcontract.methods.createDokument(_transaktionsID, _hash).send({from: selectedAccount});\n  return await zollsystemcontract.methods.createDokument(transaktionsID, _hash).call({from: selectedAccount});\n}\n\nexport async function confirmRechnung(_rechnungID){\n  if (!isinit) {\n      await init();\n  }\n  await zollsystemcontract.methods.confirmRechnung(_rechnungID).send({from: selectedAccount});\n  return await zollsystemcontract.methods.confirmRechnung(_rechnungID).call({from: selectedAccount});\n}\n\n//returns zollanmeldungID\n export async function createZollanmeldung(_zoll, _rechnungID, _zollwert, _incoterms){\n     if (!isinit) {\n         await init();\n     }\n     await zollsystemcontract.methods.createZollanmeldung(_zoll, _rechnungID, _zollwert, _incoterms).send({from: selectedAccount});\n     return await zollsystemcontract.methods.createZollanmeldung(_zoll, _rechnungID, _zollwert, _incoterms).call({from: selectedAccount});\n }\n\n export async function confirmZollanmeldung(_zollanmeldungID){\n  if (!isinit) {\n      await init();\n  }\n  await zollsystemcontract.methods.confirmZollanmeldung(_zollanmeldungID).send({from: selectedAccount});\n  return await zollsystemcontract.methods.confirmZollanmeldung(_zollanmeldungID).call({from: selectedAccount});\n}\n\nexport async function getDokumentenhash(_transaktionsID){\n  if (!isinit) {\n      await init();\n  }\n  await zollsystemcontract.methods.getDokumentenhash(_transaktionsID).send({from: selectedAccount});\n  return await zollsystemcontract.methods.getDokumentenhash(_transaktionsID).call({from: selectedAccount});\n}"]},"metadata":{},"sourceType":"module"}