{"ast":null,"code":"var _jsxFileName = \"/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/components/PersistLogin.js\",\n    _s = $RefreshSig$();\n\nimport { Outlet } from \"react-router-dom\";\nimport { useState, useEffect } from \"react\";\nimport useRefreshToken from \"../hooks/useRefreshToken\";\nimport useAuth from \"../hooks/useAuth\";\nimport { MDBSpinner } from \"mdb-react-ui-kit\";\nimport useAxiosPrivate from \"../hooks/useAxiosPrivate\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst PersistLogin = () => {\n  _s();\n\n  const [isLoading, setIsLoading] = useState(true);\n  const refresh = useRefreshToken();\n  const {\n    auth,\n    setAuth\n  } = useAuth();\n  const axiosInstance = useAxiosPrivate();\n  const userData = [];\n  useEffect(() => {\n    let isMounted = true;\n\n    const verifyRefreshToken = async () => {\n      console.log(\"Verify Refresh token called\");\n\n      try {\n        await refresh();\n        userData = await axiosInstance.get('user').then(res => {\n          console.log(res.data);\n          /*                     setAuth(prev => {\n                                  console.log(`New UserData : ${res.data}`);\n                                  return {\n                                      ...prev,\n                                      user: res.data.username,      \n                                      company: res.data.employee.company.name\n                                  }\n                              }); */\n\n          console.log(userData);\n        });\n      } catch (err) {\n        console.error(err);\n      } finally {\n        console.log(userData);\n        isMounted && setIsLoading(false);\n      }\n    };\n\n    const getUserData = async () => {\n      console.log(\"Updata data\");\n\n      try {\n        await axiosInstance.get('user').then(res => {\n          console.log(res.data);\n        });\n      } catch (err) {\n        console.error(err);\n      }\n    }; // Avoids unwanted call to verifyRefreshToken\n    //Verify Refresh Token funktionen nur aufrufen, wenn auth state nicht vorhanden ist\n\n\n    !(auth !== null && auth !== void 0 && auth.accessToken) ? verifyRefreshToken() : setIsLoading(false);\n    return () => isMounted = false;\n  }, []); //Nur für Debugging und die Anzeige der aktuellen Status: \n\n  useEffect(() => {\n    console.log(`isLoading: ${isLoading}`);\n    console.log(`aT: ${JSON.stringify(auth === null || auth === void 0 ? void 0 : auth.accessToken)}`);\n  }, [isLoading]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: isLoading ? /*#__PURE__*/_jsxDEV(MDBSpinner, {\n      grow: true,\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"visually-hidden\",\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 29\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 25\n    }, this) : /*#__PURE__*/_jsxDEV(Outlet, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 23\n    }, this)\n  }, void 0, false);\n};\n\n_s(PersistLogin, \"TaOF0LqRSilu5hUsEgs42IXYMaw=\", false, function () {\n  return [useRefreshToken, useAuth, useAxiosPrivate];\n});\n\n_c = PersistLogin;\nexport default PersistLogin;\n\nvar _c;\n\n$RefreshReg$(_c, \"PersistLogin\");","map":{"version":3,"sources":["/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/components/PersistLogin.js"],"names":["Outlet","useState","useEffect","useRefreshToken","useAuth","MDBSpinner","useAxiosPrivate","PersistLogin","isLoading","setIsLoading","refresh","auth","setAuth","axiosInstance","userData","isMounted","verifyRefreshToken","console","log","get","then","res","data","err","error","getUserData","accessToken","JSON","stringify"],"mappings":";;;AAAA,SAASA,MAAT,QAAuB,kBAAvB;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,eAAP,MAA4B,0BAA5B;AACA,OAAOC,OAAP,MAAoB,kBAApB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,OAAOC,eAAP,MAA4B,0BAA5B;;;;AAEA,MAAMC,YAAY,GAAG,MAAM;AAAA;;AACvB,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BR,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAMS,OAAO,GAAGP,eAAe,EAA/B;AACA,QAAM;AAAEQ,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAmBR,OAAO,EAAhC;AACA,QAAMS,aAAa,GAAGP,eAAe,EAArC;AACA,QAAMQ,QAAQ,GAAG,EAAjB;AAGAZ,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIa,SAAS,GAAG,IAAhB;;AAEA,UAAMC,kBAAkB,GAAG,YAAY;AACnCC,MAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ;;AACA,UAAI;AACA,cAAMR,OAAO,EAAb;AACAI,QAAAA,QAAQ,GAAG,MAAMD,aAAa,CAACM,GAAd,CAAkB,MAAlB,EAA0BC,IAA1B,CAAgCC,GAAD,IAAS;AACrDJ,UAAAA,OAAO,CAACC,GAAR,CAAYG,GAAG,CAACC,IAAhB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACgBL,UAAAA,OAAO,CAACC,GAAR,CAAYJ,QAAZ;AACC,SAXgB,CAAjB;AAaH,OAfD,CAgBA,OAAOS,GAAP,EAAY;AACRN,QAAAA,OAAO,CAACO,KAAR,CAAcD,GAAd;AACH,OAlBD,SAmBO;AACHN,QAAAA,OAAO,CAACC,GAAR,CAAYJ,QAAZ;AACAC,QAAAA,SAAS,IAAIN,YAAY,CAAC,KAAD,CAAzB;AACH;AACJ,KAzBD;;AA0BA,UAAMgB,WAAW,GAAG,YAAY;AAC5BR,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;;AACA,UAAI;AACA,cAAML,aAAa,CAACM,GAAd,CAAkB,MAAlB,EAA0BC,IAA1B,CAAgCC,GAAD,IAAS;AAC1CJ,UAAAA,OAAO,CAACC,GAAR,CAAYG,GAAG,CAACC,IAAhB;AAED,SAHG,CAAN;AAIH,OALD,CAMA,OAAOC,GAAP,EAAY;AACRN,QAAAA,OAAO,CAACO,KAAR,CAAcD,GAAd;AACH;AAEJ,KAZD,CA7BY,CA2CZ;AACA;;;AACA,MAACZ,IAAD,aAACA,IAAD,eAACA,IAAI,CAAEe,WAAP,IAAsBV,kBAAkB,EAAxC,GAA6CP,YAAY,CAAC,KAAD,CAAzD;AAEA,WAAO,MAAMM,SAAS,GAAG,KAAzB;AACH,GAhDQ,EAgDN,EAhDM,CAAT,CARuB,CA0DvB;;AAEAb,EAAAA,SAAS,CAAC,MAAM;AACZe,IAAAA,OAAO,CAACC,GAAR,CAAa,cAAaV,SAAU,EAApC;AACAS,IAAAA,OAAO,CAACC,GAAR,CAAa,OAAMS,IAAI,CAACC,SAAL,CAAejB,IAAf,aAAeA,IAAf,uBAAeA,IAAI,CAAEe,WAArB,CAAkC,EAArD;AACH,GAHQ,EAGN,CAAClB,SAAD,CAHM,CAAT;AAKA,sBACI;AAAA,cACKA,SAAS,gBACE,QAAC,UAAD;AAAY,MAAA,IAAI,MAAhB;AAAA,6BACI;AAAM,QAAA,SAAS,EAAC,iBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADF,gBAIA,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AALd,mBADJ;AAWH,CA5ED;;GAAMD,Y;UAEcJ,e,EACSC,O,EACHE,e;;;KAJpBC,Y;AA8EN,eAAeA,YAAf","sourcesContent":["import { Outlet } from \"react-router-dom\";\nimport { useState, useEffect } from \"react\";\nimport useRefreshToken from \"../hooks/useRefreshToken\";\nimport useAuth from \"../hooks/useAuth\";\nimport { MDBSpinner } from \"mdb-react-ui-kit\";\nimport useAxiosPrivate from \"../hooks/useAxiosPrivate\";\n\nconst PersistLogin = () => {\n    const [isLoading, setIsLoading] = useState(true);\n    const refresh = useRefreshToken();\n    const { auth, setAuth} = useAuth(); \n    const axiosInstance = useAxiosPrivate();\n    const userData = []\n\n\n    useEffect(() => {\n        let isMounted = true; \n\n        const verifyRefreshToken = async () => {\n            console.log(\"Verify Refresh token called\")\n            try {\n                await refresh(); \n                userData = await axiosInstance.get('user').then((res) => {\n                    console.log(res.data);\n/*                     setAuth(prev => {\n                        console.log(`New UserData : ${res.data}`);\n                        return {\n                            ...prev,\n                            user: res.data.username,      \n                            company: res.data.employee.company.name\n                        }\n                    }); */\n                console.log(userData)\n                });\n\n            }        \n            catch (err) {\n                console.error(err);\n            }\n            finally{\n                console.log(userData)\n                isMounted && setIsLoading(false);\n            }\n        }\n        const getUserData = async () => {\n            console.log(\"Updata data\")\n            try {\n                await axiosInstance.get('user').then((res) => {\n                    console.log(res.data);\n\n                  });\n            }\n            catch (err) {\n                console.error(err);\n            }\n\n        }\n\n        // Avoids unwanted call to verifyRefreshToken\n        //Verify Refresh Token funktionen nur aufrufen, wenn auth state nicht vorhanden ist\n        !auth?.accessToken ?  verifyRefreshToken() : setIsLoading(false);\n\n        return () => isMounted = false;\n    }, [])\n\n    //Nur für Debugging und die Anzeige der aktuellen Status: \n\n    useEffect(() => {\n        console.log(`isLoading: ${isLoading}`)\n        console.log(`aT: ${JSON.stringify(auth?.accessToken)}`)\n    }, [isLoading])\n\n    return (\n        <>\n            {isLoading\n                    ?   <MDBSpinner grow>\n                            <span className='visually-hidden'>Loading...</span>\n                        </MDBSpinner>\n                    : <Outlet />\n            }\n        </>\n    )\n\n}\n\nexport default PersistLogin"]},"metadata":{},"sourceType":"module"}