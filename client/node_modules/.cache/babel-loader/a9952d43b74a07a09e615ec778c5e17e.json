{"ast":null,"code":"import _asyncToGenerator from\"/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _slicedToArray from\"/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import _regeneratorRuntime from\"/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/node_modules/@babel/runtime/regenerator/index.js\";import{useLocation,Navigate,Outlet}from\"react-router-dom\";import{useState,useEffect}from\"react\";import{MDBSpinner}from\"mdb-react-ui-kit\";import useAuth from\"../hooks/useAuth\";import useDataUpdate from\"../hooks/useDataUpdate\";//Management der gesperrten Nutzerbereiche und zur Verfügung stellen einer Komponente die die Berechtigungen prüfen \nimport{jsx as _jsx}from\"react/jsx-runtime\";var RequireAuth=function RequireAuth(_ref){var allowedRoles=_ref.allowedRoles;var _useAuth=useAuth(),auth=_useAuth.auth;var location=useLocation();var dataUpdate=useDataUpdate();var _useState=useState(true),_useState2=_slicedToArray(_useState,2),isLoading=_useState2[0],setIsLoading=_useState2[1];useEffect(function(){var isMounted=true;//Nutzerdaten müssen beim erstmaligen Login abgefragt werden bzw. aktualisiert werden, damit Rollen zur Verfügung stehen\nvar getfirstDataSet=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return dataUpdate();case 3:_context.next=8;break;case 5:_context.prev=5;_context.t0=_context[\"catch\"](0);console.error(_context.t0);case 8:_context.prev=8;isMounted&&setIsLoading(false);return _context.finish(8);case 11:case\"end\":return _context.stop();}}},_callee,null,[[0,5,8,11]]);}));return function getfirstDataSet(){return _ref2.apply(this,arguments);};}();!(auth!==null&&auth!==void 0&&auth.role)?getfirstDataSet():setIsLoading(false);return function(){return isMounted=false;};},[]);/*     console.log(auth?.user);\n    console.log(`Die aktuelle Rolle ist ${auth?.role}`)\n    console.log(allowedRoles) */return isLoading?/*#__PURE__*/_jsx(MDBSpinner,{grow:true,children:/*#__PURE__*/_jsx(\"span\",{className:\"visually-hidden\",children:\"Loading...\"})})://wenn AccessToken vorhanden Seite anzeigen, ansonsten login\nallowedRoles!==null&&allowedRoles!==void 0&&allowedRoles.includes(auth===null||auth===void 0?void 0:auth.role)?/*#__PURE__*/_jsx(Outlet,{}):auth!==null&&auth!==void 0&&auth.username?/*#__PURE__*/_jsx(Navigate,{to:\"/unauthorized\",state:{from:location},replace:true}):/*#__PURE__*/_jsx(Navigate,{to:\"/login\",state:{from:location},replace:true});};export default RequireAuth;","map":{"version":3,"sources":["/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/components/requireAuth.js"],"names":["useLocation","Navigate","Outlet","useState","useEffect","MDBSpinner","useAuth","useDataUpdate","RequireAuth","allowedRoles","auth","location","dataUpdate","isLoading","setIsLoading","isMounted","getfirstDataSet","console","error","role","includes","username","from"],"mappings":"kcAAA,OAAUA,WAAV,CAAuBC,QAAvB,CAAgCC,MAAhC,KAA6C,kBAA7C,CACA,OAASC,QAAT,CAAmBC,SAAnB,KAAoC,OAApC,CAEA,OAASC,UAAT,KAA2B,kBAA3B,CAEA,MAAOC,CAAAA,OAAP,KAAoB,kBAApB,CACA,MAAOC,CAAAA,aAAP,KAA0B,wBAA1B,CAGA;2CAEA,GAAMC,CAAAA,WAAW,CAAI,QAAfA,CAAAA,WAAe,MAAoB,IAAlBC,CAAAA,YAAkB,MAAlBA,YAAkB,CACrC,aAAeH,OAAO,EAAtB,CAAOI,IAAP,UAAOA,IAAP,CACA,GAAMC,CAAAA,QAAQ,CAAGX,WAAW,EAA5B,CACA,GAAMY,CAAAA,UAAU,CAAGL,aAAa,EAAhC,CACA,cAAkCJ,QAAQ,CAAC,IAAD,CAA1C,wCAAOU,SAAP,eAAkBC,YAAlB,eAEAV,SAAS,CAAC,UAAM,CAEZ,GAAIW,CAAAA,SAAS,CAAG,IAAhB,CACA;AAEA,GAAMC,CAAAA,eAAe,2FAAG,yKAEVJ,CAAAA,UAAU,EAFA,sFAKhBK,OAAO,CAACC,KAAR,cALgB,uBAQhBH,SAAS,EAAID,YAAY,CAAC,KAAD,CAAzB,CARgB,mGAAH,kBAAfE,CAAAA,eAAe,2CAArB,CAYA,EAACN,IAAD,SAACA,IAAD,WAACA,IAAI,CAAES,IAAP,EAAcH,eAAe,EAA7B,CAAkCF,YAAY,CAAC,KAAD,CAA9C,CAEA,MAAO,kBAAMC,CAAAA,SAAS,CAAG,KAAlB,EAAP,CACH,CApBQ,CAoBN,EApBM,CAAT,CAuBJ;AACA;AACA,gCAEI,MAEIF,CAAAA,SAAS,cACD,KAAC,UAAD,EAAY,IAAI,KAAhB,uBACI,aAAM,SAAS,CAAC,iBAAhB,wBADJ,EADC,CAKT;AACQJ,YAAY,OAAZ,EAAAA,YAAY,SAAZ,EAAAA,YAAY,CAAEW,QAAd,CAAwBV,IAAxB,SAAwBA,IAAxB,iBAAwBA,IAAI,CAAES,IAA9B,eACU,KAAC,MAAD,IADV,CAEUT,IAAI,OAAJ,EAAAA,IAAI,SAAJ,EAAAA,IAAI,CAAEW,QAAN,cACI,KAAC,QAAD,EAAU,EAAE,CAAC,eAAb,CAA6B,KAAK,CAAE,CAACC,IAAI,CAACX,QAAN,CAApC,CAAqD,OAAO,KAA5D,EADJ,cAEI,KAAC,QAAD,EAAU,EAAE,CAAG,QAAf,CAAwB,KAAK,CAAE,CAACW,IAAI,CAACX,QAAN,CAA/B,CAAgD,OAAO,KAAvD,EAZ1B,CAgBH,CAjDD,CAmDA,cAAeH,CAAAA,WAAf","sourcesContent":["import  { useLocation, Navigate,Outlet} from \"react-router-dom\";\nimport { useState, useEffect } from \"react\";\n\nimport { MDBSpinner } from \"mdb-react-ui-kit\";\n\nimport useAuth from \"../hooks/useAuth\";\nimport useDataUpdate from \"../hooks/useDataUpdate\";\n\n\n//Management der gesperrten Nutzerbereiche und zur Verfügung stellen einer Komponente die die Berechtigungen prüfen \n\nconst RequireAuth =  ({allowedRoles}) => {\n    const {auth} = useAuth();\n    const location = useLocation();\n    const dataUpdate = useDataUpdate(); \n    const [isLoading, setIsLoading] = useState(true);\n\n    useEffect(() => {\n\n        let isMounted = true; \n        //Nutzerdaten müssen beim erstmaligen Login abgefragt werden bzw. aktualisiert werden, damit Rollen zur Verfügung stehen\n\n        const getfirstDataSet = async () => {\n            try {\n                await dataUpdate();\n            }        \n            catch (err) {\n                console.error(err);\n            }\n            finally{\n                isMounted && setIsLoading(false);\n            }\n        }\n\n        !auth?.role?  getfirstDataSet() : setIsLoading(false);\n\n        return () => isMounted = false;\n    }, [])\n\n\n/*     console.log(auth?.user);\n    console.log(`Die aktuelle Rolle ist ${auth?.role}`)\n    console.log(allowedRoles) */\n    \n    return (\n        \n        isLoading\n            ?   <MDBSpinner grow>\n                    <span className='visually-hidden'>Loading...</span>\n                </MDBSpinner>\n                : \n        //wenn AccessToken vorhanden Seite anzeigen, ansonsten login\n                allowedRoles?.includes( auth?.role)\n                        ? <Outlet/> \n                        : auth?.username \n                            ? <Navigate to=\"/unauthorized\" state={{from:location}} replace />\n                            : <Navigate to = \"/login\" state={{from:location}} replace />\n        \n    )\n\n}\n\nexport default RequireAuth;"]},"metadata":{},"sourceType":"module"}