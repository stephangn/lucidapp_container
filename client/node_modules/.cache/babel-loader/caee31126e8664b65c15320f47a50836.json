{"ast":null,"code":"import Web3 from 'web3';\nimport Zollsystem from './smartcontracts/zollsystem.json';\nlet selectedAccount;\nlet zollsystemcontract;\nlet isinit;\nexport const init = async () => {\n  let provider = window.ethereum;\n\n  if (typeof provider !== 'undefined') {\n    provider.request({\n      method: 'eth_requestAccounts'\n    }).then(accounts => {\n      selectedAccount = accounts[0];\n      console.log(`Selected account is ${selectedAccount}`);\n    }).catch(err => {\n      console.log(err);\n      return;\n    });\n    window.ethereum.on('accountsChanged', function (accounts) {\n      selectedAccount = accounts[0];\n      console.log(`Selected account changed to ${selectedAccount}`);\n    });\n  }\n\n  const web3 = new Web3(provider);\n  const networkId = await web3.eth.net.getId();\n  zollsystemcontract = new web3.eth.Contract(Zollsystem.abi, Zollsystem.networks[networkId].address);\n  isinit = true;\n}; //returns the rechnungID\n\nexport async function createRechnung(_gesamtbetrag, _importeur, _waehrung, _datum, _rechnungsposten) {\n  if (!isinit) {\n    await init();\n  }\n\n  await zollsystemcontract.methods.createRechnung(_gesamtbetrag, _importeur, _waehrung, _datum, _rechnungsposten).send({\n    from: selectedAccount\n  });\n  return await zollsystemcontract.methods.createRechnung(_gesamtbetrag, _importeur, _waehrung, _datum, _rechnungsposten).call({\n    from: selectedAccount\n  });\n}\nexport async function createDokument(_transaktionsID, _titel, _hash, _zoll) {\n  if (!isinit) {\n    await init();\n  }\n\n  await zollsystemcontract.methods.createDokument(_transaktionsID, _titel, _hash, _zoll).send({\n    from: selectedAccount\n  });\n  return await zollsystemcontract.methods.createDokument(_transaktionsID, _titel, _hash, _zoll).call({\n    from: selectedAccount\n  });\n}\nexport async function confirmRechnung(_rechnungID) {\n  if (!isinit) {\n    await init();\n  }\n\n  await zollsystemcontract.methods.confirmRechnung(_rechnungID).send({\n    from: selectedAccount\n  });\n  return await zollsystemcontract.methods.confirmRechnung(_rechnungID).call({\n    from: selectedAccount\n  });\n} //returns zollanmeldungID\n\nexport async function createZollanmeldung(_zoll, _rechnungID, _zollwert, _transportkosten, _incoterms) {\n  if (!isinit) {\n    await init();\n  }\n\n  await zollsystemcontract.methods.createZollanmeldung(_zoll, _rechnungID, _zollwert, _transportkosten, _incoterms).send({\n    from: selectedAccount\n  });\n  return await zollsystemcontract.methods.createZollanmeldung(_zoll, _rechnungID, _zollwert, _transportkosten, _incoterms).call({\n    from: selectedAccount\n  });\n}\nexport async function confirmZollanmeldung(_zollanmeldungID) {\n  if (!isinit) {\n    await init();\n  }\n\n  await zollsystemcontract.methods.confirmZollanmeldung(_zollanmeldungID).send({\n    from: selectedAccount\n  });\n  return await zollsystemcontract.methods.confirmZollanmeldung(_zollanmeldungID).call({\n    from: selectedAccount\n  });\n}","map":{"version":3,"sources":["/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/Web3Client.js"],"names":["Web3","Zollsystem","selectedAccount","zollsystemcontract","isinit","init","provider","window","ethereum","request","method","then","accounts","console","log","catch","err","on","web3","networkId","eth","net","getId","Contract","abi","networks","address","createRechnung","_gesamtbetrag","_importeur","_waehrung","_datum","_rechnungsposten","methods","send","from","call","createDokument","_transaktionsID","_titel","_hash","_zoll","confirmRechnung","_rechnungID","createZollanmeldung","_zollwert","_transportkosten","_incoterms","confirmZollanmeldung","_zollanmeldungID"],"mappings":"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","sourcesContent":["import Web3 from 'web3';\nimport Zollsystem from './smartcontracts/zollsystem.json';\n\nlet selectedAccount;\n\nlet zollsystemcontract;\n\nlet isinit;\n\nexport const init = async () => {\n    let provider = window.ethereum;\n\n    if (typeof provider !== 'undefined'){\n      provider\n      .request({ method: 'eth_requestAccounts' })\n      .then((accounts) => {\n          selectedAccount = accounts[0];\n        console.log(`Selected account is ${selectedAccount}`);\n      })\n      .catch((err) => {\n        console.log(err);\n        return;\n      });\n      window.ethereum.on('accountsChanged', function (accounts) {\n        selectedAccount = accounts[0];\n        console.log(`Selected account changed to ${selectedAccount}`);\n      });\n    }\n    const web3 = new Web3(provider);\n\n\n\n    const networkId = await web3.eth.net.getId();\n\n    zollsystemcontract = new web3.eth.Contract(\n        Zollsystem.abi, \n        Zollsystem.networks[networkId].address);\n    isinit=true;\n}; \n\n//returns the rechnungID\nexport async function createRechnung(_gesamtbetrag, _importeur, _waehrung, _datum, _rechnungsposten){\n    if (!isinit) {\n        await init();\n    }\n    await zollsystemcontract.methods.createRechnung(_gesamtbetrag, _importeur, _waehrung, _datum, _rechnungsposten).send({from: selectedAccount});\n    return await zollsystemcontract.methods.createRechnung(_gesamtbetrag, _importeur, _waehrung, _datum, _rechnungsposten).call({from: selectedAccount});\n}\n\nexport async function createDokument(_transaktionsID, _titel, _hash, _zoll){\n  if (!isinit) {\n      await init();\n  }\n  await zollsystemcontract.methods.createDokument(_transaktionsID, _titel, _hash, _zoll).send({from: selectedAccount});\n  return await zollsystemcontract.methods.createDokument(_transaktionsID, _titel, _hash, _zoll).call({from: selectedAccount});\n}\n\nexport async function confirmRechnung(_rechnungID){\n  if (!isinit) {\n      await init();\n  }\n  await zollsystemcontract.methods.confirmRechnung(_rechnungID).send({from: selectedAccount});\n  return await zollsystemcontract.methods.confirmRechnung(_rechnungID).call({from: selectedAccount});\n}\n\n//returns zollanmeldungID\n export async function createZollanmeldung(_zoll, _rechnungID, _zollwert, _transportkosten, _incoterms){\n     if (!isinit) {\n         await init();\n     }\n     await zollsystemcontract.methods.createZollanmeldung(_zoll, _rechnungID, _zollwert, _transportkosten, _incoterms).send({from: selectedAccount});\n     return await zollsystemcontract.methods.createZollanmeldung(_zoll, _rechnungID, _zollwert, _transportkosten, _incoterms).call({from: selectedAccount});\n }\n\n export async function confirmZollanmeldung(_zollanmeldungID){\n  if (!isinit) {\n      await init();\n  }\n  await zollsystemcontract.methods.confirmZollanmeldung(_zollanmeldungID).send({from: selectedAccount});\n  return await zollsystemcontract.methods.confirmZollanmeldung(_zollanmeldungID).call({from: selectedAccount});\n}\n"]},"metadata":{},"sourceType":"module"}