{"ast":null,"code":"var _jsxFileName = \"/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/components/Documents/InvoiceForm.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { MDBContainer, MDBRow, MDBCol, MDBInput, MDBBtn, MDBBadge } from \"mdb-react-ui-kit\";\nimport { init, createRechnung } from \"../../Web3Client\";\nimport { useParams } from \"react-router-dom\";\nimport 'json2csv';\nimport LZString from 'lz-string';\nimport useAxiosPrivate from \"../../hooks/useAxiosPrivate\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar crypto = require('crypto');\n\nvar blockchaintx = \"\";\n\nfunction InvoiceForm() {\n  _s();\n\n  const axiosInstance = useAxiosPrivate();\n  const [invoiceFields, setInvoiceFields] = useState({\n    invoiceDate: \"\",\n    invoiceCurrency: \"\",\n    invoiceDescription: \"\",\n    invoiceItems: []\n  });\n\n  const addIngredient = () => {\n    setInvoiceFields({ ...invoiceFields,\n      invoiceItems: [...invoiceFields.invoiceItems, {\n        product: \"Bier\",\n        amount: 3,\n        unit: \"kg\",\n        price: \"4545\"\n      }]\n    });\n  };\n\n  const [invoiceItemFields, setInvoiceItemFields] = useState([{\n    \"product\": \"\",\n    \"amount\": \"\",\n    \"unit\": \"\",\n    \"price\": \"\"\n  }]);\n\n  function handleInvoiceChange(event) {\n    const currentInvoiceFields = {\n      invoiceDate: invoiceFields.invoiceDate,\n      invoiceCurrency: invoiceFields.invoiceCurrency,\n      invoiceDescription: invoiceFields.invoiceDescription\n    };\n    const target = event.target;\n    const value = target.value;\n    const name = target.name;\n    currentInvoiceFields[name] = value;\n    setInvoiceFields(currentInvoiceFields);\n    addIngredient;\n  }\n\n  function handleItemChange(index, event) {\n    const values = [...invoiceItemFields];\n    values[index][event.target.name] = event.target.value;\n    setInvoiceItemFields(values);\n  }\n\n  const {\n    transactionId\n  } = useParams();\n\n  function handleSubmit(e) {\n    e.preventDefault(); //Blockchain Transaktion\n\n    const {\n      Parser\n    } = require('json2csv');\n\n    const parser = new Parser(invoiceItemFields); //convert to csv to save  Gas\n\n    const csv = parser.parse(invoiceItemFields); //compress invoiceItemFields-CSV-String to save Gas\n\n    const compressedcsv = LZString.compress(csv);\n    createRechnung(\"2 Mark 50!\", \"0xbd4f99F9133149b9e29E0E2d9733aeBb41e1cB9f\", invoiceFields.invoiceCurrency, invoiceFields.invoiceDate, compressedcsv).then(tx => {\n      console.log(\"Transaktion erfolgreich: \" + tx);\n      blockchaintx = tx;\n    }).catch(err => {\n      console.log(\"Transaktion fehlgeschlagen: \" + \"  \" + err + crypto.createHash('sha256').update(JSON.stringify(invoiceItemFields)).digest('hex'));\n    }); //Id of transaction to add to right transaction \n\n    var transactionIdint = 2; //parseInt(transactionId)\n\n    const invoice = {};\n    console.log(invoiceItemFields); //Ãœbermittel und anlegen der Rechnung\n\n    axiosInstance.post('/invoice/', {\n      type: \"Rechnung\",\n      description: invoiceFields.invoiceDescription,\n      blockchainID: blockchaintx,\n      issue_date: invoiceFields.invoiceDate,\n      invoice_text: invoiceFields.invoiceDescription,\n      currency: invoiceFields.invoiceCurrency,\n      transaction: transactionIdint\n    }).then(res => {\n      console.log(res.data);\n      let invoiceID = res.data.id;\n      console.log(invoiceID);\n      let invoiceItems = JSON.stringify(invoiceItemFields);\n      console.log(invoiceItems);\n      axiosInstance.post('/invoiceItems/', invoiceItems, {\n        headers: {\n          // Overwrite Axios's automatically set Content-Type\n          'Content-Type': 'application/json'\n        }\n      }).then(res => {\n        console.log(res.data);\n      }).catch(error => {\n        console.error('There was an error!', error);\n      });\n    }).catch(error => {\n      console.error('There was an error!', error);\n    });\n  }\n\n  function handleAddFields() {\n    setInvoiceItemFields([...invoiceItemFields, {\n      \"product\": \"\",\n      \"amount\": \"\",\n      \"unit\": \"\",\n      \"price\": \"\"\n    }]);\n  }\n\n  function handleRemoveFields(index) {\n    const values = [...invoiceItemFields]; // values.splice(index, 1);\n\n    values.splice(values.findIndex(value => value.index === index), 1);\n    setInvoiceItemFields(values);\n  }\n\n  return /*#__PURE__*/_jsxDEV(MDBContainer, {\n    children: [/*#__PURE__*/_jsxDEV(MDBRow, {\n      children: [/*#__PURE__*/_jsxDEV(MDBCol, {\n        children: /*#__PURE__*/_jsxDEV(MDBInput, {\n          className: \"mb-4\",\n          name: \"invoiceDate\",\n          id: \"invoiceDate\",\n          label: \"Rechnungsdatum\",\n          type: \"date\",\n          onChange: event => handleInvoiceChange(event)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MDBCol, {\n        children: /*#__PURE__*/_jsxDEV(MDBInput, {\n          className: \"mb-4\",\n          name: \"invoiceCurrency\",\n          id: \"invoiceCurrency\",\n          label: \"W\\xE4hrung\",\n          type: \"text\",\n          onChange: event => handleInvoiceChange(event)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MDBInput, {\n      wrapperClass: \"mb-4\",\n      textarea: true,\n      name: \"invoiceDescription\",\n      id: \"invoiceDescription\",\n      rows: 3,\n      label: \"Beschreibung (optional)\",\n      onChange: event => handleInvoiceChange(event)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [invoiceItemFields.map((inputField, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h6\", {\n          children: [\"Rechnungsposten \", index + 1]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(MDBInput, {\n          className: \"mb-4\",\n          name: \"product\",\n          label: \"Produktname\",\n          type: \"text\",\n          value: inputField.product,\n          onChange: event => handleItemChange(index, event)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(MDBRow, {\n          children: [/*#__PURE__*/_jsxDEV(MDBCol, {\n            children: /*#__PURE__*/_jsxDEV(MDBInput, {\n              className: \"mb-4\",\n              name: \"amount\",\n              label: \"Anzahl\",\n              type: \"number\",\n              value: inputField.amount,\n              onChange: event => handleItemChange(index, event)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 209,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(MDBCol, {\n            children: /*#__PURE__*/_jsxDEV(MDBInput, {\n              className: \"mb-4\",\n              name: \"unit\",\n              label: \"Einheit\",\n              type: \"text\",\n              value: inputField.unit,\n              onChange: event => handleItemChange(index, event)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 219,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 218,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(MDBCol, {\n            children: /*#__PURE__*/_jsxDEV(MDBInput, {\n              className: \"mb-4\",\n              name: \"price\",\n              label: \"Preis pro Enheit\",\n              type: \"number\",\n              value: inputField.price,\n              onChange: event => handleItemChange(index, event)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 229,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 228,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(MDBCol, {\n            children: /*#__PURE__*/_jsxDEV(MDBBadge, {\n              className: \"mt-2 me-4 float-end\",\n              color: \"primary\",\n              children: [\"Betrag :\", \" \", inputField.amount * inputField.price, \" \", invoiceFields.invoiceCurrency]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 239,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 238,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MDBBtn, {\n        className: \"me-3 mb-3\",\n        color: \"success\",\n        onClick: handleAddFields,\n        children: \"Rechnungsposten hinzuf\\xFCgen\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 9\n      }, this), invoiceItemFields.length > 1 && /*#__PURE__*/_jsxDEV(MDBBtn, {\n        className: \"me-3 mb-3\",\n        color: \"danger\",\n        onClick: handleRemoveFields,\n        children: \"Rechnungsposten entfernen\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(MDBBtn, {\n        className: \"float-end\",\n        color: \"primary\",\n        onClick: handleSubmit,\n        children: \"Abschicken\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 161,\n    columnNumber: 5\n  }, this);\n}\n\n_s(InvoiceForm, \"nngKitrw1z3mNROL/S2poEYorzo=\", false, function () {\n  return [useAxiosPrivate, useParams];\n});\n\n_c = InvoiceForm;\nexport default InvoiceForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"InvoiceForm\");","map":{"version":3,"sources":["/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/components/Documents/InvoiceForm.jsx"],"names":["React","useState","MDBContainer","MDBRow","MDBCol","MDBInput","MDBBtn","MDBBadge","init","createRechnung","useParams","LZString","useAxiosPrivate","crypto","require","blockchaintx","InvoiceForm","axiosInstance","invoiceFields","setInvoiceFields","invoiceDate","invoiceCurrency","invoiceDescription","invoiceItems","addIngredient","product","amount","unit","price","invoiceItemFields","setInvoiceItemFields","handleInvoiceChange","event","currentInvoiceFields","target","value","name","handleItemChange","index","values","transactionId","handleSubmit","e","preventDefault","Parser","parser","csv","parse","compressedcsv","compress","then","tx","console","log","catch","err","createHash","update","JSON","stringify","digest","transactionIdint","invoice","post","type","description","blockchainID","issue_date","invoice_text","currency","transaction","res","data","invoiceID","id","headers","error","handleAddFields","handleRemoveFields","splice","findIndex","map","inputField","length"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SACEC,YADF,EAEEC,MAFF,EAGEC,MAHF,EAIEC,QAJF,EAKEC,MALF,EAMEC,QANF,QAOO,kBAPP;AAQA,SAASC,IAAT,EAAeC,cAAf,QAAqC,kBAArC;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,OAAiB,UAAjB;AACA,OAAOC,QAAP,MAA2B,WAA3B;AACA,OAAOC,eAAP,MAA4B,6BAA5B;;;AAGA,IAAIC,MAAM,GAAGC,OAAO,CAAE,QAAF,CAApB;;AACA,IAAIC,YAAY,GAAC,EAAjB;;AACA,SAASC,WAAT,GAAuB;AAAA;;AAErB,QAAMC,aAAa,GAAGL,eAAe,EAArC;AAEA,QAAM,CAACM,aAAD,EAAgBC,gBAAhB,IAAoClB,QAAQ,CAAC;AACjDmB,IAAAA,WAAW,EAAE,EADoC;AAEjDC,IAAAA,eAAe,EAAE,EAFgC;AAGjDC,IAAAA,kBAAkB,EAAE,EAH6B;AAIjDC,IAAAA,YAAY,EAAE;AAJmC,GAAD,CAAlD;;AAQA,QAAMC,aAAa,GAAG,MAAM;AAC1BL,IAAAA,gBAAgB,CAAC,EAAC,GAAGD,aAAJ;AAAmBK,MAAAA,YAAY,EAAE,CAChD,GAAGL,aAAa,CAACK,YAD+B,EACjB;AAC7BE,QAAAA,OAAO,EAAC,MADqB;AAE7BC,QAAAA,MAAM,EAAE,CAFqB;AAG7BC,QAAAA,IAAI,EAAE,IAHuB;AAI7BC,QAAAA,KAAK,EAAE;AAJsB,OADiB;AAAjC,KAAD,CAAhB;AAQD,GATD;;AAWA,QAAM,CAACC,iBAAD,EAAoBC,oBAApB,IAA4C7B,QAAQ,CAAC,CACzD;AACE,eAAW,EADb;AAEE,cAAU,EAFZ;AAGE,YAAQ,EAHV;AAIE,aAAS;AAJX,GADyD,CAAD,CAA1D;;AASA,WAAS8B,mBAAT,CAA6BC,KAA7B,EAAoC;AAClC,UAAMC,oBAAoB,GAAG;AAC3Bb,MAAAA,WAAW,EAAEF,aAAa,CAACE,WADA;AAE3BC,MAAAA,eAAe,EAAEH,aAAa,CAACG,eAFJ;AAG3BC,MAAAA,kBAAkB,EAAEJ,aAAa,CAACI;AAHP,KAA7B;AAMA,UAAMY,MAAM,GAAGF,KAAK,CAACE,MAArB;AACA,UAAMC,KAAK,GAAGD,MAAM,CAACC,KAArB;AACA,UAAMC,IAAI,GAAGF,MAAM,CAACE,IAApB;AAEAH,IAAAA,oBAAoB,CAACG,IAAD,CAApB,GAA6BD,KAA7B;AAEAhB,IAAAA,gBAAgB,CAACc,oBAAD,CAAhB;AAEAT,IAAAA,aAAa;AACd;;AAED,WAASa,gBAAT,CAA0BC,KAA1B,EAAiCN,KAAjC,EAAwC;AACtC,UAAMO,MAAM,GAAG,CAAC,GAAGV,iBAAJ,CAAf;AACAU,IAAAA,MAAM,CAACD,KAAD,CAAN,CAAcN,KAAK,CAACE,MAAN,CAAaE,IAA3B,IAAmCJ,KAAK,CAACE,MAAN,CAAaC,KAAhD;AACAL,IAAAA,oBAAoB,CAACS,MAAD,CAApB;AACD;;AACD,QAAM;AAAEC,IAAAA;AAAF,MAAoB9B,SAAS,EAAnC;;AAGA,WAAS+B,YAAT,CAAsBC,CAAtB,EAAyB;AACvBA,IAAAA,CAAC,CAACC,cAAF,GADuB,CAEvB;;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAa9B,OAAO,CAAC,UAAD,CAA1B;;AACA,UAAM+B,MAAM,GAAG,IAAID,MAAJ,CAAWf,iBAAX,CAAf,CAJuB,CAKvB;;AACA,UAAMiB,GAAG,GAAGD,MAAM,CAACE,KAAP,CAAalB,iBAAb,CAAZ,CANuB,CAOvB;;AACA,UAAMmB,aAAa,GAAGrC,QAAQ,CAACsC,QAAT,CAAkBH,GAAlB,CAAtB;AACArC,IAAAA,cAAc,CAAC,YAAD,EAAe,4CAAf,EAA6DS,aAAa,CAACG,eAA3E,EAA4FH,aAAa,CAACE,WAA1G,EAAuH4B,aAAvH,CAAd,CACGE,IADH,CACSC,EAAD,IAAQ;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAY,8BAA8BF,EAA1C;AACApC,MAAAA,YAAY,GAACoC,EAAb;AACD,KAJH,EAKGG,KALH,CAKUC,GAAD,IAAS;AACdH,MAAAA,OAAO,CAACC,GAAR,CAAY,iCAAgC,IAAhC,GAAuCE,GAAvC,GAA4C1C,MAAM,CAAC2C,UAAP,CAAkB,QAAlB,EAA4BC,MAA5B,CAAmCC,IAAI,CAACC,SAAL,CAAe9B,iBAAf,CAAnC,EAAsE+B,MAAtE,CAA6E,KAA7E,CAAxD;AACD,KAPH,EATuB,CAiBvB;;AACA,QAAIC,gBAAgB,GAAG,CAAvB,CAlBuB,CAkBC;;AACxB,UAAMC,OAAO,GAAG,EAAhB;AAIAV,IAAAA,OAAO,CAACC,GAAR,CAAYxB,iBAAZ,EAvBuB,CAwBvB;;AACAZ,IAAAA,aAAa,CACV8C,IADH,CACQ,WADR,EACqB;AACjBC,MAAAA,IAAI,EAAC,UADY;AAEjBC,MAAAA,WAAW,EAAC/C,aAAa,CAACI,kBAFT;AAGjB4C,MAAAA,YAAY,EAAEnD,YAHG;AAIjBoD,MAAAA,UAAU,EAACjD,aAAa,CAACE,WAJR;AAKjBgD,MAAAA,YAAY,EAAClD,aAAa,CAACI,kBALV;AAMjB+C,MAAAA,QAAQ,EAACnD,aAAa,CAACG,eANN;AAOjBiD,MAAAA,WAAW,EAACT;AAPK,KADrB,EAUGX,IAVH,CAUSqB,GAAD,IAAS;AACbnB,MAAAA,OAAO,CAACC,GAAR,CAAYkB,GAAG,CAACC,IAAhB;AACA,UAAIC,SAAS,GAAGF,GAAG,CAACC,IAAJ,CAASE,EAAzB;AACAtB,MAAAA,OAAO,CAACC,GAAR,CAAYoB,SAAZ;AACA,UAAIlD,YAAY,GAAGmC,IAAI,CAACC,SAAL,CAAe9B,iBAAf,CAAnB;AACAuB,MAAAA,OAAO,CAACC,GAAR,CAAY9B,YAAZ;AACAN,MAAAA,aAAa,CACZ8C,IADD,CACM,gBADN,EAEExC,YAFF,EAEe;AACboD,QAAAA,OAAO,EAAE;AACT;AACA,0BAAgB;AAFP;AADI,OAFf,EAOCzB,IAPD,CAOOqB,GAAD,IAAS;AACbnB,QAAAA,OAAO,CAACC,GAAR,CAAYkB,GAAG,CAACC,IAAhB;AAED,OAVD,EAWClB,KAXD,CAWOsB,KAAK,IAAI;AACZxB,QAAAA,OAAO,CAACwB,KAAR,CAAc,qBAAd,EAAqCA,KAArC;AACH,OAbD;AAcD,KA9BH,EA+BGtB,KA/BH,CA+BSsB,KAAK,IAAI;AACZxB,MAAAA,OAAO,CAACwB,KAAR,CAAc,qBAAd,EAAqCA,KAArC;AACH,KAjCH;AAkCD;;AAED,WAASC,eAAT,GAA2B;AACzB/C,IAAAA,oBAAoB,CAAC,CACnB,GAAGD,iBADgB,EAEnB;AACE,iBAAW,EADb;AAEE,gBAAU,EAFZ;AAGE,cAAQ,EAHV;AAIE,eAAS;AAJX,KAFmB,CAAD,CAApB;AASD;;AAED,WAASiD,kBAAT,CAA4BxC,KAA5B,EAAmC;AACjC,UAAMC,MAAM,GAAG,CAAC,GAAGV,iBAAJ,CAAf,CADiC,CAEjC;;AACAU,IAAAA,MAAM,CAACwC,MAAP,CACExC,MAAM,CAACyC,SAAP,CAAkB7C,KAAD,IAAWA,KAAK,CAACG,KAAN,KAAgBA,KAA5C,CADF,EAEE,CAFF;AAIAR,IAAAA,oBAAoB,CAACS,MAAD,CAApB;AACD;;AAED,sBACE,QAAC,YAAD;AAAA,4BACE,QAAC,MAAD;AAAA,8BACE,QAAC,MAAD;AAAA,+BACE,QAAC,QAAD;AACE,UAAA,SAAS,EAAC,MADZ;AAEE,UAAA,IAAI,EAAC,aAFP;AAGE,UAAA,EAAE,EAAC,aAHL;AAIE,UAAA,KAAK,EAAC,gBAJR;AAKE,UAAA,IAAI,EAAC,MALP;AAME,UAAA,QAAQ,EAAGP,KAAD,IAAWD,mBAAmB,CAACC,KAAD;AAN1C;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADF,eAWE,QAAC,MAAD;AAAA,+BACE,QAAC,QAAD;AACE,UAAA,SAAS,EAAC,MADZ;AAEE,UAAA,IAAI,EAAC,iBAFP;AAGE,UAAA,EAAE,EAAC,iBAHL;AAIE,UAAA,KAAK,EAAC,YAJR;AAKE,UAAA,IAAI,EAAC,MALP;AAME,UAAA,QAAQ,EAAGA,KAAD,IAAWD,mBAAmB,CAACC,KAAD;AAN1C;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAXF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAuBE,QAAC,QAAD;AACE,MAAA,YAAY,EAAC,MADf;AAEE,MAAA,QAAQ,MAFV;AAGE,MAAA,IAAI,EAAC,oBAHP;AAIE,MAAA,EAAE,EAAC,oBAJL;AAKE,MAAA,IAAI,EAAE,CALR;AAME,MAAA,KAAK,EAAC,yBANR;AAOE,MAAA,QAAQ,EAAGA,KAAD,IAAWD,mBAAmB,CAACC,KAAD;AAP1C;AAAA;AAAA;AAAA;AAAA,YAvBF,eAgCE;AAAA;AAAA;AAAA;AAAA,YAhCF,eAkCE;AAAM,MAAA,QAAQ,EAAES,YAAhB;AAAA,iBACGZ,iBAAiB,CAACoD,GAAlB,CAAsB,CAACC,UAAD,EAAa5C,KAAb,kBACrB;AAAA,gCACE;AAAA,yCAAqBA,KAAK,GAAG,CAA7B;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE,QAAC,QAAD;AACE,UAAA,SAAS,EAAC,MADZ;AAEE,UAAA,IAAI,EAAC,SAFP;AAGE,UAAA,KAAK,EAAC,aAHR;AAIE,UAAA,IAAI,EAAC,MAJP;AAKE,UAAA,KAAK,EAAE4C,UAAU,CAACzD,OALpB;AAME,UAAA,QAAQ,EAAGO,KAAD,IAAWK,gBAAgB,CAACC,KAAD,EAAQN,KAAR;AANvC;AAAA;AAAA;AAAA;AAAA,gBAFF,eAUE,QAAC,MAAD;AAAA,kCACE,QAAC,MAAD;AAAA,mCACE,QAAC,QAAD;AACE,cAAA,SAAS,EAAC,MADZ;AAEE,cAAA,IAAI,EAAC,QAFP;AAGE,cAAA,KAAK,EAAC,QAHR;AAIE,cAAA,IAAI,EAAC,QAJP;AAKE,cAAA,KAAK,EAAEkD,UAAU,CAACxD,MALpB;AAME,cAAA,QAAQ,EAAGM,KAAD,IAAWK,gBAAgB,CAACC,KAAD,EAAQN,KAAR;AANvC;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,kBADF,eAWE,QAAC,MAAD;AAAA,mCACE,QAAC,QAAD;AACE,cAAA,SAAS,EAAC,MADZ;AAEE,cAAA,IAAI,EAAC,MAFP;AAGE,cAAA,KAAK,EAAC,SAHR;AAIE,cAAA,IAAI,EAAC,MAJP;AAKE,cAAA,KAAK,EAAEkD,UAAU,CAACvD,IALpB;AAME,cAAA,QAAQ,EAAGK,KAAD,IAAWK,gBAAgB,CAACC,KAAD,EAAQN,KAAR;AANvC;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,kBAXF,eAqBE,QAAC,MAAD;AAAA,mCACE,QAAC,QAAD;AACE,cAAA,SAAS,EAAC,MADZ;AAEE,cAAA,IAAI,EAAC,OAFP;AAGE,cAAA,KAAK,EAAC,kBAHR;AAIE,cAAA,IAAI,EAAC,QAJP;AAKE,cAAA,KAAK,EAAEkD,UAAU,CAACtD,KALpB;AAME,cAAA,QAAQ,EAAGI,KAAD,IAAWK,gBAAgB,CAACC,KAAD,EAAQN,KAAR;AANvC;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,kBArBF,eA+BE,QAAC,MAAD;AAAA,mCACE,QAAC,QAAD;AAAU,cAAA,SAAS,EAAC,qBAApB;AAA0C,cAAA,KAAK,EAAC,SAAhD;AAAA,qCACW,GADX,EAEGkD,UAAU,CAACxD,MAAX,GAAoBwD,UAAU,CAACtD,KAFlC,EAEyC,GAFzC,EAGGV,aAAa,CAACG,eAHjB;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,kBA/BF;AAAA;AAAA;AAAA;AAAA;AAAA,gBAVF;AAAA,SAAUiB,KAAV;AAAA;AAAA;AAAA;AAAA,cADD,CADH,eAqDE;AAAA;AAAA;AAAA;AAAA,cArDF,eAuDE,QAAC,MAAD;AAAQ,QAAA,SAAS,EAAC,WAAlB;AAA8B,QAAA,KAAK,EAAC,SAApC;AAA8C,QAAA,OAAO,EAAEuC,eAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAvDF,EA0DGhD,iBAAiB,CAACsD,MAAlB,GAA2B,CAA3B,iBACC,QAAC,MAAD;AACE,QAAA,SAAS,EAAC,WADZ;AAEE,QAAA,KAAK,EAAC,QAFR;AAGE,QAAA,OAAO,EAAEL,kBAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cA3DJ,eAoEE,QAAC,MAAD;AAAQ,QAAA,SAAS,EAAC,WAAlB;AAA8B,QAAA,KAAK,EAAC,SAApC;AAA8C,QAAA,OAAO,EAAErC,YAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cApEF;AAAA;AAAA;AAAA;AAAA;AAAA,YAlCF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA6GD;;GA1PQzB,W;UAEeJ,e,EAqDIF,S;;;KAvDnBM,W;AA4PT,eAAeA,WAAf","sourcesContent":["import React, { useState } from \"react\";\nimport {\n  MDBContainer,\n  MDBRow,\n  MDBCol,\n  MDBInput,\n  MDBBtn,\n  MDBBadge,\n} from \"mdb-react-ui-kit\";\nimport { init, createRechnung } from \"../../Web3Client\";\nimport { useParams } from \"react-router-dom\";\nimport {  } from 'json2csv'\nimport LZString, {  } from 'lz-string'\nimport useAxiosPrivate from \"../../hooks/useAxiosPrivate\";\n\n\nvar crypto = require ('crypto');\nvar blockchaintx=\"\";\nfunction InvoiceForm() {\n\n  const axiosInstance = useAxiosPrivate();\n\n  const [invoiceFields, setInvoiceFields] = useState({\n    invoiceDate: \"\",\n    invoiceCurrency: \"\",\n    invoiceDescription: \"\",\n    invoiceItems: [      \n    ],\n  });\n\n  const addIngredient = () => {\n    setInvoiceFields({...invoiceFields, invoiceItems: [\n      ...invoiceFields.invoiceItems, {\n        product:\"Bier\",\n        amount: 3,\n        unit: \"kg\",\n        price: \"4545\",\n      }\n    ]})\n  }\n\n  const [invoiceItemFields, setInvoiceItemFields] = useState([\n    {\n      \"product\": \"\",\n      \"amount\": \"\",\n      \"unit\": \"\",\n      \"price\": \"\",\n    },\n  ]);\n\n  function handleInvoiceChange(event) {\n    const currentInvoiceFields = {\n      invoiceDate: invoiceFields.invoiceDate,\n      invoiceCurrency: invoiceFields.invoiceCurrency,\n      invoiceDescription: invoiceFields.invoiceDescription,\n    };\n\n    const target = event.target;\n    const value = target.value;\n    const name = target.name;\n\n    currentInvoiceFields[name] = value;\n\n    setInvoiceFields(currentInvoiceFields);\n\n    addIngredient\n  }\n\n  function handleItemChange(index, event) {\n    const values = [...invoiceItemFields];\n    values[index][event.target.name] = event.target.value;\n    setInvoiceItemFields(values);\n  }\n  const { transactionId } = useParams();\n\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    //Blockchain Transaktion\n    const { Parser } = require('json2csv');\n    const parser = new Parser(invoiceItemFields);\n    //convert to csv to save  Gas\n    const csv = parser.parse(invoiceItemFields);\n    //compress invoiceItemFields-CSV-String to save Gas\n    const compressedcsv = LZString.compress(csv);\n    createRechnung(\"2 Mark 50!\", \"0xbd4f99F9133149b9e29E0E2d9733aeBb41e1cB9f\", invoiceFields.invoiceCurrency, invoiceFields.invoiceDate, compressedcsv)\n      .then((tx) => {\n        console.log(\"Transaktion erfolgreich: \" + tx);\n        blockchaintx=tx;\n      })\n      .catch((err) => {\n        console.log(\"Transaktion fehlgeschlagen: \"+ \"  \" + err +crypto.createHash('sha256').update(JSON.stringify(invoiceItemFields)).digest('hex'));\n      });\n    //Id of transaction to add to right transaction \n    var transactionIdint = 2//parseInt(transactionId)\n    const invoice = {\n\n    }\n\n    console.log(invoiceItemFields)\n    //Ãœbermittel und anlegen der Rechnung\n    axiosInstance\n      .post('/invoice/', {\n        type:\"Rechnung\",\n        description:invoiceFields.invoiceDescription,\n        blockchainID: blockchaintx,\n        issue_date:invoiceFields.invoiceDate,\n        invoice_text:invoiceFields.invoiceDescription,\n        currency:invoiceFields.invoiceCurrency,\n        transaction:transactionIdint,\n      })\n      .then((res) => {\n        console.log(res.data)\n        let invoiceID = res.data.id\n        console.log(invoiceID)\n        let invoiceItems = JSON.stringify(invoiceItemFields)\n        console.log(invoiceItems)\n        axiosInstance\n        .post('/invoiceItems/',\n          invoiceItems,{          \n          headers: {\n          // Overwrite Axios's automatically set Content-Type\n          'Content-Type': 'application/json'\n        }})\n        .then((res) => {\n          console.log(res.data)\n            \n        })\n        .catch(error => {\n            console.error('There was an error!', error);\n        });\n      })\n      .catch(error => {\n          console.error('There was an error!', error);\n      });\n  }\n\n  function handleAddFields() {\n    setInvoiceItemFields([\n      ...invoiceItemFields,\n      {\n        \"product\": \"\",\n        \"amount\": \"\",\n        \"unit\": \"\",\n        \"price\": \"\",\n      },\n    ]);\n  }\n\n  function handleRemoveFields(index) {\n    const values = [...invoiceItemFields];\n    // values.splice(index, 1);\n    values.splice(\n      values.findIndex((value) => value.index === index),\n      1\n    );\n    setInvoiceItemFields(values);\n  }\n\n  return (\n    <MDBContainer>\n      <MDBRow>\n        <MDBCol>\n          <MDBInput\n            className=\"mb-4\"\n            name=\"invoiceDate\"\n            id=\"invoiceDate\"\n            label=\"Rechnungsdatum\"\n            type=\"date\"\n            onChange={(event) => handleInvoiceChange(event)}\n          />\n        </MDBCol>\n        <MDBCol>\n          <MDBInput\n            className=\"mb-4\"\n            name=\"invoiceCurrency\"\n            id=\"invoiceCurrency\"\n            label=\"WÃ¤hrung\"\n            type=\"text\"\n            onChange={(event) => handleInvoiceChange(event)}\n          />\n        </MDBCol>\n      </MDBRow>\n      <MDBInput\n        wrapperClass=\"mb-4\"\n        textarea\n        name=\"invoiceDescription\"\n        id=\"invoiceDescription\"\n        rows={3}\n        label=\"Beschreibung (optional)\"\n        onChange={(event) => handleInvoiceChange(event)}\n      />\n      <hr />\n\n      <form onSubmit={handleSubmit}>\n        {invoiceItemFields.map((inputField, index) => (\n          <div key={index}>\n            <h6>Rechnungsposten {index + 1}</h6>\n            <MDBInput\n              className=\"mb-4\"\n              name=\"product\"\n              label=\"Produktname\"\n              type=\"text\"\n              value={inputField.product}\n              onChange={(event) => handleItemChange(index, event)}\n            />\n            <MDBRow>\n              <MDBCol>\n                <MDBInput\n                  className=\"mb-4\"\n                  name=\"amount\"\n                  label=\"Anzahl\"\n                  type=\"number\"\n                  value={inputField.amount}\n                  onChange={(event) => handleItemChange(index, event)}\n                />\n              </MDBCol>\n              <MDBCol>\n                <MDBInput\n                  className=\"mb-4\"\n                  name=\"unit\"\n                  label=\"Einheit\"\n                  type=\"text\"\n                  value={inputField.unit}\n                  onChange={(event) => handleItemChange(index, event)}\n                />\n              </MDBCol>\n              <MDBCol>\n                <MDBInput\n                  className=\"mb-4\"\n                  name=\"price\"\n                  label=\"Preis pro Enheit\"\n                  type=\"number\"\n                  value={inputField.price}\n                  onChange={(event) => handleItemChange(index, event)}\n                />\n              </MDBCol>\n              <MDBCol>\n                <MDBBadge className=\"mt-2 me-4 float-end\" color=\"primary\">\n                  Betrag :{\" \"}\n                  {inputField.amount * inputField.price}{\" \"}\n                  {invoiceFields.invoiceCurrency}\n                </MDBBadge>\n              </MDBCol>\n            </MDBRow>\n          </div>\n        ))}\n        <br />\n\n        <MDBBtn className=\"me-3 mb-3\" color=\"success\" onClick={handleAddFields}>\n          Rechnungsposten hinzufÃ¼gen\n        </MDBBtn>\n        {invoiceItemFields.length > 1 && (\n          <MDBBtn\n            className=\"me-3 mb-3\"\n            color=\"danger\"\n            onClick={handleRemoveFields}\n          >\n            Rechnungsposten entfernen\n          </MDBBtn>\n        )}\n\n        <MDBBtn className=\"float-end\" color=\"primary\" onClick={handleSubmit}>\n          Abschicken\n        </MDBBtn>\n      </form>\n    </MDBContainer>\n  );\n}\n\nexport default InvoiceForm;"]},"metadata":{},"sourceType":"module"}