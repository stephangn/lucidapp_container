{"ast":null,"code":"var _jsxFileName = \"/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/components/Documents/DocumentCard.jsx\",\n    _s = $RefreshSig$();\n\nimport { React, useState, useEffect } from \"react\";\nimport { MDBCard, MDBCardBody, MDBCardTitle, MDBCardText, MDBCardHeader, MDBCardFooter, MDBBtn, MDBRow, MDBCol, MDBIcon } from \"mdb-react-ui-kit\";\nimport useAxiosPrivate from \"../../hooks/useAxiosPrivate\";\nimport CardModal from \"./CardModal\"; //Hook f체r Contextabruf\n\nimport useAuth from \"../../hooks/useAuth\";\nimport { Link } from \"react-router-dom\";\nimport { getDokumentenHash } from \"../../Web3Client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction DocumentCard(props) {\n  _s();\n\n  const axiosInstance = useAxiosPrivate(); //Context mit Nutzerdaten abrufen\n\n  const {\n    auth\n  } = useAuth();\n  const [datei, setDatei] = useState([]);\n  const [fileLink, setFileLink] = useState(\"\");\n  const [ShowConfirmation, setShowConfirmation] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isVerified, setIsVerified] = useState(\"ausstehend\");\n  const author_company = props.author_company;\n  useEffect(() => {\n    //Abruf des Link zur Datei\n    //console.log(auth.pubkey);\n    if (props.file != null) axiosInstance.get(\"file/\" + props.file).then(res => {\n      setDatei(res.data);\n      setFileLink(res.data.file);\n      /*     console.log(author_company + auth.company)\n      console.log(props.confirmed) */\n\n      setIsLoading(true); // if (props.confirmed == true) {\n      //   setShowConfirmation(false);\n      //   console.log(\"bereits best채tigt, confirm auf True\");\n      // } else if (author_company == auth.company) {\n      //   //console.log(\"Firmen sind ungleich- Confirm auf False\")\n      // } else {\n      //   setShowConfirmation(true);\n      //   //console.log(\"Confirm auf True\")\n      // }\n    }, []);\n  }, [ShowConfirmation]); //Debugging Session\n\n  /*   useEffect(() => {\n    console.log(props.blockchain_rid);\n   }, [props.blockchain_rid]); */\n\n  useEffect(() => {\n    console.log(fileLink);\n  }, [fileLink]);\n\n  async function getFileFromUrl(url) {\n    let defaultType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"image/jpeg\";\n    const response = await fetch(url);\n    const data = await response.blob();\n    var name = name;\n    return new File([data], name, {\n      type: data.type || defaultType\n    });\n  }\n\n  async function verifyDocument(id) {\n    const file = await getFileFromUrl(fileLink);\n    proofFilehash(id, file, function (hashwert) {\n      getDokumentenHash(props.blockchain_did) //Blockchain Transaktion\n      .then(tx => {\n        if (hashwert == tx) {\n          setIsVerified(\"Hash korrekt\");\n          return true;\n        } else {\n          setIsVerified(\"Hash inkorrekt\");\n          return false;\n        }\n      }).catch(err => {\n        console.log(\"Fehlgeschlagen. Fehlermeldung: \" + err);\n      });\n    });\n  }\n\n  async function proofFilehash(_DokumentID, _file, callback) {\n    //Download der Datei\n    var crypto = require(\"crypto\");\n\n    var hashwert = \"\";\n    const fileReader = new FileReader();\n    fileReader.readAsText(_file);\n\n    fileReader.onload = function (e) {\n      hashwert = crypto.createHash(\"sha512\").update(e.target.result).digest(\"hex\");\n      callback(hashwert);\n    };\n  } // State f체r \"Dokument anzeigen\" Modal\n\n\n  const [showDocumentModal, setShowDocumentModal] = useState(false); // Funktion f체r Manipulation von Modal (als props weitergereicht)\n\n  function toggleShowDocumentModal() {\n    setShowDocumentModal(!showDocumentModal);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(MDBCard, {\n      className: \"h-100\",\n      style: {\n        minHeight: \"250px\",\n        width: \"510px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(MDBCardBody, {\n        children: /*#__PURE__*/_jsxDEV(MDBRow, {\n          children: [/*#__PURE__*/_jsxDEV(MDBCol, {\n            sm: \"2\",\n            className: \"d-flex justify-content-center\",\n            children: props.type == \"Rechnung\" ? /*#__PURE__*/_jsxDEV(MDBIcon, {\n              className: \"mt-2\",\n              fas: true,\n              size: \"4x\",\n              icon: \"file-invoice-dollar\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 125,\n              columnNumber: 17\n            }, this) : /*#__PURE__*/_jsxDEV(MDBIcon, {\n              className: \"mt-2\",\n              fas: true,\n              size: \"4x\",\n              icon: \"file-alt\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 132,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(MDBCol, {\n            sm: \"8\",\n            children: [/*#__PURE__*/_jsxDEV(MDBCardTitle, {\n              children: props.type + \" \" + \"(\" + props.documentDate + \")\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 136,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(MDBCardText, {\n              className: \"mt-2 me-5\",\n              children: [/*#__PURE__*/_jsxDEV(\"b\", {\n                children: \"Beschreibung: \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 141,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 142,\n                columnNumber: 17\n              }, this), props.description == \"\" ? /*#__PURE__*/_jsxDEV(\"i\", {\n                children: \"Es liegt keine Beschreibung vor.\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 144,\n                columnNumber: 19\n              }, this) : props.description, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 148,\n                columnNumber: 17\n              }, this), props !== null && props !== void 0 && props.isZoll || props.description == \"Zollbescheid\" ? /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: [/*#__PURE__*/_jsxDEV(\"b\", {\n                  children: \"Verifikation: \"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 151,\n                  columnNumber: 21\n                }, this), isVerified]\n              }, void 0, true) : null]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 140,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(MDBCol, {\n            sm: \"2\",\n            children: [/*#__PURE__*/_jsxDEV(Link, {\n              style: {\n                display: \"block\",\n                margin: \"1rem 0\"\n              },\n              to: \"document/\" + props.id.toString(),\n              params: {\n                title: \"Hello\"\n              },\n              children: /*#__PURE__*/_jsxDEV(MDBBtn, {\n                className: \"float-end\",\n                outline: true,\n                onClick: toggleShowDocumentModal,\n                children: \"Anzeigen\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 164,\n                columnNumber: 17\n              }, this)\n            }, props.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 158,\n              columnNumber: 15\n            }, this), props !== null && props !== void 0 && props.isZoll || props.description == \"Zollbescheid\" ? /*#__PURE__*/_jsxDEV(MDBBtn, {\n              className: \"float-end mt-3\",\n              outline: true,\n              onClick: verifyDocument,\n              children: \"Verifizieren\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 173,\n              columnNumber: 17\n            }, this) : null]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MDBCardFooter, {\n        className: \"text-muted\",\n        children: [\"Hochgeladen am: \", props.uploadDate, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 11\n        }, this), \"von \", props.author_company, \" (\", props.author, \")\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CardModal, {\n      basicModal: showDocumentModal,\n      setBasicModal: setShowDocumentModal,\n      toggleShow: toggleShowDocumentModal,\n      title: props.title,\n      description: props.description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(DocumentCard, \"cdgCrtO0HnJhxiSGKVhAajtP5xk=\", false, function () {\n  return [useAxiosPrivate, useAuth];\n});\n\n_c = DocumentCard;\nexport default DocumentCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"DocumentCard\");","map":{"version":3,"sources":["/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/components/Documents/DocumentCard.jsx"],"names":["React","useState","useEffect","MDBCard","MDBCardBody","MDBCardTitle","MDBCardText","MDBCardHeader","MDBCardFooter","MDBBtn","MDBRow","MDBCol","MDBIcon","useAxiosPrivate","CardModal","useAuth","Link","getDokumentenHash","DocumentCard","props","axiosInstance","auth","datei","setDatei","fileLink","setFileLink","ShowConfirmation","setShowConfirmation","isLoading","setIsLoading","isVerified","setIsVerified","author_company","file","get","then","res","data","console","log","getFileFromUrl","url","defaultType","response","fetch","blob","name","File","type","verifyDocument","id","proofFilehash","hashwert","blockchain_did","tx","catch","err","_DokumentID","_file","callback","crypto","require","fileReader","FileReader","readAsText","onload","e","createHash","update","target","result","digest","showDocumentModal","setShowDocumentModal","toggleShowDocumentModal","minHeight","width","documentDate","description","isZoll","display","margin","toString","title","uploadDate","author"],"mappings":";;;AAAA,SAASA,KAAT,EAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SACEC,OADF,EAEEC,WAFF,EAGEC,YAHF,EAIEC,WAJF,EAKEC,aALF,EAMEC,aANF,EAOEC,MAPF,EAQEC,MARF,EASEC,MATF,EAUEC,OAVF,QAWO,kBAXP;AAYA,OAAOC,eAAP,MAA4B,6BAA5B;AACA,OAAOC,SAAP,MAAsB,aAAtB,C,CACA;;AACA,OAAOC,OAAP,MAAoB,qBAApB;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,SAASC,iBAAT,QAAkC,kBAAlC;;;;AAEA,SAASC,YAAT,CAAsBC,KAAtB,EAA6B;AAAA;;AAC3B,QAAMC,aAAa,GAAGP,eAAe,EAArC,CAD2B,CAE3B;;AACA,QAAM;AAAEQ,IAAAA;AAAF,MAAWN,OAAO,EAAxB;AACA,QAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBtB,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACuB,QAAD,EAAWC,WAAX,IAA0BxB,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACyB,gBAAD,EAAmBC,mBAAnB,IAA0C1B,QAAQ,CAAC,KAAD,CAAxD;AACA,QAAM,CAAC2B,SAAD,EAAYC,YAAZ,IAA4B5B,QAAQ,CAAC,IAAD,CAA1C;AAEA,QAAM,CAAC6B,UAAD,EAAaC,aAAb,IAA8B9B,QAAQ,CAAC,YAAD,CAA5C;AAEA,QAAM+B,cAAc,GAAGb,KAAK,CAACa,cAA7B;AAEA9B,EAAAA,SAAS,CAAC,MAAM;AACd;AACA;AAEA,QAAIiB,KAAK,CAACc,IAAN,IAAc,IAAlB,EACEb,aAAa,CAACc,GAAd,CAAkB,UAAUf,KAAK,CAACc,IAAlC,EAAwCE,IAAxC,CAA8CC,GAAD,IAAS;AACpDb,MAAAA,QAAQ,CAACa,GAAG,CAACC,IAAL,CAAR;AACAZ,MAAAA,WAAW,CAACW,GAAG,CAACC,IAAJ,CAASJ,IAAV,CAAX;AACA;AACR;;AACQJ,MAAAA,YAAY,CAAC,IAAD,CAAZ,CALoD,CAMpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,KAfD,EAeG,EAfH;AAgBH,GArBQ,EAqBN,CAACH,gBAAD,CArBM,CAAT,CAb2B,CAoC3B;;AACA;AACF;AACA;;AAGExB,EAAAA,SAAS,CAAC,MAAM;AACdoC,IAAAA,OAAO,CAACC,GAAR,CAAYf,QAAZ;AACD,GAFQ,EAEN,CAACA,QAAD,CAFM,CAAT;;AAIA,iBAAegB,cAAf,CAA8BC,GAA9B,EAA+D;AAAA,QAA5BC,WAA4B,uEAAd,YAAc;AAC7D,UAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACH,GAAD,CAA5B;AACA,UAAMJ,IAAI,GAAG,MAAMM,QAAQ,CAACE,IAAT,EAAnB;AACA,QAAIC,IAAI,GAAGA,IAAX;AACA,WAAO,IAAIC,IAAJ,CAAS,CAACV,IAAD,CAAT,EAAiBS,IAAjB,EAAuB;AAC5BE,MAAAA,IAAI,EAAEX,IAAI,CAACW,IAAL,IAAaN;AADS,KAAvB,CAAP;AAGD;;AAED,iBAAeO,cAAf,CAA8BC,EAA9B,EAAkC;AAChC,UAAMjB,IAAI,GAAG,MAAMO,cAAc,CAAChB,QAAD,CAAjC;AACA2B,IAAAA,aAAa,CAACD,EAAD,EAAKjB,IAAL,EAAW,UAAUmB,QAAV,EAAoB;AAC1CnC,MAAAA,iBAAiB,CAACE,KAAK,CAACkC,cAAP,CAAjB,CAAuC;AAAvC,OACGlB,IADH,CACSmB,EAAD,IAAQ;AACZ,YAAIF,QAAQ,IAAIE,EAAhB,EAAoB;AAClBvB,UAAAA,aAAa,CAAC,cAAD,CAAb;AACA,iBAAO,IAAP;AACD,SAHD,MAGO;AACLA,UAAAA,aAAa,CAAC,gBAAD,CAAb;AACA,iBAAO,KAAP;AACD;AACF,OATH,EAUGwB,KAVH,CAUUC,GAAD,IAAS;AACdlB,QAAAA,OAAO,CAACC,GAAR,CAAY,oCAAoCiB,GAAhD;AACD,OAZH;AAaD,KAdY,CAAb;AAeD;;AAGD,iBAAeL,aAAf,CAA6BM,WAA7B,EAA0CC,KAA1C,EAAiDC,QAAjD,EAA2D;AACzD;AACA,QAAIC,MAAM,GAAGC,OAAO,CAAC,QAAD,CAApB;;AACA,QAAIT,QAAQ,GAAG,EAAf;AACA,UAAMU,UAAU,GAAG,IAAIC,UAAJ,EAAnB;AACAD,IAAAA,UAAU,CAACE,UAAX,CAAsBN,KAAtB;;AACAI,IAAAA,UAAU,CAACG,MAAX,GAAoB,UAAUC,CAAV,EAAa;AAC/Bd,MAAAA,QAAQ,GAAGQ,MAAM,CACdO,UADQ,CACG,QADH,EAERC,MAFQ,CAEDF,CAAC,CAACG,MAAF,CAASC,MAFR,EAGRC,MAHQ,CAGD,KAHC,CAAX;AAIAZ,MAAAA,QAAQ,CAACP,QAAD,CAAR;AACD,KAND;AAOD,GAxF0B,CA0F3B;;;AACA,QAAM,CAACoB,iBAAD,EAAoBC,oBAApB,IAA4CxE,QAAQ,CAAC,KAAD,CAA1D,CA3F2B,CA4F3B;;AACA,WAASyE,uBAAT,GAAmC;AACjCD,IAAAA,oBAAoB,CAAC,CAACD,iBAAF,CAApB;AACD;;AAED,sBACE;AAAA,4BACE,QAAC,OAAD;AAAS,MAAA,SAAS,EAAC,OAAnB;AAA2B,MAAA,KAAK,EAAE;AAAEG,QAAAA,SAAS,EAAE,OAAb;AAAsBC,QAAAA,KAAK,EAAE;AAA7B,OAAlC;AAAA,8BACE,QAAC,WAAD;AAAA,+BACE,QAAC,MAAD;AAAA,kCACE,QAAC,MAAD;AAAQ,YAAA,EAAE,EAAC,GAAX;AAAe,YAAA,SAAS,EAAC,+BAAzB;AAAA,sBACGzD,KAAK,CAAC6B,IAAN,IAAc,UAAd,gBACC,QAAC,OAAD;AACE,cAAA,SAAS,EAAC,MADZ;AAEE,cAAA,GAAG,MAFL;AAGE,cAAA,IAAI,EAAC,IAHP;AAIE,cAAA,IAAI,EAAC;AAJP;AAAA;AAAA;AAAA;AAAA,oBADD,gBAQC,QAAC,OAAD;AAAS,cAAA,SAAS,EAAC,MAAnB;AAA0B,cAAA,GAAG,MAA7B;AAA8B,cAAA,IAAI,EAAC,IAAnC;AAAwC,cAAA,IAAI,EAAC;AAA7C;AAAA;AAAA;AAAA;AAAA;AATJ;AAAA;AAAA;AAAA;AAAA,kBADF,eAaE,QAAC,MAAD;AAAQ,YAAA,EAAE,EAAC,GAAX;AAAA,oCACE,QAAC,YAAD;AAAA,wBACG7B,KAAK,CAAC6B,IAAN,GAAa,GAAb,GAAmB,GAAnB,GAAyB7B,KAAK,CAAC0D,YAA/B,GAA8C;AADjD;AAAA;AAAA;AAAA;AAAA,oBADF,eAKE,QAAC,WAAD;AAAa,cAAA,SAAS,EAAC,WAAvB;AAAA,sCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,eAEE;AAAA;AAAA;AAAA;AAAA,sBAFF,EAGG1D,KAAK,CAAC2D,WAAN,IAAqB,EAArB,gBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADD,GAGC3D,KAAK,CAAC2D,WANV,eAQE;AAAA;AAAA;AAAA;AAAA,sBARF,EASG3D,KAAK,SAAL,IAAAA,KAAK,WAAL,IAAAA,KAAK,CAAE4D,MAAP,IAAiB5D,KAAK,CAAC2D,WAAN,IAAqB,cAAtC,gBACC;AAAA,wCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADF,EAEGhD,UAFH;AAAA,8BADD,GAKG,IAdN;AAAA;AAAA;AAAA;AAAA;AAAA,oBALF;AAAA;AAAA;AAAA;AAAA;AAAA,kBAbF,eAmCE,QAAC,MAAD;AAAQ,YAAA,EAAE,EAAC,GAAX;AAAA,oCACE,QAAC,IAAD;AACE,cAAA,KAAK,EAAE;AAAEkD,gBAAAA,OAAO,EAAE,OAAX;AAAoBC,gBAAAA,MAAM,EAAE;AAA5B,eADT;AAEE,cAAA,EAAE,EAAE,cAAc9D,KAAK,CAAC+B,EAAN,CAASgC,QAAT,EAFpB;AAIE,cAAA,MAAM,EAAE;AAAEC,gBAAAA,KAAK,EAAE;AAAT,eAJV;AAAA,qCAME,QAAC,MAAD;AACE,gBAAA,SAAS,EAAC,WADZ;AAEE,gBAAA,OAAO,MAFT;AAGE,gBAAA,OAAO,EAAET,uBAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AANF,eAGOvD,KAAK,CAAC+B,EAHb;AAAA;AAAA;AAAA;AAAA,oBADF,EAeG/B,KAAK,SAAL,IAAAA,KAAK,WAAL,IAAAA,KAAK,CAAE4D,MAAP,IAAiB5D,KAAK,CAAC2D,WAAN,IAAqB,cAAtC,gBACC,QAAC,MAAD;AACE,cAAA,SAAS,EAAC,gBADZ;AAEE,cAAA,OAAO,MAFT;AAGE,cAAA,OAAO,EAAE7B,cAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADD,GAQG,IAvBN;AAAA;AAAA;AAAA;AAAA;AAAA,kBAnCF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADF,eAgFE,QAAC,aAAD;AAAe,QAAA,SAAS,EAAC,YAAzB;AAAA,uCACmB9B,KAAK,CAACiE,UADzB,eAEE;AAAA;AAAA;AAAA;AAAA,gBAFF,UAGOjE,KAAK,CAACa,cAHb,QAG+Bb,KAAK,CAACkE,MAHrC;AAAA;AAAA;AAAA;AAAA;AAAA,cAhFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAuFE,QAAC,SAAD;AACE,MAAA,UAAU,EAAEb,iBADd;AAEE,MAAA,aAAa,EAAEC,oBAFjB;AAGE,MAAA,UAAU,EAAEC,uBAHd;AAIE,MAAA,KAAK,EAAEvD,KAAK,CAACgE,KAJf;AAKE,MAAA,WAAW,EAAEhE,KAAK,CAAC2D;AALrB;AAAA;AAAA;AAAA;AAAA,YAvFF;AAAA,kBADF;AAiGD;;GAlMQ5D,Y;UACeL,e,EAELE,O;;;KAHVG,Y;AAoMT,eAAeA,YAAf","sourcesContent":["import { React, useState, useEffect } from \"react\";\nimport {\n  MDBCard,\n  MDBCardBody,\n  MDBCardTitle,\n  MDBCardText,\n  MDBCardHeader,\n  MDBCardFooter,\n  MDBBtn,\n  MDBRow,\n  MDBCol,\n  MDBIcon,\n} from \"mdb-react-ui-kit\";\nimport useAxiosPrivate from \"../../hooks/useAxiosPrivate\";\nimport CardModal from \"./CardModal\";\n//Hook f체r Contextabruf\nimport useAuth from \"../../hooks/useAuth\";\nimport { Link } from \"react-router-dom\";\nimport { getDokumentenHash } from \"../../Web3Client\";\n\nfunction DocumentCard(props) {\n  const axiosInstance = useAxiosPrivate();\n  //Context mit Nutzerdaten abrufen\n  const { auth } = useAuth();\n  const [datei, setDatei] = useState([]);\n  const [fileLink, setFileLink] = useState(\"\");\n  const [ShowConfirmation, setShowConfirmation] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n\n  const [isVerified, setIsVerified] = useState(\"ausstehend\");\n\n  const author_company = props.author_company;\n\n  useEffect(() => {\n    //Abruf des Link zur Datei\n    //console.log(auth.pubkey);\n\n    if (props.file != null)\n      axiosInstance.get(\"file/\" + props.file).then((res) => {\n        setDatei(res.data);\n        setFileLink(res.data.file);\n        /*     console.log(author_company + auth.company)\n      console.log(props.confirmed) */\n        setIsLoading(true);\n        // if (props.confirmed == true) {\n        //   setShowConfirmation(false);\n        //   console.log(\"bereits best채tigt, confirm auf True\");\n        // } else if (author_company == auth.company) {\n        //   //console.log(\"Firmen sind ungleich- Confirm auf False\")\n        // } else {\n        //   setShowConfirmation(true);\n        //   //console.log(\"Confirm auf True\")\n        // }\n      }, []);\n  }, [ShowConfirmation]);\n\n  //Debugging Session\n  /*   useEffect(() => {\n    console.log(props.blockchain_rid);\n\n  }, [props.blockchain_rid]); */\n\n  useEffect(() => {\n    console.log(fileLink);\n  }, [fileLink]);\n\n  async function getFileFromUrl(url, defaultType = \"image/jpeg\") {\n    const response = await fetch(url);\n    const data = await response.blob();\n    var name = name;\n    return new File([data], name, {\n      type: data.type || defaultType,\n    });\n  }\n\n  async function verifyDocument(id) {\n    const file = await getFileFromUrl(fileLink);\n    proofFilehash(id, file, function (hashwert) {\n      getDokumentenHash(props.blockchain_did)//Blockchain Transaktion\n        .then((tx) => {\n          if (hashwert == tx) {\n            setIsVerified(\"Hash korrekt\");\n            return true;\n          } else {\n            setIsVerified(\"Hash inkorrekt\");\n            return false;\n          }\n        })\n        .catch((err) => {\n          console.log(\"Fehlgeschlagen. Fehlermeldung: \" + err);\n        });\n    });\n  }\n\n\n  async function proofFilehash(_DokumentID, _file, callback) {\n    //Download der Datei\n    var crypto = require(\"crypto\");\n    var hashwert = \"\";\n    const fileReader = new FileReader();\n    fileReader.readAsText(_file);\n    fileReader.onload = function (e) {\n      hashwert = crypto\n        .createHash(\"sha512\")\n        .update(e.target.result)\n        .digest(\"hex\");\n      callback(hashwert);\n    };\n  }\n\n  // State f체r \"Dokument anzeigen\" Modal\n  const [showDocumentModal, setShowDocumentModal] = useState(false);\n  // Funktion f체r Manipulation von Modal (als props weitergereicht)\n  function toggleShowDocumentModal() {\n    setShowDocumentModal(!showDocumentModal);\n  }\n\n  return (\n    <>\n      <MDBCard className=\"h-100\" style={{ minHeight: \"250px\", width: \"510px\" }}>\n        <MDBCardBody>\n          <MDBRow>\n            <MDBCol sm=\"2\" className=\"d-flex justify-content-center\">\n              {props.type == \"Rechnung\" ? (\n                <MDBIcon\n                  className=\"mt-2\"\n                  fas\n                  size=\"4x\"\n                  icon=\"file-invoice-dollar\"\n                />\n              ) : (\n                <MDBIcon className=\"mt-2\" fas size=\"4x\" icon=\"file-alt\" />\n              )}\n            </MDBCol>\n            <MDBCol sm=\"8\">\n              <MDBCardTitle>\n                {props.type + \" \" + \"(\" + props.documentDate + \")\"}\n              </MDBCardTitle>\n\n              <MDBCardText className=\"mt-2 me-5\">\n                <b>Beschreibung: </b>\n                <br />\n                {props.description == \"\" ? (\n                  <i>Es liegt keine Beschreibung vor.</i>\n                ) : (\n                  props.description\n                )}\n                <br />\n                {props?.isZoll || props.description == \"Zollbescheid\" ? (\n                  <>\n                    <b>Verifikation: </b>\n                    {isVerified}\n                  </>\n                ) : null}\n              </MDBCardText>\n            </MDBCol>\n            <MDBCol sm=\"2\">\n              <Link\n                style={{ display: \"block\", margin: \"1rem 0\" }}\n                to={\"document/\" + props.id.toString()}\n                key={props.id}\n                params={{ title: \"Hello\" }}\n              >\n                <MDBBtn\n                  className=\"float-end\"\n                  outline\n                  onClick={toggleShowDocumentModal}\n                >\n                  Anzeigen\n                </MDBBtn>\n              </Link>\n              {props?.isZoll || props.description == \"Zollbescheid\" ? (\n                <MDBBtn\n                  className=\"float-end mt-3\"\n                  outline\n                  onClick={verifyDocument}\n                >\n                  Verifizieren\n                </MDBBtn>\n              ) : null}\n            </MDBCol>\n          </MDBRow>\n          {/* {props.confirmed ? (\n              <span> Best채tigt</span>\n            ) : (\n              <span> warten auf best채tigung</span>\n            )}\n          </MDBCardText>\n          <MDBBtn outline onClick={toggleShowDocumentModal}>\n            Anzeigen\n          </MDBBtn>\n          {ShowConfirmation ? (\n            <MDBBtn outline onClick={confirmDocument}>\n              Freigeben\n            </MDBBtn>\n          ) : (\n            <br />\n          )} */}\n        </MDBCardBody>\n        <MDBCardFooter className=\"text-muted\">\n          Hochgeladen am: {props.uploadDate}\n          <br />\n          von {props.author_company} ({props.author})\n        </MDBCardFooter>\n      </MDBCard>\n      <CardModal\n        basicModal={showDocumentModal}\n        setBasicModal={setShowDocumentModal}\n        toggleShow={toggleShowDocumentModal}\n        title={props.title}\n        description={props.description}\n      />\n    </>\n  );\n}\n\nexport default DocumentCard;\n"]},"metadata":{},"sourceType":"module"}