{"ast":null,"code":"var _jsxFileName = \"/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/pages/DocumentsNew.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport useAxiosPrivate from \"../hooks/useAxiosPrivate\";\nimport { MDBContainer, MDBBtn, MDBRow, MDBCol, MDBSpinner, MDBBadge, MDBCard, MDBCardHeader, MDBCardBody, MDBCardFooter } from \"mdb-react-ui-kit\";\nimport Divider from \"@mui/material/Divider\";\nimport Snackbar from \"@mui/material/Snackbar\";\nimport MuiAlert from \"@mui/material/Alert\";\nimport DocumentsModal from \"../components/Documents/DocumentsModal\";\nimport ImporteurDocumentsModal from \"../components/Documents/ImporteurDocumentsModal\";\nimport DocumentTransaction from \"../components/Documents/DocumentTransaction\";\nimport DocumentCard from \"../components/Documents/DocumentCard\";\nimport DeclarationCard from \"../components/Documents/DeclarationCard\";\nimport DocumentBreadcrump from \"../components/Documents/DocumentBreadcrumb\";\nimport useAuth from \"../hooks/useAuth\";\nimport { rootShouldForwardProp } from \"@mui/material/styles/styled\"; // Snackbar-Alert\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Alert = /*#__PURE__*/React.forwardRef(_c = function Alert(props, ref) {\n  return /*#__PURE__*/_jsxDEV(MuiAlert, {\n    elevation: 6,\n    ref: ref,\n    variant: \"filled\",\n    ...props\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 10\n  }, this);\n});\n_c2 = Alert;\n\nfunction DocumentsNew(props) {\n  _s();\n\n  // Allgemeine Auftragsinformationen\n  const [transactionData, setTransactionData] = useState([]); // Informationen der hochgeladenen Dokumente\n\n  const [documentsData, setDocumentsData] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const axiosInstance = useAxiosPrivate();\n  const [isImporteur, setIsImporteur] = useState(false); // State wird in Document Upload Modal weitergereicht.\n  // Löst useEffect aus, sobald neues Dokument hochgeladen wurde.\n\n  const [newDocument, setNewDocument] = useState(false);\n  const [isDeclaration, setIsDeclaration] = useState();\n  const [declarationData, setDeclarationData] = useState();\n  const [totalValue, setTotalValue] = useState(true);\n  const [invoiceData, setInvoiceData] = useState();\n  const [isInvoice, setIsInvoice] = useState(); // Anzahl Dokumente\n\n  const [numberInvoiceDocuments, setNumberInvoiceDocuments] = useState(0);\n  const [numberOtherDocuments, setNumberOtherDocuments] = useState(0); // State für \"Dokument hinzufügen\" Modal\n\n  const [addDocumentModal, setAddDocumentModal] = useState(false); // Funktion für Manipulation von Modal (als props weitergereicht)\n\n  function toggleAddDocumentModal() {\n    setAddDocumentModal(!addDocumentModal);\n  } // Speichern der Transaktions-ID aus URL\n\n\n  const {\n    transactionId\n  } = useParams();\n  const {\n    auth\n  } = useAuth();\n  useEffect(async () => {\n    await axiosInstance.get(`transactions/` + transactionId).then(res => {\n      //console.log(res.data);\n      setTransactionData(res.data);\n\n      if (auth.eori_nr == res.data.importeur) {\n        setIsImporteur(true);\n      }\n    });\n    console.log(transactionData);\n    await axiosInstance.get(`documents/?transaction=` + transactionId).then(res => {\n      //console.log(res.data);\n      setDocumentsData(res.data);\n    });\n    await axiosInstance.get(`declaration_auth/?transaction=` + transactionId).then(res => {\n      console.log(res.data.length);\n\n      if (res.data[0]) {\n        axiosInstance.get(\"invoice/\" + res.data[0].invoice.id + \"/\").then(resInvoice => {\n          setTotalValue(resInvoice.data.total_value); //console.log(res.data.total_value)\n\n          setInvoiceData(resInvoice.data);\n          setIsInvoice(true);\n        }).catch(err => {\n          console.log(\"Keine Rechnung vorhanden\");\n          setIsInvoice(false);\n        });\n      } else {\n        setIsInvoice(false);\n      }\n\n      if (res.data.length > 0) {\n        console.log(\"Zollanmeldung liegt vor\");\n        setIsDeclaration(true);\n        setDeclarationData(res.data[0]);\n      }\n    }); //console.log(documentsData);\n\n    setIsLoading(false);\n  }, [newDocument]); // Wenn neues Dokument hinzugefügt wird GET-Request erneut ausgeführt\n  // Summiert Anzahl von Dokumenten,\n  // immer wenn sich documentsData verändert\n\n  useEffect(() => {\n    let invoices = 0;\n    let other = 0;\n\n    for (let i = 0; i < documentsData.length; i++) {\n      if (documentsData[i].type == \"Rechnung\") {\n        invoices += 1;\n      } else {\n        other += 1;\n      }\n    }\n\n    setNumberInvoiceDocuments(invoices);\n    setNumberOtherDocuments(other);\n  }, [documentsData]); // -- Snackbar-Alert Rückmeldung --\n  // State: Geöffnet (true) / Geschlossen (false)\n\n  const [openSnackbar, setOpenSnackbar] = useState(false); // State: Succcess (true) / Error (false)\n\n  const [snackbarSuccess, setSnackbarSuccess] = useState(true); // State: Snackbar Nachricht\n\n  const [snackbarMessage, setSnackbarMessage] = useState(\"\"); // Öffnen der Snackbar\n\n  const handleOpenSnackbar = () => {\n    setOpenSnackbar(true);\n  }; // Schließen der Snackbar\n\n\n  const handleCloseSnackbar = (event, reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n\n    setOpenSnackbar(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: isLoading ? /*#__PURE__*/_jsxDEV(MDBSpinner, {\n      grow: true,\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"visually-hidden\",\n        children: \"L\\xE4dt..\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(MDBContainer, {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Dokumente (neu)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 13\n        }, this), isImporteur == true ? /*#__PURE__*/_jsxDEV(ImporteurDocumentsModal, {\n          addDocumentModal: addDocumentModal,\n          setAddDocumentModal: setAddDocumentModal,\n          toggleAddDocumentModal: toggleAddDocumentModal,\n          transactionData: transactionData,\n          newDocument: newDocument,\n          setNewDocument: setNewDocument,\n          handleOpenSnackbar: handleOpenSnackbar,\n          handleCloseSnackbar: handleCloseSnackbar,\n          setSnackbarSuccess: setSnackbarSuccess,\n          setSnackbarMessage: setSnackbarMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(DocumentsModal, {\n          addDocumentModal: addDocumentModal,\n          setAddDocumentModal: setAddDocumentModal,\n          toggleAddDocumentModal: toggleAddDocumentModal,\n          transactionData: transactionData // Muss noch umgesetzt werden wie in ImporteurDocumentsModal\n          ,\n          newDocument: newDocument,\n          setNewDocument: setNewDocument,\n          handleOpenSnackbar: handleOpenSnackbar,\n          handleCloseSnackbar: handleCloseSnackbar,\n          setSnackbarSuccess: setSnackbarSuccess,\n          setSnackbarMessage: setSnackbarMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(DocumentBreadcrump, {\n          transactionId: transactionId\n        }, transactionId, false, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(DocumentTransaction, {\n          description: transactionData.description,\n          dateAdded: transactionData.date_added,\n          dateProcessed: transactionData.date_processed,\n          status: transactionData.status,\n          street: transactionData.partnership.partner.street,\n          cityCode: transactionData.partnership.partner.city_code,\n          countryCode: transactionData.partnership.partner.country_code,\n          city: transactionData.partnership.partner.city,\n          name: transactionData.partnership.partner.name,\n          id: transactionData.id,\n          blockchain_rid: transactionData.blockchain_id,\n          transactionData: transactionData,\n          isImporteur: isImporteur,\n          numberInvoiceDocuments: numberInvoiceDocuments,\n          numberOtherDocuments: numberOtherDocuments\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"nav\", {\n          className: \"my-3 navbar navbar-expand-lg navbar-light bg-light\",\n          children: /*#__PURE__*/_jsxDEV(MDBContainer, {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(MDBBadge, {\n                pill: true,\n                children: 1\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 225,\n                columnNumber: 19\n              }, this), \" \", /*#__PURE__*/_jsxDEV(\"b\", {\n                children: \"Zollanmeldung (statisch)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 225,\n                columnNumber: 49\n              }, this), /*#__PURE__*/_jsxDEV(MDBBadge, {\n                pill: true,\n                className: \"ms-3\",\n                children: numberInvoiceDocuments\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 226,\n                columnNumber: 19\n              }, this), \" \", /*#__PURE__*/_jsxDEV(\"b\", {\n                children: \"Rechnungsdokumente\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 229,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(MDBBadge, {\n                pill: true,\n                className: \"ms-3\",\n                children: numberOtherDocuments\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 230,\n                columnNumber: 19\n              }, this), \" \", /*#__PURE__*/_jsxDEV(\"b\", {\n                children: \"Sonstige Dokumente\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 233,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 224,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(MDBBtn, {\n              outline: true,\n              className: \"float-end\",\n              color: \"success\",\n              onClick: toggleAddDocumentModal,\n              children: \"Dokument hinzuf\\xFCgen\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 235,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Divider, {\n          textAlign: \"left\",\n          className: \"mb-4\",\n          children: /*#__PURE__*/_jsxDEV(\"h5\", {\n            children: \"Zollanmeldung\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 249,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(DeclarationCard, {\n          transactionId: transactionId,\n          documentId: documentsData.documentId\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Divider, {\n          textAlign: \"left\",\n          className: \"mt-5 mb-4\",\n          children: /*#__PURE__*/_jsxDEV(\"h5\", {\n            children: \"Rechnungsdokumente\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 256,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(MDBRow, {\n          className: \"row-cols-1 row-cols-md-2 row-cols-lg-3 g-4\",\n          children: documentsData.map(documentData => documentData.type == \"Rechnung\" && /*#__PURE__*/_jsxDEV(React.Fragment, {\n            children: /*#__PURE__*/_jsxDEV(MDBCol, {\n              children: /*#__PURE__*/_jsxDEV(DocumentCard, {\n                id: documentData.id,\n                author_company: documentData.owner.employee.company.name,\n                author: documentData.owner.username,\n                type: documentData.type,\n                description: documentData.description,\n                documentDate: documentData.issue_date,\n                uploadDate: documentData.upload_date,\n                blockchain_did: documentData.blockchain_did,\n                file: documentData.file,\n                confirmed: documentData.confirmed\n              }, documentData.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 264,\n                columnNumber: 25\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 263,\n              columnNumber: 23\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 262,\n            columnNumber: 21\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Divider, {\n          textAlign: \"left\",\n          className: \"mt-5 mb-4\",\n          children: /*#__PURE__*/_jsxDEV(\"h5\", {\n            children: \"Sonstige Dokumente\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 288,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 287,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(MDBRow, {\n          className: \"row-cols-1 row-cols-md-2 row-cols-lg-3 g-4\",\n          children: documentsData.map(documentData => documentData.type !== \"Rechnung\" && /*#__PURE__*/_jsxDEV(React.Fragment, {\n            children: /*#__PURE__*/_jsxDEV(MDBCol, {\n              children: /*#__PURE__*/_jsxDEV(DocumentCard, {\n                id: documentData.id,\n                author: documentData.author,\n                type: documentData.type,\n                description: documentData.description,\n                documentDate: documentData.issue_date,\n                uploadDate: documentData.upload_date,\n                file: documentData.file,\n                confirmed: documentData.confirmed,\n                blockchain_did: documentData.blockchain_id\n              }, documentData.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 296,\n                columnNumber: 25\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 295,\n              columnNumber: 23\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 294,\n            columnNumber: 21\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Snackbar, {\n        anchorOrigin: {\n          vertical: \"top\",\n          horizontal: \"right\"\n        },\n        open: openSnackbar,\n        autoHideDuration: 6000,\n        onClose: handleCloseSnackbar,\n        className: \"mt-5\",\n        children: snackbarSuccess == true ? /*#__PURE__*/_jsxDEV(Alert, {\n          onClose: handleCloseSnackbar,\n          severity: \"success\",\n          sx: {\n            width: \"100%\"\n          },\n          children: snackbarMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 322,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(Alert, {\n          onClose: handleCloseSnackbar,\n          severity: \"error\",\n          sx: {\n            width: \"100%\"\n          },\n          children: snackbarMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 330,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)\n  }, void 0, false);\n}\n\n_s(DocumentsNew, \"HAc03VhQUoz2uozMYAADf0aXA2c=\", false, function () {\n  return [useAxiosPrivate, useParams, useAuth];\n});\n\n_c3 = DocumentsNew;\nexport default DocumentsNew;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Alert$React.forwardRef\");\n$RefreshReg$(_c2, \"Alert\");\n$RefreshReg$(_c3, \"DocumentsNew\");","map":{"version":3,"sources":["/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/pages/DocumentsNew.jsx"],"names":["React","useEffect","useState","useParams","useAxiosPrivate","MDBContainer","MDBBtn","MDBRow","MDBCol","MDBSpinner","MDBBadge","MDBCard","MDBCardHeader","MDBCardBody","MDBCardFooter","Divider","Snackbar","MuiAlert","DocumentsModal","ImporteurDocumentsModal","DocumentTransaction","DocumentCard","DeclarationCard","DocumentBreadcrump","useAuth","rootShouldForwardProp","Alert","forwardRef","props","ref","DocumentsNew","transactionData","setTransactionData","documentsData","setDocumentsData","isLoading","setIsLoading","axiosInstance","isImporteur","setIsImporteur","newDocument","setNewDocument","isDeclaration","setIsDeclaration","declarationData","setDeclarationData","totalValue","setTotalValue","invoiceData","setInvoiceData","isInvoice","setIsInvoice","numberInvoiceDocuments","setNumberInvoiceDocuments","numberOtherDocuments","setNumberOtherDocuments","addDocumentModal","setAddDocumentModal","toggleAddDocumentModal","transactionId","auth","get","then","res","data","eori_nr","importeur","console","log","length","invoice","id","resInvoice","total_value","catch","err","invoices","other","i","type","openSnackbar","setOpenSnackbar","snackbarSuccess","setSnackbarSuccess","snackbarMessage","setSnackbarMessage","handleOpenSnackbar","handleCloseSnackbar","event","reason","description","date_added","date_processed","status","partnership","partner","street","city_code","country_code","city","name","blockchain_id","documentId","map","documentData","owner","employee","company","username","issue_date","upload_date","blockchain_did","file","confirmed","author","vertical","horizontal","width"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,OAAOC,eAAP,MAA4B,0BAA5B;AACA,SACEC,YADF,EAEEC,MAFF,EAGEC,MAHF,EAIEC,MAJF,EAKEC,UALF,EAMEC,QANF,EAOEC,OAPF,EAQEC,aARF,EASEC,WATF,EAUEC,aAVF,QAWO,kBAXP;AAYA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,QAAP,MAAqB,qBAArB;AAEA,OAAOC,cAAP,MAA2B,wCAA3B;AACA,OAAOC,uBAAP,MAAoC,iDAApC;AACA,OAAOC,mBAAP,MAAgC,6CAAhC;AACA,OAAOC,YAAP,MAAyB,sCAAzB;AACA,OAAOC,eAAP,MAA4B,yCAA5B;AACA,OAAOC,kBAAP,MAA+B,4CAA/B;AACA,OAAOC,OAAP,MAAoB,kBAApB;AACA,SAASC,qBAAT,QAAsC,6BAAtC,C,CAEA;;;;AACA,MAAMC,KAAK,gBAAG1B,KAAK,CAAC2B,UAAN,MAAiB,SAASD,KAAT,CAAeE,KAAf,EAAsBC,GAAtB,EAA2B;AACxD,sBAAO,QAAC,QAAD;AAAU,IAAA,SAAS,EAAE,CAArB;AAAwB,IAAA,GAAG,EAAEA,GAA7B;AAAkC,IAAA,OAAO,EAAC,QAA1C;AAAA,OAAuDD;AAAvD;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CAFa,CAAd;MAAMF,K;;AAIN,SAASI,YAAT,CAAsBF,KAAtB,EAA6B;AAAA;;AAC3B;AACA,QAAM,CAACG,eAAD,EAAkBC,kBAAlB,IAAwC9B,QAAQ,CAAC,EAAD,CAAtD,CAF2B,CAI3B;;AACA,QAAM,CAAC+B,aAAD,EAAgBC,gBAAhB,IAAoChC,QAAQ,CAAC,EAAD,CAAlD;AAEA,QAAM,CAACiC,SAAD,EAAYC,YAAZ,IAA4BlC,QAAQ,CAAC,IAAD,CAA1C;AAEA,QAAMmC,aAAa,GAAGjC,eAAe,EAArC;AAEA,QAAM,CAACkC,WAAD,EAAcC,cAAd,IAAgCrC,QAAQ,CAAC,KAAD,CAA9C,CAX2B,CAa3B;AACA;;AACA,QAAM,CAACsC,WAAD,EAAcC,cAAd,IAAgCvC,QAAQ,CAAC,KAAD,CAA9C;AAEA,QAAM,CAACwC,aAAD,EAAgBC,gBAAhB,IAAoCzC,QAAQ,EAAlD;AACA,QAAM,CAAC0C,eAAD,EAAkBC,kBAAlB,IAAwC3C,QAAQ,EAAtD;AACA,QAAM,CAAC4C,UAAD,EAAaC,aAAb,IAA8B7C,QAAQ,CAAC,IAAD,CAA5C;AACA,QAAM,CAAC8C,WAAD,EAAcC,cAAd,IAAgC/C,QAAQ,EAA9C;AACA,QAAM,CAACgD,SAAD,EAAYC,YAAZ,IAA4BjD,QAAQ,EAA1C,CArB2B,CAuB3B;;AACA,QAAM,CAACkD,sBAAD,EAAyBC,yBAAzB,IAAsDnD,QAAQ,CAAC,CAAD,CAApE;AACA,QAAM,CAACoD,oBAAD,EAAuBC,uBAAvB,IAAkDrD,QAAQ,CAAC,CAAD,CAAhE,CAzB2B,CA2B3B;;AACA,QAAM,CAACsD,gBAAD,EAAmBC,mBAAnB,IAA0CvD,QAAQ,CAAC,KAAD,CAAxD,CA5B2B,CA6B3B;;AACA,WAASwD,sBAAT,GAAkC;AAChCD,IAAAA,mBAAmB,CAAC,CAACD,gBAAF,CAAnB;AACD,GAhC0B,CAkC3B;;;AACA,QAAM;AAAEG,IAAAA;AAAF,MAAoBxD,SAAS,EAAnC;AACA,QAAM;AAAEyD,IAAAA;AAAF,MAAWpC,OAAO,EAAxB;AAEAvB,EAAAA,SAAS,CAAC,YAAY;AACpB,UAAMoC,aAAa,CAACwB,GAAd,CAAmB,eAAD,GAAkBF,aAApC,EAAmDG,IAAnD,CAAyDC,GAAD,IAAS;AACrE;AACA/B,MAAAA,kBAAkB,CAAC+B,GAAG,CAACC,IAAL,CAAlB;;AACA,UAAIJ,IAAI,CAACK,OAAL,IAAgBF,GAAG,CAACC,IAAJ,CAASE,SAA7B,EAAwC;AACtC3B,QAAAA,cAAc,CAAC,IAAD,CAAd;AACD;AACF,KANK,CAAN;AAOA4B,IAAAA,OAAO,CAACC,GAAR,CAAYrC,eAAZ;AACA,UAAMM,aAAa,CAChBwB,GADG,CACE,yBAAD,GAA4BF,aAD7B,EAEHG,IAFG,CAEGC,GAAD,IAAS;AACb;AACA7B,MAAAA,gBAAgB,CAAC6B,GAAG,CAACC,IAAL,CAAhB;AACD,KALG,CAAN;AAOA,UAAM3B,aAAa,CAChBwB,GADG,CACE,gCAAD,GAAmCF,aADpC,EAEHG,IAFG,CAEGC,GAAD,IAAS;AACbI,MAAAA,OAAO,CAACC,GAAR,CAAYL,GAAG,CAACC,IAAJ,CAASK,MAArB;;AACA,UAAIN,GAAG,CAACC,IAAJ,CAAS,CAAT,CAAJ,EAAiB;AACf3B,QAAAA,aAAa,CACVwB,GADH,CACO,aAAaE,GAAG,CAACC,IAAJ,CAAS,CAAT,EAAYM,OAAZ,CAAoBC,EAAjC,GAAsC,GAD7C,EAEGT,IAFH,CAESU,UAAD,IAAgB;AACpBzB,UAAAA,aAAa,CAACyB,UAAU,CAACR,IAAX,CAAgBS,WAAjB,CAAb,CADoB,CAEpB;;AACAxB,UAAAA,cAAc,CAACuB,UAAU,CAACR,IAAZ,CAAd;AACAb,UAAAA,YAAY,CAAC,IAAD,CAAZ;AACD,SAPH,EAQGuB,KARH,CAQUC,GAAD,IAAS;AACdR,UAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;AACAjB,UAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,SAXH;AAYD,OAbD,MAaO;AACLA,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACD;;AACD,UAAIY,GAAG,CAACC,IAAJ,CAASK,MAAT,GAAkB,CAAtB,EAAyB;AACvBF,QAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACAzB,QAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACAE,QAAAA,kBAAkB,CAACkB,GAAG,CAACC,IAAJ,CAAS,CAAT,CAAD,CAAlB;AACD;AACF,KAzBG,CAAN,CAhBoB,CA0CpB;;AAEA5B,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,GA7CQ,EA6CN,CAACI,WAAD,CA7CM,CAAT,CAtC2B,CAoF3B;AAEA;AACA;;AACAvC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI2E,QAAQ,GAAG,CAAf;AACA,QAAIC,KAAK,GAAG,CAAZ;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG7C,aAAa,CAACoC,MAAlC,EAA0CS,CAAC,EAA3C,EAA+C;AAC7C,UAAI7C,aAAa,CAAC6C,CAAD,CAAb,CAAiBC,IAAjB,IAAyB,UAA7B,EAAyC;AACvCH,QAAAA,QAAQ,IAAI,CAAZ;AACD,OAFD,MAEO;AACLC,QAAAA,KAAK,IAAI,CAAT;AACD;AACF;;AACDxB,IAAAA,yBAAyB,CAACuB,QAAD,CAAzB;AACArB,IAAAA,uBAAuB,CAACsB,KAAD,CAAvB;AACD,GAZQ,EAYN,CAAC5C,aAAD,CAZM,CAAT,CAxF2B,CAsG3B;AACA;;AACA,QAAM,CAAC+C,YAAD,EAAeC,eAAf,IAAkC/E,QAAQ,CAAC,KAAD,CAAhD,CAxG2B,CAyG3B;;AACA,QAAM,CAACgF,eAAD,EAAkBC,kBAAlB,IAAwCjF,QAAQ,CAAC,IAAD,CAAtD,CA1G2B,CA2G3B;;AACA,QAAM,CAACkF,eAAD,EAAkBC,kBAAlB,IAAwCnF,QAAQ,CAAC,EAAD,CAAtD,CA5G2B,CA8G3B;;AACA,QAAMoF,kBAAkB,GAAG,MAAM;AAC/BL,IAAAA,eAAe,CAAC,IAAD,CAAf;AACD,GAFD,CA/G2B,CAmH3B;;;AACA,QAAMM,mBAAmB,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC7C,QAAIA,MAAM,KAAK,WAAf,EAA4B;AAC1B;AACD;;AAEDR,IAAAA,eAAe,CAAC,KAAD,CAAf;AACD,GAND;;AAQA,sBACE;AAAA,cACG9C,SAAS,gBACR,QAAC,UAAD;AAAY,MAAA,IAAI,MAAhB;AAAA,6BACE;AAAM,QAAA,SAAS,EAAC,iBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADQ,gBAKR;AAAA,8BACE,QAAC,YAAD;AAAA,gCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,EAIGG,WAAW,IAAI,IAAf,gBACC,QAAC,uBAAD;AACE,UAAA,gBAAgB,EAAEkB,gBADpB;AAEE,UAAA,mBAAmB,EAAEC,mBAFvB;AAGE,UAAA,sBAAsB,EAAEC,sBAH1B;AAIE,UAAA,eAAe,EAAE3B,eAJnB;AAKE,UAAA,WAAW,EAAES,WALf;AAME,UAAA,cAAc,EAAEC,cANlB;AAOE,UAAA,kBAAkB,EAAE6C,kBAPtB;AAQE,UAAA,mBAAmB,EAAEC,mBARvB;AASE,UAAA,kBAAkB,EAAEJ,kBATtB;AAUE,UAAA,kBAAkB,EAAEE;AAVtB;AAAA;AAAA;AAAA;AAAA,gBADD,gBAcC,QAAC,cAAD;AACE,UAAA,gBAAgB,EAAE7B,gBADpB;AAEE,UAAA,mBAAmB,EAAEC,mBAFvB;AAGE,UAAA,sBAAsB,EAAEC,sBAH1B;AAIE,UAAA,eAAe,EAAE3B,eAJnB,CAKE;AALF;AAME,UAAA,WAAW,EAAES,WANf;AAOE,UAAA,cAAc,EAAEC,cAPlB;AAQE,UAAA,kBAAkB,EAAE6C,kBARtB;AASE,UAAA,mBAAmB,EAAEC,mBATvB;AAUE,UAAA,kBAAkB,EAAEJ,kBAVtB;AAWE,UAAA,kBAAkB,EAAEE;AAXtB;AAAA;AAAA;AAAA;AAAA,gBAlBJ,eAiCE,QAAC,kBAAD;AAEE,UAAA,aAAa,EAAE1B;AAFjB,WACOA,aADP;AAAA;AAAA;AAAA;AAAA,gBAjCF,eAqCE,QAAC,mBAAD;AACE,UAAA,WAAW,EAAE5B,eAAe,CAAC2D,WAD/B;AAEE,UAAA,SAAS,EAAE3D,eAAe,CAAC4D,UAF7B;AAGE,UAAA,aAAa,EAAE5D,eAAe,CAAC6D,cAHjC;AAIE,UAAA,MAAM,EAAE7D,eAAe,CAAC8D,MAJ1B;AAKE,UAAA,MAAM,EAAE9D,eAAe,CAAC+D,WAAhB,CAA4BC,OAA5B,CAAoCC,MAL9C;AAME,UAAA,QAAQ,EAAEjE,eAAe,CAAC+D,WAAhB,CAA4BC,OAA5B,CAAoCE,SANhD;AAOE,UAAA,WAAW,EAAElE,eAAe,CAAC+D,WAAhB,CAA4BC,OAA5B,CAAoCG,YAPnD;AAQE,UAAA,IAAI,EAAEnE,eAAe,CAAC+D,WAAhB,CAA4BC,OAA5B,CAAoCI,IAR5C;AASE,UAAA,IAAI,EAAEpE,eAAe,CAAC+D,WAAhB,CAA4BC,OAA5B,CAAoCK,IAT5C;AAUE,UAAA,EAAE,EAAErE,eAAe,CAACwC,EAVtB;AAWE,UAAA,cAAc,EAAExC,eAAe,CAACsE,aAXlC;AAYE,UAAA,eAAe,EAAEtE,eAZnB;AAaE,UAAA,WAAW,EAAEO,WAbf;AAcE,UAAA,sBAAsB,EAAEc,sBAd1B;AAeE,UAAA,oBAAoB,EAAEE;AAfxB;AAAA;AAAA;AAAA;AAAA,gBArCF,eAwDE;AAAK,UAAA,SAAS,EAAC,oDAAf;AAAA,iCACE,QAAC,YAAD;AAAA,oCACE;AAAA,sCACE,QAAC,QAAD;AAAU,gBAAA,IAAI,MAAd;AAAA,0BAAgB;AAAhB;AAAA;AAAA;AAAA;AAAA,sBADF,oBACgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADhC,eAEE,QAAC,QAAD;AAAU,gBAAA,IAAI,MAAd;AAAe,gBAAA,SAAS,EAAC,MAAzB;AAAA,0BACGF;AADH;AAAA;AAAA;AAAA;AAAA,sBAFF,EAIc,GAJd,eAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBALF,eAME,QAAC,QAAD;AAAU,gBAAA,IAAI,MAAd;AAAe,gBAAA,SAAS,EAAC,MAAzB;AAAA,0BACGE;AADH;AAAA;AAAA;AAAA;AAAA,sBANF,EAQc,GARd,eASE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBATF;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,eAYE,QAAC,MAAD;AACE,cAAA,OAAO,MADT;AAEE,cAAA,SAAS,EAAC,WAFZ;AAGE,cAAA,KAAK,EAAC,SAHR;AAIE,cAAA,OAAO,EAAEI,sBAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAZF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBAxDF,eAkFE,QAAC,OAAD;AAAS,UAAA,SAAS,EAAC,MAAnB;AAA0B,UAAA,SAAS,EAAC,MAApC;AAAA,iCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBAlFF,eAqFE,QAAC,eAAD;AACE,UAAA,aAAa,EAAEC,aADjB;AAEE,UAAA,UAAU,EAAE1B,aAAa,CAACqE;AAF5B;AAAA;AAAA;AAAA;AAAA,gBArFF,eAyFE,QAAC,OAAD;AAAS,UAAA,SAAS,EAAC,MAAnB;AAA0B,UAAA,SAAS,EAAC,WAApC;AAAA,iCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBAzFF,eA4FE,QAAC,MAAD;AAAQ,UAAA,SAAS,EAAC,4CAAlB;AAAA,oBACGrE,aAAa,CAACsE,GAAd,CACEC,YAAD,IACEA,YAAY,CAACzB,IAAb,IAAqB,UAArB,iBACE,QAAC,KAAD,CAAO,QAAP;AAAA,mCACE,QAAC,MAAD;AAAA,qCACE,QAAC,YAAD;AAEE,gBAAA,EAAE,EAAEyB,YAAY,CAACjC,EAFnB;AAGE,gBAAA,cAAc,EACZiC,YAAY,CAACC,KAAb,CAAmBC,QAAnB,CAA4BC,OAA5B,CAAoCP,IAJxC;AAME,gBAAA,MAAM,EAAEI,YAAY,CAACC,KAAb,CAAmBG,QAN7B;AAOE,gBAAA,IAAI,EAAEJ,YAAY,CAACzB,IAPrB;AAQE,gBAAA,WAAW,EAAEyB,YAAY,CAACd,WAR5B;AASE,gBAAA,YAAY,EAAEc,YAAY,CAACK,UAT7B;AAUE,gBAAA,UAAU,EAAEL,YAAY,CAACM,WAV3B;AAWE,gBAAA,cAAc,EAAEN,YAAY,CAACO,cAX/B;AAYE,gBAAA,IAAI,EAAEP,YAAY,CAACQ,IAZrB;AAaE,gBAAA,SAAS,EAAER,YAAY,CAACS;AAb1B,iBACOT,YAAY,CAACjC,EADpB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,kBAHL;AADH;AAAA;AAAA;AAAA;AAAA,gBA5FF,eAyHE,QAAC,OAAD;AAAS,UAAA,SAAS,EAAC,MAAnB;AAA0B,UAAA,SAAS,EAAC,WAApC;AAAA,iCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBAzHF,eA4HE,QAAC,MAAD;AAAQ,UAAA,SAAS,EAAC,4CAAlB;AAAA,oBACGtC,aAAa,CAACsE,GAAd,CACEC,YAAD,IACEA,YAAY,CAACzB,IAAb,KAAsB,UAAtB,iBACE,QAAC,KAAD,CAAO,QAAP;AAAA,mCACE,QAAC,MAAD;AAAA,qCACE,QAAC,YAAD;AAEE,gBAAA,EAAE,EAAEyB,YAAY,CAACjC,EAFnB;AAGE,gBAAA,MAAM,EAAEiC,YAAY,CAACU,MAHvB;AAIE,gBAAA,IAAI,EAAEV,YAAY,CAACzB,IAJrB;AAKE,gBAAA,WAAW,EAAEyB,YAAY,CAACd,WAL5B;AAME,gBAAA,YAAY,EAAEc,YAAY,CAACK,UAN7B;AAOE,gBAAA,UAAU,EAAEL,YAAY,CAACM,WAP3B;AAQE,gBAAA,IAAI,EAAEN,YAAY,CAACQ,IARrB;AASE,gBAAA,SAAS,EAAER,YAAY,CAACS,SAT1B;AAUE,gBAAA,cAAc,EAAET,YAAY,CAACH;AAV/B,iBACOG,YAAY,CAACjC,EADpB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,kBAHL;AADH;AAAA;AAAA;AAAA;AAAA,gBA5HF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAqJE,QAAC,QAAD;AACE,QAAA,YAAY,EAAE;AAAE4C,UAAAA,QAAQ,EAAE,KAAZ;AAAmBC,UAAAA,UAAU,EAAE;AAA/B,SADhB;AAEE,QAAA,IAAI,EAAEpC,YAFR;AAGE,QAAA,gBAAgB,EAAE,IAHpB;AAIE,QAAA,OAAO,EAAEO,mBAJX;AAKE,QAAA,SAAS,EAAC,MALZ;AAAA,kBAOGL,eAAe,IAAI,IAAnB,gBACC,QAAC,KAAD;AACE,UAAA,OAAO,EAAEK,mBADX;AAEE,UAAA,QAAQ,EAAC,SAFX;AAGE,UAAA,EAAE,EAAE;AAAE8B,YAAAA,KAAK,EAAE;AAAT,WAHN;AAAA,oBAKGjC;AALH;AAAA;AAAA;AAAA;AAAA,gBADD,gBASC,QAAC,KAAD;AACE,UAAA,OAAO,EAAEG,mBADX;AAEE,UAAA,QAAQ,EAAC,OAFX;AAGE,UAAA,EAAE,EAAE;AAAE8B,YAAAA,KAAK,EAAE;AAAT,WAHN;AAAA,oBAKGjC;AALH;AAAA;AAAA;AAAA;AAAA;AAhBJ;AAAA;AAAA;AAAA;AAAA,cArJF;AAAA;AANJ,mBADF;AAyLD;;GArTQtD,Y;UASe1B,e,EA0BID,S,EACTqB,O;;;MApCVM,Y;AAuTT,eAAeA,YAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport useAxiosPrivate from \"../hooks/useAxiosPrivate\";\nimport {\n  MDBContainer,\n  MDBBtn,\n  MDBRow,\n  MDBCol,\n  MDBSpinner,\n  MDBBadge,\n  MDBCard,\n  MDBCardHeader,\n  MDBCardBody,\n  MDBCardFooter,\n} from \"mdb-react-ui-kit\";\nimport Divider from \"@mui/material/Divider\";\nimport Snackbar from \"@mui/material/Snackbar\";\nimport MuiAlert from \"@mui/material/Alert\";\n\nimport DocumentsModal from \"../components/Documents/DocumentsModal\";\nimport ImporteurDocumentsModal from \"../components/Documents/ImporteurDocumentsModal\";\nimport DocumentTransaction from \"../components/Documents/DocumentTransaction\";\nimport DocumentCard from \"../components/Documents/DocumentCard\";\nimport DeclarationCard from \"../components/Documents/DeclarationCard\";\nimport DocumentBreadcrump from \"../components/Documents/DocumentBreadcrumb\";\nimport useAuth from \"../hooks/useAuth\";\nimport { rootShouldForwardProp } from \"@mui/material/styles/styled\";\n\n// Snackbar-Alert\nconst Alert = React.forwardRef(function Alert(props, ref) {\n  return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\n});\n\nfunction DocumentsNew(props) {\n  // Allgemeine Auftragsinformationen\n  const [transactionData, setTransactionData] = useState([]);\n\n  // Informationen der hochgeladenen Dokumente\n  const [documentsData, setDocumentsData] = useState([]);\n\n  const [isLoading, setIsLoading] = useState(true);\n\n  const axiosInstance = useAxiosPrivate();\n\n  const [isImporteur, setIsImporteur] = useState(false);\n\n  // State wird in Document Upload Modal weitergereicht.\n  // Löst useEffect aus, sobald neues Dokument hochgeladen wurde.\n  const [newDocument, setNewDocument] = useState(false);\n\n  const [isDeclaration, setIsDeclaration] = useState();\n  const [declarationData, setDeclarationData] = useState();\n  const [totalValue, setTotalValue] = useState(true);\n  const [invoiceData, setInvoiceData] = useState();\n  const [isInvoice, setIsInvoice] = useState();\n\n  // Anzahl Dokumente\n  const [numberInvoiceDocuments, setNumberInvoiceDocuments] = useState(0);\n  const [numberOtherDocuments, setNumberOtherDocuments] = useState(0);\n\n  // State für \"Dokument hinzufügen\" Modal\n  const [addDocumentModal, setAddDocumentModal] = useState(false);\n  // Funktion für Manipulation von Modal (als props weitergereicht)\n  function toggleAddDocumentModal() {\n    setAddDocumentModal(!addDocumentModal);\n  }\n\n  // Speichern der Transaktions-ID aus URL\n  const { transactionId } = useParams();\n  const { auth } = useAuth();\n\n  useEffect(async () => {\n    await axiosInstance.get(`transactions/` + transactionId).then((res) => {\n      //console.log(res.data);\n      setTransactionData(res.data);\n      if (auth.eori_nr == res.data.importeur) {\n        setIsImporteur(true);\n      }\n    });\n    console.log(transactionData);\n    await axiosInstance\n      .get(`documents/?transaction=` + transactionId)\n      .then((res) => {\n        //console.log(res.data);\n        setDocumentsData(res.data);\n      });\n\n    await axiosInstance\n      .get(`declaration_auth/?transaction=` + transactionId)\n      .then((res) => {\n        console.log(res.data.length);\n        if (res.data[0]) {\n          axiosInstance\n            .get(\"invoice/\" + res.data[0].invoice.id + \"/\")\n            .then((resInvoice) => {\n              setTotalValue(resInvoice.data.total_value);\n              //console.log(res.data.total_value)\n              setInvoiceData(resInvoice.data);\n              setIsInvoice(true);\n            })\n            .catch((err) => {\n              console.log(\"Keine Rechnung vorhanden\");\n              setIsInvoice(false);\n            });\n        } else {\n          setIsInvoice(false);\n        }\n        if (res.data.length > 0) {\n          console.log(\"Zollanmeldung liegt vor\");\n          setIsDeclaration(true);\n          setDeclarationData(res.data[0]);\n        }\n      });\n    //console.log(documentsData);\n\n    setIsLoading(false);\n  }, [newDocument]);\n  // Wenn neues Dokument hinzugefügt wird GET-Request erneut ausgeführt\n\n  // Summiert Anzahl von Dokumenten,\n  // immer wenn sich documentsData verändert\n  useEffect(() => {\n    let invoices = 0;\n    let other = 0;\n    for (let i = 0; i < documentsData.length; i++) {\n      if (documentsData[i].type == \"Rechnung\") {\n        invoices += 1;\n      } else {\n        other += 1;\n      }\n    }\n    setNumberInvoiceDocuments(invoices);\n    setNumberOtherDocuments(other);\n  }, [documentsData]);\n\n  // -- Snackbar-Alert Rückmeldung --\n  // State: Geöffnet (true) / Geschlossen (false)\n  const [openSnackbar, setOpenSnackbar] = useState(false);\n  // State: Succcess (true) / Error (false)\n  const [snackbarSuccess, setSnackbarSuccess] = useState(true);\n  // State: Snackbar Nachricht\n  const [snackbarMessage, setSnackbarMessage] = useState(\"\");\n\n  // Öffnen der Snackbar\n  const handleOpenSnackbar = () => {\n    setOpenSnackbar(true);\n  };\n\n  // Schließen der Snackbar\n  const handleCloseSnackbar = (event, reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n\n    setOpenSnackbar(false);\n  };\n\n  return (\n    <>\n      {isLoading ? (\n        <MDBSpinner grow>\n          <span className=\"visually-hidden\">Lädt..</span>\n        </MDBSpinner>\n      ) : (\n        <>\n          <MDBContainer>\n            <h3>Dokumente (neu)</h3>\n\n            {/* Dokumenten Modal */}\n            {isImporteur == true ? (\n              <ImporteurDocumentsModal\n                addDocumentModal={addDocumentModal}\n                setAddDocumentModal={setAddDocumentModal}\n                toggleAddDocumentModal={toggleAddDocumentModal}\n                transactionData={transactionData}\n                newDocument={newDocument}\n                setNewDocument={setNewDocument}\n                handleOpenSnackbar={handleOpenSnackbar}\n                handleCloseSnackbar={handleCloseSnackbar}\n                setSnackbarSuccess={setSnackbarSuccess}\n                setSnackbarMessage={setSnackbarMessage}\n              />\n            ) : (\n              <DocumentsModal\n                addDocumentModal={addDocumentModal}\n                setAddDocumentModal={setAddDocumentModal}\n                toggleAddDocumentModal={toggleAddDocumentModal}\n                transactionData={transactionData}\n                // Muss noch umgesetzt werden wie in ImporteurDocumentsModal\n                newDocument={newDocument}\n                setNewDocument={setNewDocument}\n                handleOpenSnackbar={handleOpenSnackbar}\n                handleCloseSnackbar={handleCloseSnackbar}\n                setSnackbarSuccess={setSnackbarSuccess}\n                setSnackbarMessage={setSnackbarMessage}\n              />\n            )}\n\n            <DocumentBreadcrump\n              key={transactionId}\n              transactionId={transactionId}\n            />\n            <DocumentTransaction\n              description={transactionData.description}\n              dateAdded={transactionData.date_added}\n              dateProcessed={transactionData.date_processed}\n              status={transactionData.status}\n              street={transactionData.partnership.partner.street}\n              cityCode={transactionData.partnership.partner.city_code}\n              countryCode={transactionData.partnership.partner.country_code}\n              city={transactionData.partnership.partner.city}\n              name={transactionData.partnership.partner.name}\n              id={transactionData.id}\n              blockchain_rid={transactionData.blockchain_id}\n              transactionData={transactionData}\n              isImporteur={isImporteur}\n              numberInvoiceDocuments={numberInvoiceDocuments}\n              numberOtherDocuments={numberOtherDocuments}\n            />\n\n            {/* Navleiste mit Anzahl der Dokumente */}\n            <nav className=\"my-3 navbar navbar-expand-lg navbar-light bg-light\">\n              <MDBContainer>\n                <div>\n                  <MDBBadge pill>{1}</MDBBadge> <b>Zollanmeldung (statisch)</b>\n                  <MDBBadge pill className=\"ms-3\">\n                    {numberInvoiceDocuments}\n                  </MDBBadge>{\" \"}\n                  <b>Rechnungsdokumente</b>\n                  <MDBBadge pill className=\"ms-3\">\n                    {numberOtherDocuments}\n                  </MDBBadge>{\" \"}\n                  <b>Sonstige Dokumente</b>\n                </div>\n                <MDBBtn\n                  outline\n                  className=\"float-end\"\n                  color=\"success\"\n                  onClick={toggleAddDocumentModal}\n                >\n                  Dokument hinzufügen\n                </MDBBtn>\n              </MDBContainer>\n            </nav>\n\n            {/* Auflistung der Rechnungsdokumente */}\n\n            <Divider textAlign=\"left\" className=\"mb-4\">\n              <h5>Zollanmeldung</h5>\n            </Divider>\n            <DeclarationCard\n              transactionId={transactionId}\n              documentId={documentsData.documentId}\n            />\n            <Divider textAlign=\"left\" className=\"mt-5 mb-4\">\n              <h5>Rechnungsdokumente</h5>\n            </Divider>\n            <MDBRow className=\"row-cols-1 row-cols-md-2 row-cols-lg-3 g-4\">\n              {documentsData.map(\n                (documentData) =>\n                  documentData.type == \"Rechnung\" && (\n                    <React.Fragment>\n                      <MDBCol>\n                        <DocumentCard\n                          key={documentData.id}\n                          id={documentData.id}\n                          author_company={\n                            documentData.owner.employee.company.name\n                          }\n                          author={documentData.owner.username}\n                          type={documentData.type}\n                          description={documentData.description}\n                          documentDate={documentData.issue_date}\n                          uploadDate={documentData.upload_date}\n                          blockchain_did={documentData.blockchain_did}\n                          file={documentData.file}\n                          confirmed={documentData.confirmed}\n                        />\n                      </MDBCol>\n                    </React.Fragment>\n                  )\n              )}\n            </MDBRow>\n\n            {/* Auflistung der sontigen Dokumente */}\n\n            <Divider textAlign=\"left\" className=\"mt-5 mb-4\">\n              <h5>Sonstige Dokumente</h5>\n            </Divider>\n            <MDBRow className=\"row-cols-1 row-cols-md-2 row-cols-lg-3 g-4\">\n              {documentsData.map(\n                (documentData) =>\n                  documentData.type !== \"Rechnung\" && (\n                    <React.Fragment>\n                      <MDBCol>\n                        <DocumentCard\n                          key={documentData.id}\n                          id={documentData.id}\n                          author={documentData.author}\n                          type={documentData.type}\n                          description={documentData.description}\n                          documentDate={documentData.issue_date}\n                          uploadDate={documentData.upload_date}\n                          file={documentData.file}\n                          confirmed={documentData.confirmed}\n                          blockchain_did={documentData.blockchain_id}\n                        />\n                      </MDBCol>\n                    </React.Fragment>\n                  )\n              )}\n            </MDBRow>\n          </MDBContainer>\n          <Snackbar\n            anchorOrigin={{ vertical: \"top\", horizontal: \"right\" }}\n            open={openSnackbar}\n            autoHideDuration={6000}\n            onClose={handleCloseSnackbar}\n            className=\"mt-5\"\n          >\n            {snackbarSuccess == true ? (\n              <Alert\n                onClose={handleCloseSnackbar}\n                severity=\"success\"\n                sx={{ width: \"100%\" }}\n              >\n                {snackbarMessage}\n              </Alert>\n            ) : (\n              <Alert\n                onClose={handleCloseSnackbar}\n                severity=\"error\"\n                sx={{ width: \"100%\" }}\n              >\n                {snackbarMessage}\n              </Alert>\n            )}\n          </Snackbar>\n        </>\n      )}\n    </>\n  );\n}\n\nexport default DocumentsNew;\n"]},"metadata":{},"sourceType":"module"}