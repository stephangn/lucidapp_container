{"ast":null,"code":"import axios from \"axios\";\nconst baseURL = \"http://tradechain-app.herokuapp.com/\";\n/* Create standalone instance of axios that we can use every in the software*/\n\nconst axiosInstance = axios.create({\n  baseURL: baseURL,\n  timeout: 5000,\n  headers: {\n    /*Customize header to bearer*/\n    Authorization: \"Bearer \" + localStorage.getItem(\"access_token\"),\n    \"Content-Type\": \"application/json\",\n    accept: \"application/json\"\n  }\n});\n/* axiosInstance.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    const originalRequest = error.config;\n\n    // Prevent infinite loops\n    if (\n      error.response.status === 401 &&\n      originalRequest.url === baseURL + \"api/token/refresh/\"\n    ) {\n      window.location.href = \"/login/\";\n      return Promise.reject(error);\n    }\n\n    if (\n      error.response.data.code === \"token_not_valid\" &&\n      error.response.status === 401 &&\n      error.response.statusText === \"Unauthorized\"\n    ) {\n      const refreshToken = localStorage.getItem(\"refresh_token\");\n\n      if (refreshToken) {\n        const tokenParts = JSON.parse(atob(refreshToken.split(\".\")[1]));\n\n        // exp date in token is expressed in seconds, while now() returns milliseconds:\n        const now = Math.ceil(Date.now() / 1000);\n        console.log(tokenParts.exp);\n\n        if (tokenParts.exp > now) {\n          return axiosInstance\n            .post(\"api/token/refresh/\", { refresh: refreshToken })\n            .then((response) => {\n              localStorage.setItem(\"access_token\", response.data.access);\n              localStorage.setItem(\"refresh_token\", response.data.refresh);\n\n              axiosInstance.defaults.headers[\"Authorization\"] =\n                \"JWT \" + response.data.access;\n              originalRequest.headers[\"Authorization\"] =\n                \"JWT \" + response.data.access;\n\n              return axiosInstance(originalRequest);\n            })\n            .catch((err) => {\n              console.log(err);\n            });\n        } else {\n          console.log(\"Refresh token is expired\", tokenParts.exp, now);\n          window.location.href = \"/login/\";\n        }\n      } else {\n        console.log(\"Refresh token not available.\");\n        window.location.href = \"/login/\";\n      }\n    }\n\n    // specific error handling done elsewhere\n    return Promise.reject(error);\n  }\n); */\n\nexport default axiosInstance;","map":{"version":3,"sources":["/Users/stephan/Dropbox/Entwicklung/webdev/projektstudium/client/src/axiosApi.js"],"names":["axios","baseURL","axiosInstance","create","timeout","headers","Authorization","localStorage","getItem","accept"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,MAAMC,OAAO,GAAG,sCAAhB;AACA;;AACA,MAAMC,aAAa,GAAGF,KAAK,CAACG,MAAN,CAAa;AACjCF,EAAAA,OAAO,EAAEA,OADwB;AAEjCG,EAAAA,OAAO,EAAE,IAFwB;AAGjCC,EAAAA,OAAO,EAAE;AACP;AACAC,IAAAA,aAAa,EAAE,YAAYC,YAAY,CAACC,OAAb,CAAqB,cAArB,CAFpB;AAGP,oBAAgB,kBAHT;AAIPC,IAAAA,MAAM,EAAE;AAJD;AAHwB,CAAb,CAAtB;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAeP,aAAf","sourcesContent":["import axios from \"axios\";\n\nconst baseURL = \"http://tradechain-app.herokuapp.com/\";\n/* Create standalone instance of axios that we can use every in the software*/\nconst axiosInstance = axios.create({\n  baseURL: baseURL,\n  timeout: 5000,\n  headers: {\n    /*Customize header to bearer*/\n    Authorization: \"Bearer \" + localStorage.getItem(\"access_token\"),\n    \"Content-Type\": \"application/json\",\n    accept: \"application/json\",\n  },\n});\n\n/* axiosInstance.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    const originalRequest = error.config;\n\n    // Prevent infinite loops\n    if (\n      error.response.status === 401 &&\n      originalRequest.url === baseURL + \"api/token/refresh/\"\n    ) {\n      window.location.href = \"/login/\";\n      return Promise.reject(error);\n    }\n\n    if (\n      error.response.data.code === \"token_not_valid\" &&\n      error.response.status === 401 &&\n      error.response.statusText === \"Unauthorized\"\n    ) {\n      const refreshToken = localStorage.getItem(\"refresh_token\");\n\n      if (refreshToken) {\n        const tokenParts = JSON.parse(atob(refreshToken.split(\".\")[1]));\n\n        // exp date in token is expressed in seconds, while now() returns milliseconds:\n        const now = Math.ceil(Date.now() / 1000);\n        console.log(tokenParts.exp);\n\n        if (tokenParts.exp > now) {\n          return axiosInstance\n            .post(\"api/token/refresh/\", { refresh: refreshToken })\n            .then((response) => {\n              localStorage.setItem(\"access_token\", response.data.access);\n              localStorage.setItem(\"refresh_token\", response.data.refresh);\n\n              axiosInstance.defaults.headers[\"Authorization\"] =\n                \"JWT \" + response.data.access;\n              originalRequest.headers[\"Authorization\"] =\n                \"JWT \" + response.data.access;\n\n              return axiosInstance(originalRequest);\n            })\n            .catch((err) => {\n              console.log(err);\n            });\n        } else {\n          console.log(\"Refresh token is expired\", tokenParts.exp, now);\n          window.location.href = \"/login/\";\n        }\n      } else {\n        console.log(\"Refresh token not available.\");\n        window.location.href = \"/login/\";\n      }\n    }\n\n    // specific error handling done elsewhere\n    return Promise.reject(error);\n  }\n); */\n\nexport default axiosInstance;\n"]},"metadata":{},"sourceType":"module"}